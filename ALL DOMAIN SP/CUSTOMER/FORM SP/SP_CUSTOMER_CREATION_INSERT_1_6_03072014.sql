-- VER1.6 ISSUE:817 COMMENT #139 STARTDATE:02/07/2014 ENDDATE:03/07/2014 DESC:CUSTOMERID DECLARED GLOBALLY AND CHANGED SOME CONDITION FOR SIMULTANEOUS EXECUTION DONE BY:DHIVYA.A
-- VER1.5 ISSUE:817 COMMENT #139 STARTDATE:21/06/2014 ENDDATE:21/06/2014 DESC:DROPED TEMP TABLES INSIDE ROLL BACK AND COMMIT DONE BY:DHIVYA.A
--version:1.4 --sdate:29/04/2014 --edate:29/04/2014 --issue:817  --desc:CHANGING TEMP TABLE FOR DYNAMIC PURPOSE --doneby:BHAVANI.R
--version:1.3 --sdate:17/04/2014 --edate:17/04/2014 --issue:345 --comment no#609 --desc:added tikcler_part --doneby:RL
--version:1.2 --sdate:03/04/2014 --edate:03/04/2014 --issue:797--commentno#4 --desc:REPLACED TABLENAME AND HEADERNAME -deoneby:SASIKALA.D
--version:1.1 --sdate:01/04/2014 --edate:01/04/2014 --issue:345 --commentno#639 --desc:through error msg if given card active --deoneby:RL
--version:1.0 --sadte:31/03/2014 --edate:31/03/2014 --issue:345 --commentno#629 --desc:check if this card is in inventory r not,if inventory means assign otherwise rollback --doneby:RL
--version 0.9 startdate:28/02/2014 --enddate:28/02/2014--- issueno 754 commentno:36-->desc:added sub sp to convert userstamp as uld_id done by:Dhivya 
--version 0.8 startdate:27/02/2014 --enddate:27/02/2014--- issueno 754 commentno:22-->desc: REPLACE USERSTAMP DATATYPE AS INT
-- version --> 0.7 startdate -->18/02/2014 enddate --> 19/02/2014 description --> Implementing flag for success message and check the insertion on SP_CUSTOMER_CREATION_INSERT Done By:Bhavani.R -->issue:749 comment:#61
-- version --> 0.6 startdate -->29/01/2014 enddate --> 30/01/2014 description --> UPDATED CUSTOMER ENTRY DETAILS AS PER STIME AND ETIME DATATYPE UPDATION DONE BY:DHIVYA.A -->issue :594 comment:#71
-- version --> 0.5 startdate -->21/11/2013 enddate --> 21/11/2013 description --> REMOVED UNEXPECTED CONDITION IN CUSTOMER_ACCESS_CARD_DETAILS>DONE BY:DHIVYA.A -->issue :660
-- version --> 0.4 startdate -->20/11/2013 enddate --> 20/11/2013 description --> ADDED GUEST CARD COLUMN IN CUSTOMER_ACCESS_CARD_DETAILS>DONE BY:DHIVYA.A -->issue :258 -->commentno:110
-- version --> 0.3 startdtae -->06/11/2013 enddate --> 06/11/2013 description --> CARD IS ASSIGNED TO CUSTOMER, EMPLOYEE_DETAILS TABLE RECORD SHLD UPDATE AS NULL IF THAT CARD EXISTS FOR THE EMPLOYEE modified by & changed sp name -->rl -->issue :345 -->commentno: 303
-- version --> 0.2 startdtae -->19/08/2013 enddate --> 20/08/2013 description --> Removed unwanted parameters and Updated the table structure modified created by -->CL -->issue :345
-- version --> 0.1 startdtae -->07/08/2013 enddate --> 09/08/2013 description --> SP for the customer creation form saving part created by -->CL -->issue :345
DROP PROCEDURE IF EXISTS SP_CUSTOMER_CREATION_INSERT;
CREATE PROCEDURE SP_CUSTOMER_CREATION_INSERT(
-- parameter for customer table
IN FIRST_NAME CHAR(30),
IN LAST_NAME CHAR(30),
-- parameter for customer company details table
IN COMPANY_NAME VARCHAR(50),
IN COMPANY_ADDRESS VARCHAR(50),
IN POSTAL_CODE VARCHAR(6),
IN OFFICE_NO VARCHAR(8),
-- parameter for customer entry details table
IN UNIT_NUMBER SMALLINT(4),
IN ROOM_TYPE VARCHAR(30),
IN SD_STIME	TIME,
IN SD_ETIME	TIME,
IN ED_STIME	TIME,
IN ED_ETIME	TIME,
IN LEASE_PERIOD	VARCHAR(30),
IN QUARTERS	DECIMAL(5,2),
IN PROCESSING_WAIVED CHAR(1),
IN PRORATED	CHAR(1),
IN NOTICE_PERIOD TINYINT(1),
IN NOTICE_START_DATE DATE,
-- parameter for customer fee details table
IN RENT DECIMAL(7,2),
IN DEPOSIT DECIMAL(7,2),
IN PROCESSING_FEE DECIMAL(7,2),
IN AIRCON_FIXED_FEE DECIMAL(7,2),
IN AIRCON_QUARTELY_FEE DECIMAL(7,2),
IN ELECTRICITY_CAP DECIMAL(7,2),
IN CHECKOUT_CLEANING_FEE DECIMAL(7,2),
IN DRYCLEAN_FEE DECIMAL(7,2),
-- parameter for customer access card details table
IN ACCESS_CARD TEXT,
IN CARD_VALID_FROM DATE,
IN USERSTAMP VARCHAR(50),
-- parameter for customer termination details table
IN START_DATE DATE,
IN END_DATE DATE,
IN GUEST_CARD TEXT, 
-- parameter for customer personal details table
IN NATIONALITY TEXT,
IN MOBILE VARCHAR(8),
IN INTL_MOBILE VARCHAR(20),
IN EMAIL VARCHAR(40),
IN PASSPORT_NO VARCHAR(15),
IN PASSPORT_DATE DATE,
IN DOB DATE,
IN EP_NO VARCHAR(15),
IN EP_DATE DATE,
IN COMMENTS TEXT,
OUT CUSTOMER_SUCCESSFLAG TEXT)
BEGIN

-- variable declaration
	DECLARE ACTIVECARDCOUNT INTEGER;
	DECLARE ACTIVECARDNO INTEGER;
	DECLARE LOCATION INTEGER;
	DECLARE CUSTOMER_LENGTH INTEGER;
	DECLARE MINID INTEGER;
	DECLARE MAXID INTEGER;
	DECLARE ROOM_TYPE_ID INT;
	DECLARE NATIONALITY_ID INT;
	DECLARE TEMP_ACCESS_CARD TEXT;
	DECLARE ACCESS_CARD_NO INTEGER(7);
	DECLARE CUSTOMER_RECORD_VERSION INT;
	DECLARE ACCESS_POSITION INTEGER;
	DECLARE ACCESS_LOCATION INTEGER;
	DECLARE ACCESS_LENGTH INTEGER;
	DECLARE GUEST_ACCESS_LENGTH INTEGER;
	DECLARE GUEST_FLAG CHAR(1);
	DECLARE USERSTAMP_ID INTEGER(2);
	DECLARE UASDID INTEGER;
	DECLARE ECDID INTEGER;
	DECLARE CREATION_TEMPTBLNAME TEXT;
	DECLARE CUSTOMER_CREATION_TEMPTBLNAME TEXT;
	DECLARE ACTIVEVALUE CHAR(1);
	DECLARE LOSTVALUE CHAR(1);
	DECLARE INVENTORYVALUE CHAR(1);
	DECLARE CUSTOMERID INTEGER;

-- query for rollback command
	DECLARE EXIT HANDLER FOR SQLEXCEPTION
	BEGIN 
	ROLLBACK;
	IF CUSTOMER_CREATION_TEMPTBLNAME IS NOT NULL THEN
		SET @DROP_CUSTOMER_CREATION_TBL=(SELECT CONCAT('DROP TABLE IF EXISTS ',CUSTOMER_CREATION_TEMPTBLNAME));
		PREPARE DROP_CUSTOMER_CREATION_TBL_STMT FROM @DROP_CUSTOMER_CREATION_TBL;
		EXECUTE DROP_CUSTOMER_CREATION_TBL_STMT;
	END IF;
	IF CUSTOMER_SUCCESSFLAG=1 THEN
	SET CUSTOMER_SUCCESSFLAG=0;
	END IF;
	END;

-- set null for non mandatory fields in CUSTOMER_COMPANY_DETAILS table
	IF COMPANY_NAME='' THEN
		SET COMPANY_NAME=NULL;
	END IF;
	
	IF COMPANY_ADDRESS='' THEN
		SET COMPANY_ADDRESS=NULL;
	END IF;
	
	IF POSTAL_CODE='' THEN
		SET POSTAL_CODE=NULL;
	END IF;
	
	IF OFFICE_NO='' THEN
		SET OFFICE_NO=NULL;
	END IF;

-- set null for non mandatory fields in CUSTOMER_ENTRY_DETAILS table
	IF PROCESSING_WAIVED='' THEN
		SET PROCESSING_WAIVED=NULL;
	END IF;

	IF PRORATED='' THEN
		SET PRORATED=NULL;
	END IF;

	IF NOTICE_PERIOD='' THEN
		SET NOTICE_PERIOD=NULL;
	END IF;

-- set null for non mandatory fields in CUSTOMER_ACCESS_CARD_DETAILS table
	IF ACCESS_CARD='' THEN
		SET ACCESS_CARD=NULL;
	END IF;

-- set null for non mandatory fields in CUSTOMER_TERMINATION DETAILS table
	IF GUEST_CARD='' THEN
	SET GUEST_CARD=NULL;
	END IF; 

-- set null for non mandatory fields in CUSTOMER_PERSONAL_DETAILS table
	IF MOBILE='' THEN
		SET MOBILE=NULL;
	END IF;
	
	IF INTL_MOBILE='' THEN
		SET INTL_MOBILE=NULL;
	END IF;
	
	IF PASSPORT_NO='' THEN
		SET PASSPORT_NO=NULL;
	END IF;
	
	IF EP_NO='' THEN
		SET EP_NO=NULL;
	END IF;
	
	IF COMMENTS='' THEN
		SET COMMENTS=NULL;
	END IF;

-- set CED_REC_VER for CUSTOMER_ENTRY_DETAILS
	SET CUSTOMER_RECORD_VERSION=1;

-- get UASD_ID for ROOM_TYPE
	SET ROOM_TYPE_ID = (SELECT UASD_ID FROM UNIT_ACCESS_STAMP_DETAILS WHERE URTD_ID=(SELECT URTD_ID FROM UNIT_ROOM_TYPE_DETAILS WHERE URTD_ROOM_TYPE=ROOM_TYPE) AND UNIT_ID=(SELECT UNIT_ID FROM UNIT WHERE UNIT_NO=UNIT_NUMBER));

-- get NC_ID for NATIONALITY
	SET NATIONALITY_ID = (SELECT NC_ID FROM NATIONALITY_CONFIGURATION WHERE NC_DATA= NATIONALITY);

	START TRANSACTION;

	CALL SP_CHANGE_USERSTAMP_AS_ULDID(USERSTAMP,@ULDID);

	SET USERSTAMP_ID = (SELECT @ULDID);
	
	SET CREATION_TEMPTBLNAME=(SELECT CONCAT('TEMP_CREATION_CARD_NO',SYSDATE()));
	
	--  temp table name
		SET CREATION_TEMPTBLNAME=(SELECT REPLACE(CREATION_TEMPTBLNAME,' ',''));
		SET CREATION_TEMPTBLNAME=(SELECT REPLACE(CREATION_TEMPTBLNAME,'-',''));
		SET CREATION_TEMPTBLNAME=(SELECT REPLACE(CREATION_TEMPTBLNAME,':',''));
		SET CUSTOMER_CREATION_TEMPTBLNAME=(SELECT CONCAT(CREATION_TEMPTBLNAME,'_',USERSTAMP_ID)); 

	SET CUSTOMER_SUCCESSFLAG='';
	
	SET CUSTOMER_LENGTH = 1;
	
	SET ACTIVECARDCOUNT = 0;

	SET @TEMP_CARD_NO = ACCESS_CARD;
	
	IF(ACCESS_CARD IS NOT NULL) THEN
	--  TEMP TABLE NAME END
-- temp table create query for CUSTOMER_CREATION_TEMPTBLNAME
		SET @TEMP_CREATION_CARD_NO=(SELECT CONCAT('CREATE TABLE ',CUSTOMER_CREATION_TEMPTBLNAME,'(ID INTEGER AUTO_INCREMENT,CARDNO INTEGER(7),ACTIVE CHAR(1),LOST CHAR(1),INVENTORY CHAR(1),PRIMARY KEY(ID))'));
		PREPARE TEMP_CREATION_CARD_NO_STMT FROM @TEMP_CREATION_CARD_NO;
		EXECUTE TEMP_CREATION_CARD_NO_STMT;
		MAIN_LOOP : LOOP
		
-- QUERY FOR SET PASSING UNIT NO VALUES IN TEMP VARIABLE
			CALL SP_GET_SPECIAL_CHARACTER_SEPERATED_VALUES(',',@TEMP_CARD_NO,@VALUE,@REMAINING_STRING);
			SELECT @VALUE INTO ACCESS_CARD_NO;
			SELECT @REMAINING_STRING INTO @TEMP_CARD_NO;
			
			SET @ACTIVE_FLAG =(SELECT CONCAT('SELECT UASD_ACCESS_ACTIVE  INTO @ACTIVE_VALUE FROM UNIT_ACCESS_STAMP_DETAILS WHERE UASD_ACCESS_CARD=',ACCESS_CARD_NO));
			PREPARE ACTIVE_FLAG_STMT FROM @ACTIVE_FLAG;
			EXECUTE ACTIVE_FLAG_STMT;
			SET ACTIVEVALUE=@ACTIVE_VALUE;
      
			SET @LOST_FLAG =(SELECT CONCAT('SELECT UASD_ACCESS_LOST INTO @LOST_VALUE FROM UNIT_ACCESS_STAMP_DETAILS WHERE UASD_ACCESS_CARD=',ACCESS_CARD_NO));
			PREPARE LOST_FLAG_STMT FROM @LOST_FLAG;
			EXECUTE LOST_FLAG_STMT;
			SET LOSTVALUE=@LOST_VALUE;
	
			SET @INVENTORY_FLAG =(SELECT CONCAT('SELECT UASD_ACCESS_INVENTORY INTO @INVENTORY_VALUE FROM UNIT_ACCESS_STAMP_DETAILS WHERE UASD_ACCESS_CARD=',ACCESS_CARD_NO));
			PREPARE INVENTORY_FLAG_STMT FROM @INVENTORY_FLAG;
			EXECUTE INVENTORY_FLAG_STMT;
			SET INVENTORYVALUE=@INVENTORY_VALUE;
      			
-- QUERY FOR INSERTING VALUES IN CUSTOMER_CREATION_TEMPTBLNAME
			SET @INSERT_TEMP_CREATION_CARD_NO=(SELECT CONCAT('INSERT INTO ',CUSTOMER_CREATION_TEMPTBLNAME,'(CARDNO,ACTIVE,LOST,INVENTORY)VALUES(',ACCESS_CARD_NO,',@ACTIVE_VALUE,@LOST_VALUE,@INVENTORY_VALUE)'));
			PREPARE INSERT_TEMP_CREATION_CARD_NO_STMT FROM @INSERT_TEMP_CREATION_CARD_NO;
			EXECUTE INSERT_TEMP_CREATION_CARD_NO_STMT;

					
			IF @TEMP_CARD_NO IS NULL THEN
				LEAVE  MAIN_LOOP;
			END IF;
	
		END LOOP;
		
			SET @ACTIVECARD_COUNT = (SELECT CONCAT('SELECT COUNT(*) INTO @ACTIVE_CARD_COUNT FROM ',CUSTOMER_CREATION_TEMPTBLNAME,' WHERE ACTIVE IS NOT NULL OR LOST IS NOT NULL'));
			PREPARE ACTIVECARD_COUNT_STMT FROM @ACTIVECARD_COUNT;
			EXECUTE ACTIVECARD_COUNT_STMT;
			SET ACTIVECARDCOUNT=@ACTIVE_CARD_COUNT;
	END IF;
	
	IF(ACTIVECARDCOUNT!=0) THEN
	
			SET @TEMP_MINID = (SELECT CONCAT('SELECT MIN(ID) INTO @TEMPMINID FROM ',CUSTOMER_CREATION_TEMPTBLNAME));
			PREPARE TEMP_MINID_STMT FROM @TEMP_MINID;
			EXECUTE TEMP_MINID_STMT;
			SET MINID=@TEMPMINID;
			
			
			SET @TEMP_MAXID =(SELECT CONCAT('SELECT MAX(ID) INTO @TEMPMAXID FROM ',CUSTOMER_CREATION_TEMPTBLNAME));
			PREPARE TEMP_MAXID_STMT FROM @TEMP_MAXID;
			EXECUTE TEMP_MAXID_STMT;
			SET MAXID=@TEMPMAXID;
			
			
		WHILE (MINID <= MAXID) DO
		
			SET @ACTIVE_CARDNO = (SELECT CONCAT('SELECT CARDNO INTO @ACTIVE_CARD_NO FROM ',CUSTOMER_CREATION_TEMPTBLNAME,' WHERE ID =',MINID,' AND (ACTIVE IS NOT NULL OR LOST IS NOT NULL)'));
			PREPARE ACTIVE_CARD_NO_STMT FROM @ACTIVE_CARDNO;
			EXECUTE ACTIVE_CARD_NO_STMT;
			SET ACTIVECARDNO=@ACTIVE_CARD_NO;
			IF (ACTIVECARDNO IS NOT NULL)THEN
		
				SET CUSTOMER_SUCCESSFLAG = (SELECT CONCAT(CUSTOMER_SUCCESSFLAG,',',ACTIVECARDNO));
			
			END IF;
		
			SET MINID = MINID+1;
			
		END WHILE;
		
		SET LOCATION=(SELECT LOCATE(',', CUSTOMER_SUCCESSFLAG,CUSTOMER_LENGTH));
		
		SET CUSTOMER_SUCCESSFLAG=(SELECT SUBSTRING(CUSTOMER_SUCCESSFLAG,LOCATION+1));
			
		SET CUSTOMER_SUCCESSFLAG = (SELECT CONCAT(CUSTOMER_SUCCESSFLAG, ' - ACTIVE CARD(S)SHLD NOT BE ASSIGNED'));

	END IF;
	
	IF(ACTIVECARDCOUNT = 0 OR ACCESS_CARD IS NULL)THEN

-- insert query for CUSTOMER 
		IF FIRST_NAME IS NOT NULL AND LAST_NAME IS NOT NULL THEN
		
			INSERT INTO CUSTOMER (CUSTOMER_FIRST_NAME,CUSTOMER_LAST_NAME) VALUES (FIRST_NAME,LAST_NAME);
		
			SET CUSTOMER_SUCCESSFLAG=1;
		
		END IF;
		SET CUSTOMERID=(SELECT CUSTOMER_ID FROM CUSTOMER ORDER BY CUSTOMER_ID DESC LIMIT 1);


-- insert query for CUSTOMER_COMPANY_DETAILS
		IF COMPANY_NAME IS NOT NULL OR COMPANY_ADDRESS IS NOT NULL OR POSTAL_CODE IS NOT NULL OR OFFICE_NO IS NOT NULL THEN
			IF NOT EXISTS(SELECT CUSTOMER_ID FROM CUSTOMER_COMPANY_DETAILS WHERE CUSTOMER_ID=CUSTOMERID)THEN

			INSERT INTO CUSTOMER_COMPANY_DETAILS (CUSTOMER_ID,CCD_COMPANY_NAME,CCD_COMPANY_ADDR,CCD_POSTAL_CODE,CCD_OFFICE_NO) VALUES (CUSTOMERID,COMPANY_NAME,COMPANY_ADDRESS,POSTAL_CODE,OFFICE_NO);
			SET CUSTOMER_SUCCESSFLAG=1;
			END IF;
	
		END IF;

-- insert query for CUSTOMER_ENTRY_DETAILS
		IF UNIT_NUMBER IS NOT NULL AND ROOM_TYPE IS NOT NULL AND SD_STIME IS NOT NULL AND SD_ETIME IS NOT NULL AND ED_STIME IS NOT NULL AND ED_ETIME IS NOT NULL AND LEASE_PERIOD IS NOT NULL AND QUARTERS IS NOT NULL THEN
			IF NOT EXISTS(SELECT CUSTOMER_ID FROM CUSTOMER_ENTRY_DETAILS WHERE CUSTOMER_ID=CUSTOMERID)THEN

			INSERT INTO CUSTOMER_ENTRY_DETAILS (CUSTOMER_ID,UNIT_ID,UASD_ID,CED_REC_VER,CED_SD_STIME,CED_SD_ETIME,CED_ED_STIME,CED_ED_ETIME,CED_LEASE_PERIOD,CED_QUARTERS,CED_PROCESSING_WAIVED, CED_PRORATED,CED_NOTICE_PERIOD,CED_NOTICE_START_DATE) VALUES (CUSTOMERID,
			(SELECT UNIT_ID FROM UNIT WHERE UNIT_NO=UNIT_NUMBER),ROOM_TYPE_ID,CUSTOMER_RECORD_VERSION,(SELECT CTP_ID FROM CUSTOMER_TIME_PROFILE WHERE CTP_DATA=SD_STIME),(SELECT CTP_ID FROM CUSTOMER_TIME_PROFILE WHERE CTP_DATA=SD_ETIME),(SELECT CTP_ID FROM CUSTOMER_TIME_PROFILE WHERE CTP_DATA=ED_STIME),(SELECT CTP_ID FROM CUSTOMER_TIME_PROFILE WHERE CTP_DATA=ED_ETIME),LEASE_PERIOD,QUARTERS,PROCESSING_WAIVED,PRORATED,NOTICE_PERIOD,NOTICE_START_DATE);
		
			SET CUSTOMER_SUCCESSFLAG=1;
			END IF;
	
		END IF;

-- insert query for CUSTOMER_PERSONAL_DETAILS
		IF NATIONALITY IS NOT NULL AND EMAIL IS NOT NULL THEN
			IF NOT EXISTS(SELECT CUSTOMER_ID FROM CUSTOMER_PERSONAL_DETAILS WHERE CUSTOMER_ID=CUSTOMERID)THEN 

			
			INSERT INTO CUSTOMER_PERSONAL_DETAILS (CUSTOMER_ID,NC_ID,CPD_MOBILE,CPD_INTL_MOBILE,CPD_EMAIL,
			CPD_PASSPORT_NO,CPD_PASSPORT_DATE,CPD_DOB,CPD_EP_NO,CPD_EP_DATE,CPD_COMMENTS) VALUES (CUSTOMERID,NATIONALITY_ID,MOBILE,INTL_MOBILE,EMAIL,PASSPORT_NO,PASSPORT_DATE,DOB,EP_NO,EP_DATE,COMMENTS);
		
			SET CUSTOMER_SUCCESSFLAG=1;
			END IF;
	
		END IF;
IF NOT EXISTS(SELECT CUSTOMER_ID FROM CUSTOMER_ACCESS_CARD_DETAILS WHERE CUSTOMER_ID=CUSTOMERID)THEN 

-- insert query for CUSTOMER_ACCESS_CARD_DETAILS
		IF ACCESS_CARD IS NOT NULL AND CARD_VALID_FROM IS NOT NULL THEN
			
			SET TEMP_ACCESS_CARD = ACCESS_CARD;
			SET ACCESS_LENGTH=1;
			
			loop_label:  LOOP
			
				SET ACCESS_POSITION=(SELECT LOCATE(',', TEMP_ACCESS_CARD,ACCESS_LENGTH));
				
				IF ACCESS_POSITION<=0 THEN
					
					SET ACCESS_CARD_NO=TEMP_ACCESS_CARD;
				
				ELSE
					
					SELECT SUBSTRING(TEMP_ACCESS_CARD,ACCESS_LENGTH,ACCESS_POSITION-1) INTO ACCESS_CARD_NO;
					SET TEMP_ACCESS_CARD=(SELECT SUBSTRING(TEMP_ACCESS_CARD,ACCESS_POSITION+1));
				
				END IF;
			
				SET ACCESS_LOCATION=(SELECT LOCATE(ACCESS_CARD_NO, GUEST_CARD));
				SET GUEST_ACCESS_LENGTH=(SELECT LENGTH(ACCESS_CARD_NO));
				SET GUEST_FLAG=(SELECT SUBSTRING(GUEST_CARD,ACCESS_LOCATION+GUEST_ACCESS_LENGTH+1,1));
				SET GUEST_FLAG=TRIM(GUEST_FLAG);
				
				IF GUEST_FLAG='' THEN
					SET GUEST_FLAG=NULL;
				END IF;
	
				SET UASDID = (SELECT UASD_ID FROM EMPLOYEE_CARD_DETAILS WHERE UASD_ID=(SELECT UASD_ID FROM UNIT_ACCESS_STAMP_DETAILS WHERE UASD_ACCESS_CARD=ACCESS_CARD_NO));
				
				IF(UASDID IS NOT NULL) THEN
					
					SET ECDID = (SELECT ECD_ID FROM EMPLOYEE_CARD_DETAILS WHERE UASD_ID = UASDID);
					
					CALL SP_SINGLE_TABLE_ROW_DELETION(40,ECDID,USERSTAMP,@FLAG);
					
					SET CUSTOMER_SUCCESSFLAG=1;
				
				END IF;
		
				INSERT INTO CUSTOMER_ACCESS_CARD_DETAILS (CUSTOMER_ID,UASD_ID,CACD_VALID_FROM,CACD_GUEST_CARD,ULD_ID) VALUES(CUSTOMERID,(SELECT UASD_ID FROM UNIT_ACCESS_STAMP_DETAILS WHERE UASD_ACCESS_CARD=ACCESS_CARD_NO AND UNIT_ID=(SELECT UNIT_ID FROM UNIT WHERE UNIT_NO=UNIT_NUMBER)),CARD_VALID_FROM,GUEST_FLAG,USERSTAMP_ID);
				SET CUSTOMER_SUCCESSFLAG=1;
				
				UPDATE UNIT_ACCESS_STAMP_DETAILS SET UASD_ACCESS_ACTIVE='X',UASD_ACCESS_INVENTORY=NULL WHERE UASD_ACCESS_CARD=ACCESS_CARD_NO AND UNIT_ID=(SELECT UNIT_ID FROM UNIT WHERE UNIT_NO=UNIT_NUMBER);
				
				SET CUSTOMER_SUCCESSFLAG=1;
				
				IF ACCESS_POSITION<=0 THEN
					LEAVE  loop_label;
				END IF;
			
			END LOOP;
	
		END IF;
	END IF;
IF NOT EXISTS(SELECT CUSTOMER_ID FROM CUSTOMER_LP_DETAILS WHERE CUSTOMER_ID=CUSTOMERID)THEN

-- insert query for CUSTOMER_LP_DETAILS
		IF START_DATE IS NOT NULL AND END_DATE IS NOT NULL THEN
	
			IF ACCESS_CARD IS NOT NULL THEN
		
				SET TEMP_ACCESS_CARD = ACCESS_CARD;
				SET ACCESS_LENGTH=1;
				
				loop_label:  LOOP
		
					SET ACCESS_POSITION=(SELECT LOCATE(',', TEMP_ACCESS_CARD,ACCESS_LENGTH));
	
					IF ACCESS_POSITION<=0 THEN
		
						SET ACCESS_CARD_NO=TEMP_ACCESS_CARD;
	
					ELSE
		
						SELECT SUBSTRING(TEMP_ACCESS_CARD,ACCESS_LENGTH,ACCESS_POSITION-1) INTO ACCESS_CARD_NO;
						SET TEMP_ACCESS_CARD=(SELECT SUBSTRING(TEMP_ACCESS_CARD,ACCESS_POSITION+1));
					
					END IF;
		
					SET ACCESS_LOCATION=(SELECT LOCATE(ACCESS_CARD_NO, GUEST_CARD));
					SET GUEST_ACCESS_LENGTH=(SELECT LENGTH(ACCESS_CARD_NO));
					SET GUEST_FLAG=(SELECT SUBSTRING(GUEST_CARD,ACCESS_LOCATION+GUEST_ACCESS_LENGTH+1,1));
					SET GUEST_FLAG=TRIM(GUEST_FLAG);
	
					IF GUEST_FLAG='' THEN
						SET GUEST_FLAG=NULL;
					END IF;
	
					SET UASDID = (SELECT UASD_ID FROM EMPLOYEE_CARD_DETAILS WHERE UASD_ID=(SELECT UASD_ID FROM UNIT_ACCESS_STAMP_DETAILS WHERE UASD_ACCESS_CARD=ACCESS_CARD_NO));
				
				IF(UASDID IS NOT NULL) THEN
					
					SET ECDID = (SELECT ECD_ID FROM EMPLOYEE_CARD_DETAILS WHERE UASD_ID = UASDID);
					
					CALL SP_SINGLE_TABLE_ROW_DELETION(40,ECDID,USERSTAMP,@FLAG);
					
					SET CUSTOMER_SUCCESSFLAG=1;
				
				END IF;
		
					INSERT INTO CUSTOMER_LP_DETAILS (CUSTOMER_ID,CED_REC_VER,UASD_ID,CLP_STARTDATE,CLP_ENDDATE,CLP_GUEST_CARD,ULD_ID)
					VALUES (CUSTOMERID,CUSTOMER_RECORD_VERSION,(SELECT UASD_ID FROM UNIT_ACCESS_STAMP_DETAILS WHERE UASD_ACCESS_CARD=ACCESS_CARD_NO AND UNIT_ID=(SELECT UNIT_ID FROM UNIT WHERE UNIT_NO=UNIT_NUMBER)),START_DATE,END_DATE,GUEST_FLAG,USERSTAMP_ID);
					SET CUSTOMER_SUCCESSFLAG=1;
      
					IF ACCESS_POSITION<=0 THEN
						LEAVE  loop_label;
					END IF;
	
				END LOOP;
	
			ELSE
		
				INSERT INTO CUSTOMER_LP_DETAILS (CUSTOMER_ID,CED_REC_VER,UASD_ID,CLP_STARTDATE,CLP_ENDDATE,CLP_GUEST_CARD,ULD_ID)
				VALUES (CUSTOMERID,CUSTOMER_RECORD_VERSION,ACCESS_CARD,START_DATE,END_DATE,GUEST_FLAG,USERSTAMP_ID);
				SET CUSTOMER_SUCCESSFLAG=1;
			
			END IF;
		
		END IF;
	END IF;
IF NOT EXISTS(SELECT CUSTOMER_ID FROM CUSTOMER_FEE_DETAILS  WHERE CUSTOMER_ID=CUSTOMERID)THEN 

-- insert query for CUSTOMER_FEE_DETAILS
		IF RENT IS NOT NULL THEN
			
			INSERT INTO CUSTOMER_FEE_DETAILS (CUSTOMER_ID,CED_REC_VER,CPP_ID,CFD_AMOUNT) VALUES (CUSTOMERID,CUSTOMER_RECORD_VERSION,1,RENT);
			SET CUSTOMER_SUCCESSFLAG=1;
		
		END IF;
	
		IF DEPOSIT IS NOT NULL THEN
		
			INSERT INTO CUSTOMER_FEE_DETAILS (CUSTOMER_ID,CED_REC_VER,CPP_ID,CFD_AMOUNT) VALUES (CUSTOMERID,CUSTOMER_RECORD_VERSION,2,DEPOSIT);
			SET CUSTOMER_SUCCESSFLAG=1;
		
		END IF;
		
		IF PROCESSING_FEE IS NOT NULL THEN
			
			INSERT INTO CUSTOMER_FEE_DETAILS (CUSTOMER_ID,CED_REC_VER,CPP_ID,CFD_AMOUNT) VALUES (CUSTOMERID,CUSTOMER_RECORD_VERSION,3,PROCESSING_FEE);
			SET CUSTOMER_SUCCESSFLAG=1;
	
		END IF;
	
		IF AIRCON_FIXED_FEE IS NOT NULL THEN
		
			INSERT INTO CUSTOMER_FEE_DETAILS (CUSTOMER_ID,CED_REC_VER,CPP_ID,CFD_AMOUNT) VALUES (CUSTOMERID,CUSTOMER_RECORD_VERSION,4,AIRCON_FIXED_FEE);
			SET CUSTOMER_SUCCESSFLAG=1;
		
		END IF;
	
		IF ELECTRICITY_CAP IS NOT NULL THEN
		
			INSERT INTO CUSTOMER_FEE_DETAILS (CUSTOMER_ID,CED_REC_VER,CPP_ID,CFD_AMOUNT) VALUES (CUSTOMERID,CUSTOMER_RECORD_VERSION,5,ELECTRICITY_CAP);
			SET CUSTOMER_SUCCESSFLAG=1;
		
		END IF;
	
		IF DRYCLEAN_FEE IS NOT NULL THEN
			
			INSERT INTO CUSTOMER_FEE_DETAILS (CUSTOMER_ID,CED_REC_VER,CPP_ID,CFD_AMOUNT) VALUES (CUSTOMERID,CUSTOMER_RECORD_VERSION,6,DRYCLEAN_FEE);
			SET CUSTOMER_SUCCESSFLAG=1;
	
		END IF;
		
		IF AIRCON_QUARTELY_FEE IS NOT NULL THEN
		
			INSERT INTO CUSTOMER_FEE_DETAILS (CUSTOMER_ID,CED_REC_VER,CPP_ID,CFD_AMOUNT) VALUES ((SELECT CUSTOMER_ID FROM CUSTOMER ORDER BY CUSTOMER_ID DESC LIMIT 1),CUSTOMER_RECORD_VERSION,7,AIRCON_QUARTELY_FEE);
			SET CUSTOMER_SUCCESSFLAG=1;
	
		END IF;
		
		IF CHECKOUT_CLEANING_FEE IS NOT NULL THEN
		
			INSERT INTO CUSTOMER_FEE_DETAILS (CUSTOMER_ID,CED_REC_VER,CPP_ID,CFD_AMOUNT) VALUES ((SELECT CUSTOMER_ID FROM CUSTOMER ORDER BY CUSTOMER_ID DESC LIMIT 1),CUSTOMER_RECORD_VERSION,8,CHECKOUT_CLEANING_FEE);
			SET CUSTOMER_SUCCESSFLAG=1;
	
		END IF;
		
	END IF;
END IF;
	
	IF (ACCESS_CARD IS NOT NULL)THEN
	
		SET @DROP_TEMP_TABLE=(SELECT CONCAT('DROP TABLE IF EXISTS ',CUSTOMER_CREATION_TEMPTBLNAME));
    PREPARE DROP_TEMP_TABLE_STMT FROM @DROP_TEMP_TABLE;
    EXECUTE DROP_TEMP_TABLE_STMT;
		
	END IF;
	
COMMIT;
END;