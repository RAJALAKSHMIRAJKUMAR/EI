-- version --> 0.8 startdate -->29/04/2014 enddate --> 30/04/2014 description --> CONVERT TEMP TABLE INTO DYNAMIC TEMP TABLE -->SARADAMBAL--->issue :817
-- version --> 0.7 startdate -->17/04/2014 enddate --> 17/04/2014 description --> CHANGED TABLE NAME OF CUSTOMER_TERMINATION_DETAILS INTO CUSTOMER_LP_DETAILS AND ALAIS -->SARADAMBAL--->issue :797
-- version --> 0.6 startdate -->02/12/2013 enddate --> 02/12/2013 description --> ADDED THE PROCESSING WAVED CHECKING FOR THE PROCESSING FEE ASSIGNED TO THE CUSTOMER created by -->CL -->issue :493
-- version --> 0.5 startdate -->28/11/2013 enddate --> 28/11/2013 description --> SEPARATE TOTAL CALCULATION ADDED AND PAYMENT UNPAID DATA FORMAT CHANGED created by -->CL -->issue :663
-- version --> 0.4 startdate -->26/11/2013 enddate --> 27/11/2013 description --> USED DDRECVER INSTEAD OF PDPRECVER HEADER IN TEMP TABLE,ADDED DDCHARGES,FIXED NULL IN THE SUBTOTAL AND REFUND AMOUNTS,ADDED RECVER IN ELECTRICITY EXCESS,UNIT EXPENSE,CHANGED THE DATE FORMAT FOR ELECTRICITY EXCESS,HEADER ADDED FOR ELECTRICITY CAP AND IMPLEMENTED THE CAP FROM THE CUSTOMER. created by -->CL -->issue :656
-- version --> 0.3 startdate -->15/11/2013 enddate --> 15/11/2013 description --> CHANGED THE DEPOSIT AMOUNT RETRIVING FROM PAYMENT DETAILS TABLE INSTEAD OF FROM CUSTOMER FEE DETAILS TABLE created by -->CL -->issue :656
-- version --> 0.2 startdate -->09/11/2013 enddate --> 10/11/2013 description --> CHANGED THE PAYMENT PROFILE ID TO CUSTOMER PAYMENT PROFILE ID FOR THE FOREIGN KEY created by -->CL -->issue :493
-- version --> 0.1 startdate -->21/10/2013 enddate --> 08/11/2013 description --> SP for the payment, deposit and processing fee calculation part created by -->CL -->issue :493
DROP PROCEDURE IF EXISTS SP_DD_PDP_CALCULATION;
CREATE PROCEDURE SP_DD_PDP_CALCULATION(
	IN DD_CUSTOMER_ID INTEGER,
	IN DD_REC_VER INTEGER,
	IN TEMP_DD_CALCULATION TEXT)
BEGIN
DECLARE CTDSD DATE;
DECLARE CTDED DATE;
DECLARE CTDPTD DATE;
DECLARE SD_DAY INTEGER;
DECLARE SD_MONTH INTEGER;
DECLARE SD_YEAR INTEGER;
DECLARE ED_DAY INTEGER;
DECLARE ED_MONTH INTEGER;
DECLARE ED_YEAR INTEGER;
DECLARE TEMP_DATE TEXT;
DECLARE FOR_DATE DATE;
DECLARE DEPO_AMOUNT DECIMAL(7,2);
DECLARE DONE INT DEFAULT FALSE;
-- query for rollback command
DECLARE EXIT HANDLER FOR SQLEXCEPTION
BEGIN 
	ROLLBACK; 
END;
START TRANSACTION;
SET CTDSD=(SELECT CLP.CLP_STARTDATE FROM CUSTOMER_LP_DETAILS AS CLP WHERE CLP.CUSTOMER_ID=DD_CUSTOMER_ID AND CLP_GUEST_CARD IS NULL AND CLP.CED_REC_VER=DD_REC_VER);
SET CTDED=(SELECT CLP.CLP_ENDDATE FROM CUSTOMER_LP_DETAILS AS CLP WHERE CLP.CUSTOMER_ID=DD_CUSTOMER_ID AND CLP_GUEST_CARD IS NULL AND CLP.CED_REC_VER=DD_REC_VER);
SET CTDPTD=(SELECT CLP.CLP_PRETERMINATE_DATE FROM CUSTOMER_LP_DETAILS AS CLP WHERE CLP.CUSTOMER_ID=DD_CUSTOMER_ID AND CLP_GUEST_CARD IS NULL AND CLP.CED_REC_VER=DD_REC_VER);
IF CTDPTD IS NOT NULL THEN
	SET CTDED=CTDPTD;
END IF;
-- PAYMENT
SET SD_DAY = 1;
SET SD_MONTH = (SELECT MONTH(CTDSD));
SET SD_YEAR = (SELECT YEAR(CTDSD));
SET ED_DAY = (SELECT DAY(CTDED));
SET ED_MONTH = (SELECT MONTH(CTDED));
SET ED_YEAR = (SELECT YEAR(CTDED));
RENTLOOP : WHILE (SD_YEAR<=ED_YEAR) DO
	SET TEMP_DATE= CONCAT(SD_DAY,',',SD_MONTH,',',SD_YEAR);
	SET FOR_DATE = (SELECT STR_TO_DATE(TEMP_DATE,'%d,%m,%Y'));
	IF EXISTS(SELECT CFD.CFD_AMOUNT FROM CUSTOMER_FEE_DETAILS CFD WHERE CFD.CUSTOMER_ID=DD_CUSTOMER_ID AND CFD.CED_REC_VER=DD_REC_VER AND CFD.CPP_ID=1) THEN
		IF NOT EXISTS(SELECT PD.PD_AMOUNT FROM PAYMENT_DETAILS PD WHERE PD.CUSTOMER_ID=DD_CUSTOMER_ID AND PD.CED_REC_VER=DD_REC_VER AND PD.PD_FOR_PERIOD=FOR_DATE AND PD.PP_ID=1) THEN
			--    INSERT QUERY FOR DYNAMIC TEMP TABLE
					  SET @DD_CALC_INSERT_DEPOSITPAYMENT=(SELECT CONCAT('INSERT INTO ',TEMP_DD_CALCULATION,'(DDCPPID,DDRECVER,DDPAYMENTUNPAIDDATE) VALUES(1,',DD_REC_VER,',(SELECT DATE_FORMAT(','"',FOR_DATE,'"',',"%b - %Y")))'));
                      PREPARE DD_CALC_INSERT_DEPOSITPAYMENT_STMT FROM @DD_CALC_INSERT_DEPOSITPAYMENT;
                      EXECUTE DD_CALC_INSERT_DEPOSITPAYMENT_STMT;			
		END IF;
	END IF;
	IF SD_YEAR=ED_YEAR AND SD_MONTH=ED_MONTH THEN
		LEAVE RENTLOOP;
	END IF;
	IF SD_MONTH=12 THEN
		SET SD_MONTH=1;
		SET SD_YEAR=SD_YEAR+1;
	ELSE
		SET SD_DAY=1;
		SET SD_MONTH=SD_MONTH+1;
	END IF;
END WHILE;
-- DEPOSIT
SET SD_DAY = 1;
SET SD_MONTH = (SELECT MONTH(CTDSD));
SET SD_YEAR = (SELECT YEAR(CTDSD));
SET TEMP_DATE= CONCAT(SD_DAY,',',SD_MONTH,',',SD_YEAR);
SET FOR_DATE = (SELECT STR_TO_DATE(TEMP_DATE,'%d,%m,%Y'));
IF EXISTS(SELECT CFD.CFD_AMOUNT FROM CUSTOMER_FEE_DETAILS CFD WHERE CFD.CUSTOMER_ID=DD_CUSTOMER_ID AND CFD.CED_REC_VER=DD_REC_VER AND CFD.CPP_ID=2) THEN
	SET DEPO_AMOUNT = (SELECT PD.PD_AMOUNT FROM PAYMENT_DETAILS PD WHERE PD.CUSTOMER_ID=DD_CUSTOMER_ID AND PD.CED_REC_VER=DD_REC_VER AND PD.PD_FOR_PERIOD=FOR_DATE AND PD.PP_ID=2);
	IF NOT EXISTS(SELECT PD.PD_AMOUNT FROM PAYMENT_DETAILS PD WHERE PD.CUSTOMER_ID=DD_CUSTOMER_ID AND PD.CED_REC_VER=DD_REC_VER AND PD.PD_FOR_PERIOD=FOR_DATE AND PD.PP_ID=2) THEN
		--    INSERT QUERY FOR DYNAMIC TEMP TABLE
			SET @DD_CALC_INSERT_DEPOSITPAID=(SELECT CONCAT('INSERT INTO ',TEMP_DD_CALCULATION ,'(DDCPPID,DDRECVER,DDDEPOAMOUNT,DDDEPOUNPAID) VALUES(2,',DD_REC_VER,',0,"UNPAID")'));
			PREPARE DD_CALC_INSERT_DEPOSITPAID_STMT FROM @DD_CALC_INSERT_DEPOSITPAID;
			EXECUTE DD_CALC_INSERT_DEPOSITPAID_STMT;
	ELSE
	--    INSERT QUERY FOR DYNAMIC TEMP TABLE
			SET @DD_CALC_INSERT_DEPOSITPAID=(SELECT CONCAT('INSERT INTO ',TEMP_DD_CALCULATION ,'(DDCPPID,DDRECVER,DDDEPOAMOUNT,DDDEPOUNPAID) VALUES(2,',DD_REC_VER,',',DEPO_AMOUNT,',NULL)'));
			PREPARE DD_CALC_INSERT_DEPOSITPAID_STMT FROM @DD_CALC_INSERT_DEPOSITPAID;
			EXECUTE DD_CALC_INSERT_DEPOSITPAID_STMT;
	END IF;
ELSE
--    INSERT QUERY FOR DYNAMIC TEMP TABLE
			SET @DD_CALC_INSERT_DEPOSITPAID=(SELECT CONCAT('INSERT INTO ',TEMP_DD_CALCULATION ,'(DDCPPID,DDRECVER,DDDEPOAMOUNT,DDDEPOUNPAID) VALUES(2,',DD_REC_VER,',0,NULL)'));
			PREPARE DD_CALC_INSERT_DEPOSITPAID_STMT FROM @DD_CALC_INSERT_DEPOSITPAID;
			EXECUTE DD_CALC_INSERT_DEPOSITPAID_STMT;
END IF;
-- PROCESSING
IF EXISTS(SELECT CFD.CFD_AMOUNT FROM CUSTOMER_FEE_DETAILS CFD WHERE CFD.CUSTOMER_ID=DD_CUSTOMER_ID AND CFD.CED_REC_VER=DD_REC_VER AND CFD.CPP_ID=3) THEN
	IF (SELECT CED.CED_PROCESSING_WAIVED FROM CUSTOMER_ENTRY_DETAILS CED WHERE CED.CUSTOMER_ID=DD_CUSTOMER_ID AND CED.CED_REC_VER=DD_REC_VER) IS NULL THEN
		IF NOT EXISTS(SELECT PD.PD_AMOUNT FROM PAYMENT_DETAILS PD WHERE PD.CUSTOMER_ID=DD_CUSTOMER_ID AND PD.CED_REC_VER=DD_REC_VER AND PD.PD_FOR_PERIOD=FOR_DATE AND PD.PP_ID=3) THEN
			--    INSERT QUERY FOR DYNAMIC TEMP TABLE
			SET @DD_CALC_INSERT_PROCESSINGPAID=(SELECT CONCAT('INSERT INTO ',TEMP_DD_CALCULATION ,'(DDCPPID,DDRECVER,DDPROCUNPAID) VALUES(3,',DD_REC_VER,',"UNPAID")'));
			PREPARE DD_CALC_INSERT_PROCESSINGPAID_STMT FROM @DD_CALC_INSERT_PROCESSINGPAID;
			EXECUTE DD_CALC_INSERT_PROCESSINGPAID_STMT;
		ELSE		
		    --    INSERT QUERY FOR DYNAMIC TEMP TABLE
			SET @DD_CALC_INSERT_PROCESSINGPAID=(SELECT CONCAT('INSERT INTO ',TEMP_DD_CALCULATION ,'(DDCPPID,DDRECVER,DDPROCUNPAID) VALUES(3,',DD_REC_VER,',NULL)'));
			PREPARE DD_CALC_INSERT_PROCESSINGPAID_STMT FROM @DD_CALC_INSERT_PROCESSINGPAID;
			EXECUTE DD_CALC_INSERT_PROCESSINGPAID_STMT;
		END IF;
	END IF;
END IF;
COMMIT;
END;