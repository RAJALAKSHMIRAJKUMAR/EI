DROP PROCEDURE IF EXISTS SP_TEMP_BANK_TRANSFER;
CREATE PROCEDURE SP_TEMP_BANK_TRANSFER(IN SOURCESCHEMA VARCHAR(50),IN DESTINATIONSCHEMA VARCHAR(50),IN MIGUSERSTAMP VARCHAR(50))
BEGIN
 DECLARE  DONE INT DEFAULT FALSE;
 DECLARE BTID INTEGER;
 DECLARE USERSTAMP VARCHAR(50);
 DECLARE BTCTID INTEGER;
 DECLARE BTCBID INTEGER;
 DECLARE BTSID INTEGER;
 DECLARE BTTID TEXT;
 DECLARE BTDATE DATE;
 DECLARE BTAMOUNT DECIMAL(7,2);
 DECLARE BTACCNAME VARCHAR(40);
 DECLARE BTACCNO VARCHAR(25);
 DECLARE BTBANKCODE VARCHAR(4);
 DECLARE BTBRANCHCODE VARCHAR(3);
 DECLARE BTBANKADDRESS TEXT;
 DECLARE BTSWIFTCODE VARCHAR(12);
 DECLARE BTCUSTREF VARCHAR(200);
 DECLARE BTINVDETAILS LONGTEXT;
 DECLARE BTDEBITEDON DATE;
 DECLARE BTCOMMENTS LONGTEXT;
 DECLARE BTTIMESTAMP VARCHAR(50);
 DECLARE FILTER_CURSOR CURSOR FOR 
SELECT BT_SNO,BT_USER_STAMP, BTCT_ID, BTCB_ID, BTS_ID, BT_TRANSACTION_TYPE, BT_DATE, BT_AMOUNT, BT_ACC_NAME, BT_ACC_NO, BT_BANK_CODE,
BT_BRANCH_CODE, BT_BANK_ADDRESS, BT_SWIFT_CODE, BT_CUST_REF, BT_INV_DETAILS, BT_DEBITED_ON, BT_COMMENTS,BT_TIME_STAMP FROM VW_TEMP_BANK_TRANSFER;
DECLARE CONTINUE HANDLER FOR NOT FOUND SET DONE = TRUE;
DECLARE EXIT HANDLER FOR SQLEXCEPTION
BEGIN 
ROLLBACK;
END;
START TRANSACTION;
SET @VW_TEMP_BANK_TRANSFER=(SELECT CONCAT('CREATE OR REPLACE VIEW VW_TEMP_BANK_TRANSFER AS SELECT BT_SNO,BT_USER_STAMP, BTCT_ID, BTCB_ID, BTS_ID, BT_TRANSACTION_TYPE, BT_DATE, BT_AMOUNT, BT_ACC_NAME, BT_ACC_NO, BT_BANK_CODE,BT_BRANCH_CODE, BT_BANK_ADDRESS, BT_SWIFT_CODE, BT_CUST_REF, BT_INV_DETAILS, BT_DEBITED_ON, BT_COMMENTS,BT_TIME_STAMP FROM ',DESTINATIONSCHEMA,'.TEMP_MIG_BANK_TRANSFER'));
PREPARE BANK_TRANSFER_STMT FROM @VW_TEMP_BANK_TRANSFER;
EXECUTE BANK_TRANSFER_STMT;
SET @LOGIN_ID=(SELECT CONCAT('SELECT ULD_ID INTO @ULDID FROM ',DESTINATIONSCHEMA,'.USER_LOGIN_DETAILS WHERE ULD_LOGINID=','"',MIGUSERSTAMP,'"'));
PREPARE LOGINID FROM @LOGIN_ID;
EXECUTE LOGINID;
OPEN FILTER_CURSOR;
read_loop: LOOP
FETCH FILTER_CURSOR INTO BTID,USERSTAMP,BTCTID,BTCBID,BTSID,BTTID,BTDATE,BTAMOUNT,BTACCNAME,BTACCNO,BTBANKCODE,
BTBRANCHCODE,BTBANKADDRESS,BTSWIFTCODE,BTCUSTREF,BTINVDETAILS,BTDEBITEDON,BTCOMMENTS,BTTIMESTAMP;
IF DONE THEN
      LEAVE read_loop;
END IF;
 SET @BT_ID =BTID;
 SET @BTCT_ID=BTCTID;
 SET @BTCB_ID=BTCBID; 
 SET @BTS_ID=BTSID;
 SET @BTT_ID=BTTID;
 SET @BT_DATE=BTDATE;
 SET @BT_AMOUNT=BTAMOUNT;
 SET @BT_ACCNAME=BTACCNAME;
 SET @BT_ACCNO=BTACCNO;
 SET @BT_BANKCODE=BTBANKCODE;
 SET @BT_BRANCHCODE=BTBRANCHCODE;
 SET @BT_BANKADDRESS=BTBANKADDRESS;
 SET @BT_SWIFTCODE=BTSWIFTCODE;
 SET @BT_CUSTREF=BTCUSTREF;
 SET @BT_INVDETAILS=BTINVDETAILS;
 SET @BT_DEBITEDON=BTDEBITEDON;
 SET @BT_COMMENTS=BTCOMMENTS;
 SET @BTTIME_STAMP=BTTIMESTAMP;
 SET @USER_STAMP=USERSTAMP;
	IF (BTTID='GIRO' OR BTTID='TT') THEN
		SET FOREIGN_KEY_CHECKS=0;
		SET @INSERT_TEMP_BANK_TRANSFER=( SELECT CONCAT('INSERT INTO ',DESTINATIONSCHEMA,'.TEMP_BANK_TRANSFER(BT_ID,ULD_ID, BTCT_ID, BTCB_ID, BTS_ID, BTT_ID, BT_DATE, BT_AMOUNT, BT_ACC_NAME, BT_ACC_NO, BT_BANK_CODE, BT_BRANCH_CODE,BT_BANK_ADDRESS, BT_SWIFT_CODE, BT_CUST_REF, BT_INV_DETAILS, BT_DEBITED_ON, BT_COMMENTS,BT_TIMESTAMP) VALUES (@BT_ID,(SELECT ULD_ID FROM ',DESTINATIONSCHEMA,'.USER_LOGIN_DETAILS WHERE ULD_LOGINID=@USER_STAMP),@BTCT_ID,@BTCB_ID,@BTS_ID,(SELECT BTT_ID FROM ',SOURCESCHEMA,'.MIG_BANK_TRANSFER_TYPE WHERE BTT_DATA= @BTT_ID),@BT_DATE,@BT_AMOUNT,@BT_ACCNAME,@BT_ACCNO,@BT_BANKCODE,@BT_BRANCHCODE,@BT_BANKADDRESS,@BT_SWIFTCODE,@BT_CUSTREF,@BT_INVDETAILS,@BT_DEBITEDON,@BT_COMMENTS,@BTTIME_STAMP)'));
		PREPARE INSERTTEMPBANKTRANSFER FROM @INSERT_TEMP_BANK_TRANSFER; 
		EXECUTE INSERTTEMPBANKTRANSFER;
	ELSE
	    SET FOREIGN_KEY_CHECKS=0;
		SET @INSERT_TEMP_BANK_TRANSFER=( SELECT CONCAT('INSERT INTO ',DESTINATIONSCHEMA,'.TEMP_BANK_TRANSFER(BT_ID,ULD_ID, BTCT_ID, BTCB_ID, BTS_ID, BTT_ID, BT_DATE, BT_AMOUNT, BT_ACC_NAME, BT_ACC_NO, BT_BANK_CODE, BT_BRANCH_CODE,BT_BANK_ADDRESS, BT_SWIFT_CODE, BT_CUST_REF, BT_INV_DETAILS, BT_DEBITED_ON, BT_COMMENTS,BT_TIMESTAMP) VALUES (@BT_ID,(SELECT ULD_ID FROM ',DESTINATIONSCHEMA,'.USER_LOGIN_DETAILS WHERE ULD_LOGINID=@USER_STAMP),@BTCT_ID,@BTCB_ID,@BTS_ID,(SELECT BTM_DATA FROM ',DESTINATIONSCHEMA,'.BANK_TRANSFER_MODELS WHERE BTM_ID=@BTT_ID),@BT_DATE,@BT_AMOUNT,@BT_ACCNAME,@BT_ACCNO,@BT_BANKCODE,@BT_BRANCHCODE,@BT_BANKADDRESS,@BT_SWIFTCODE,@BT_CUSTREF,@BT_INVDETAILS,@BT_DEBITEDON,@BT_COMMENTS,@BTTIME_STAMP)'));
		PREPARE INSERTTEMPBANKTRANSFER FROM @INSERT_TEMP_BANK_TRANSFER; 
		EXECUTE INSERTTEMPBANKTRANSFER;
	END IF;
END LOOP;
CLOSE FILTER_CURSOR;
	SET @DROP_TEMP_BANKTT_TABLE=(SELECT CONCAT('DROP TABLE IF EXISTS ',DESTINATIONSCHEMA,'.TEMP_BANKTT_TABLE'));
	PREPARE DTEMPBANKTTTABLE FROM @DROP_TEMP_BANKTT_TABLE;
    EXECUTE DTEMPBANKTTTABLE;
	SET @CREATE_TEMP_BANKTT_TABLE=(SELECT CONCAT('CREATE TABLE ',DESTINATIONSCHEMA,'.TEMP_BANKTT_TABLE( SNO INTEGER AUTO_INCREMENT NOT NULL PRIMARY KEY,BT_ID INTEGER,BTT_DATA VARCHAR(50),BT_DATE DATE,BT_ACC_NO VARCHAR(25),BT_ACC_NAME VARCHAR(40),BT_AMOUNT DECIMAL(7,2),BTS_DATA VARCHAR(20),BT_DEBITED_ON DATE,BT_BANK_CODE VARCHAR(4),BT_BRANCH_CODE VARCHAR(4),BT_BANK_ADDRESS TEXT,BT_SWIFT_CODE VARCHAR(25),BTCT_DATA VARCHAR(20),BT_CUST_REF VARCHAR(50),BT_INV_DETAILS TEXT,BTCB_DATA VARCHAR(50),BT_COMMENTS TEXT,ULD_ID INTEGER,BT_TIMESTAMP VARCHAR(50))'));
    PREPARE CTEMPBANKTTTABLE FROM @CREATE_TEMP_BANKTT_TABLE;
    EXECUTE CTEMPBANKTTTABLE;
	SET @INSERT_TEMP_BANKTT_TABLE=( SELECT CONCAT('INSERT INTO ',DESTINATIONSCHEMA,'.TEMP_BANKTT_TABLE(BT_ID,BTT_DATA,BT_DATE,BT_ACC_NO,BT_ACC_NAME,BT_AMOUNT,BTS_DATA,BT_DEBITED_ON,BT_BANK_CODE,BT_BRANCH_CODE,BT_BANK_ADDRESS,BT_SWIFT_CODE,BTCT_DATA,BT_CUST_REF,BT_INV_DETAILS,BTCB_DATA,BT_COMMENTS,ULD_ID,BT_TIMESTAMP) SELECT BT.BT_ID,BTT.BTT_DATA,BT.BT_DATE,BT.BT_ACC_NO,BT.BT_ACC_NAME,BT.BT_AMOUNT,BTS.BTS_DATA,BT.BT_DEBITED_ON,BT.BT_BANK_CODE,BT.BT_BRANCH_CODE,BT.BT_BANK_ADDRESS,BT.BT_SWIFT_CODE,BTCT.BTCT_DATA,BT.BT_CUST_REF,BT.BT_INV_DETAILS,BTCB.BTCB_DATA,BT.BT_COMMENTS,BT.ULD_ID,BT.BT_TIMESTAMP FROM ',DESTINATIONSCHEMA,'.TEMP_BANK_TRANSFER BT,',SOURCESCHEMA,'.MIG_BANK_TRANSFER_STATUS BTS,',SOURCESCHEMA,'.MIG_BANK_TRANSFER_CHARGES_TO BTCT,',SOURCESCHEMA,'.MIG_BANK_TRANSFER_CREATED_BY BTCB,',SOURCESCHEMA,'.MIG_BANK_TRANSFER_TYPE BTT WHERE BT.BTT_ID=BTT.BTT_ID AND BT.BTS_ID=BTS.BTS_ID AND BT.BTCT_ID=BTCT.BTCT_ID AND BTCB.BTCB_ID=BT.BTCB_ID'));
    PREPARE INSERTTEMPBANKTTTABLE FROM @INSERT_TEMP_BANKTT_TABLE; 
    EXECUTE INSERTTEMPBANKTTTABLE;
 	SET @INSERT_TEMP_BANKTT_TABLE=( SELECT CONCAT('INSERT INTO ',DESTINATIONSCHEMA,'.TEMP_BANKTT_TABLE(BT_ID,BTT_DATA,BT_DATE,BT_AMOUNT,BTS_DATA,BT_DEBITED_ON,BT_BANK_ADDRESS,BT_CUST_REF,BT_INV_DETAILS,BT_COMMENTS,ULD_ID,BTCB_DATA,BT_TIMESTAMP) SELECT BT.BT_ID,BTM.BTM_DATA,BT.BT_DATE,BT.BT_AMOUNT,BTS.BTS_DATA,BT_DEBITED_ON,BT.BT_BANK_ADDRESS,BT.BT_CUST_REF,BT.BT_INV_DETAILS,BT.BT_COMMENTS,BT.ULD_ID,BTCB.BTCB_DATA,BT.BT_TIMESTAMP FROM ',DESTINATIONSCHEMA,'.TEMP_BANK_TRANSFER BT,',SOURCESCHEMA,'.MIG_BANK_TRANSFER_STATUS BTS,',SOURCESCHEMA,'.MIG_BANK_TRANSFER_CREATED_BY BTCB,',DESTINATIONSCHEMA,'.BANK_TRANSFER_MODELS BTM WHERE BT.BTS_ID=BTS.BTS_ID AND BTCB.BTCB_ID=BT.BTCB_ID AND BTM.BTM_DATA=BT.BTT_ID'));
    PREPARE INSERTTEMPBANKTTTABLE FROM @INSERT_TEMP_BANKTT_TABLE; 
    EXECUTE INSERTTEMPBANKTTTABLE;
    COMMIT;
END;
