DROP PROCEDURE IF EXISTS SP_TEMP_RENTAL_SCDB_FORMAT_INSERT;
CREATE PROCEDURE SP_TEMP_RENTAL_SCDB_FORMAT_INSERT()
BEGIN
--QUERY FOR CREATE TEMP TABLE
	DROP TABLE IF EXISTS TEMP_RENTAL_SCDB_FORMAT;
	CREATE TABLE TEMP_RENTAL_SCDB_FORMAT LIKE RENTAL_SCDB_FORMAT;
--INSERT QUERY  TEMP TABLE
	INSERT INTO TEMP_RENTAL_SCDB_FORMAT SELECT * FROM RENTAL_SCDB_FORMAT;
--ALTER QUERY FOR TEMP_RENTAL_SCDB_FORMAT TABLE
	ALTER TABLE TEMP_RENTAL_SCDB_FORMAT ADD COLUMN RD_AMOUNT VARCHAR(255) NULL;
	ALTER TABLE TEMP_RENTAL_SCDB_FORMAT ADD COLUMN RPP_ID VARCHAR(255) NULL;
--UPDATE QUERY FOR TEMP_RENTAL_SCDB_FORMAT
	UPDATE TEMP_RENTAL_SCDB_FORMAT SET 
	RD_AMOUNT = CONCAT(IFNULL(RENTAL_DEPOSIT, ''), ' ', IFNULL(RENTAL_DEPOSIT_REFUND, ''), ' ', 
	IFNULL(RENTAL_AMOUNT, ''), ' ', IFNULL(RENTAL_PROCESSING_FEE, ''), ' ', IFNULL(RENTAL_CLEANING_FEE, ''));
	UPDATE TEMP_RENTAL_SCDB_FORMAT SET RPP_ID=1 WHERE RENTAL_AMOUNT IS NOT NULL;
	UPDATE TEMP_RENTAL_SCDB_FORMAT SET RPP_ID=2 WHERE RENTAL_DEPOSIT IS NOT NULL;
	UPDATE TEMP_RENTAL_SCDB_FORMAT SET RPP_ID=3 WHERE RENTAL_PROCESSING_FEE IS NOT NULL;
	UPDATE TEMP_RENTAL_SCDB_FORMAT SET RPP_ID=4 WHERE RENTAL_CLEANING_FEE IS NOT NULL;
	UPDATE TEMP_RENTAL_SCDB_FORMAT SET RPP_ID=5 WHERE RENTAL_DEPOSIT_REFUND IS NOT NULL;
	UPDATE TEMP_RENTAL_SCDB_FORMAT SET RENTAL_CUSTOMER='CHARLES AND JOANNA' WHERE RENTAL_CUSTOMER='CHARLES ANDJOANNA';
END;

--SP FOR CREATE TEMP_RENTAL_CUSTOMER TABLE
DROP PROCEDURE IF EXISTS TEMP_RENTAL_CUSTOMER_INSERT;
CREATE PROCEDURE TEMP_RENTAL_CUSTOMER_INSERT()
BEGIN
--QUERY FOR CREATE TEMP TABLE
	DROP TABLE IF EXISTS TEMP_RENTAL_CUSTOMER;
	CREATE TABLE TEMP_RENTAL_CUSTOMER(ID INTEGER NOT NULL AUTO_INCREMENT,CUST_ID INTEGER,CUSTOMER_NAME CHAR(100),
	UNITNO INTEGER,PRIMARY KEY(ID));
--INSERT QUERY TEMP TABLE
	INSERT INTO TEMP_RENTAL_CUSTOMER(CUST_ID,CUSTOMER_NAME,UNITNO)
	SELECT CC_CUST_ID,IF(CC_FIRST_NAME=CC_LAST_NAME,CC_FIRST_NAME, CONCAT(CC_FIRST_NAME,'_',CC_LAST_NAME)),CC_UNIT_NO FROM TEMP_CUSTOMER_SCDB_FORMAT;
	UPDATE TEMP_RENTAL_CUSTOMER SET CUSTOMER_NAME='MAN_MAN' WHERE CUSTOMER_NAME='MAN' AND UNITNO=3906; 
END;

--SP FOR CREATE TEMP_PAYMENT_DETAILS TABLE
DROP PROCEDURE IF EXISTS SP_TEMP_PAYMENT_DETAILS_INSERT;
CREATE PROCEDURE SP_TEMP_PAYMENT_DETAILS_INSERT()
BEGIN
--VARIABLE DECLARATION
	DECLARE DONE INT DEFAULT FALSE;
	DECLARE CUSTOMERNAME CHAR(100);
	DECLARE UNIT_NUMBER INTEGER;
	DECLARE FORPERIOD DATE;
	DECLARE PAIDDATE DATE;
	DECLARE RPPID INTEGER;
	DECLARE RDAMOUNT DECIMAL(7,2);
	DECLARE COMMENTS TEXT;
	DECLARE USER_STAMP VARCHAR(50);
	DECLARE CUSTID INTEGER;
	DECLARE RENTALID INTEGER;
	DECLARE FORPERIOD_MONTH INTEGER;
	DECLARE FORPERIOD_YEAR INTEGER;
	DECLARE FORPERIOD_DATE INTEGER;
	DECLARE FORPERIODDATE DATE;
	DECLARE RTIMESTAMP VARCHAR(50);
	DECLARE FILTER_CURSOR CURSOR FOR 
	SELECT RENTAL_ID,RENTAL_CUSTOMER, RENTAL_UNIT, RENTAL_FOR_PERIOD, RENTAL_PAID_DATE,  RPP_ID, RD_AMOUNT,RENTAL_COMMENTS,USERSTAMP,TIMESTAMP FROM TEMP_RENTAL_SCDB_FORMAT;
	DECLARE CONTINUE HANDLER FOR NOT FOUND SET DONE = TRUE;
	OPEN FILTER_CURSOR;
--QUERY FOR CREATE TEMP_PAYMENT_DETAILS TABLE
	DROP TABLE IF EXISTS TEMP_PAYMENT_DETAILS;
	CREATE TABLE TEMP_PAYMENT_DETAILS(
	PD_ID INTEGER NOT NULL AUTO_INCREMENT,
	UNIT_ID	INTEGER NOT NULL,
	CUSTOMER_ID	INTEGER NOT NULL,
	PP_ID INTEGER NOT NULL,
	CED_REC_VER	INTEGER NULL,
	PD_AMOUNT DECIMAL(7,2) NOT NULL,
	PD_FOR_PERIOD DATE NOT NULL,
	PD_PAID_DATE DATE NOT NULL,
	PD_HIGHLIGHT_FLAG CHAR(1) NULL,
	PD_COMMENTS	TEXT NULL,
	PD_USERSTAMP VARCHAR(50) NOT NULL,
	PD_TIMESTAMP VARCHAR(50) NOT NULL,
	PRIMARY KEY(PD_ID),
	FOREIGN KEY(UNIT_ID) REFERENCES UNIT (UNIT_ID),
	FOREIGN KEY(CUSTOMER_ID) REFERENCES CUSTOMER (CUSTOMER_ID),
	FOREIGN KEY(PP_ID) REFERENCES PAYMENT_PROFILE (PP_ID));
	read_loop: LOOP
		FETCH FILTER_CURSOR INTO RENTALID, CUSTOMERNAME, UNIT_NUMBER, FORPERIOD, PAIDDATE,  RPPID, RDAMOUNT,
		COMMENTS, USER_STAMP, RTIMESTAMP;
		IF DONE THEN
			LEAVE read_loop;
		END IF;
--QUERY FOR SET VALUES
		SET FORPERIOD_MONTH = (SELECT MONTH(FORPERIOD));
		SET FORPERIOD_YEAR = (SELECT YEAR(FORPERIOD));
		SET FORPERIOD_DATE = (SELECT DAY(FORPERIOD));
		SET CUSTID = (SELECT DISTINCT(CUST_ID) FROM TEMP_RENTAL_CUSTOMER WHERE CUSTOMER_NAME=CUSTOMERNAME AND UNITNO=UNIT_NUMBER);
		IF (FORPERIOD_DATE!=1)THEN
			IF(LENGTH(FORPERIOD_MONTH>1))THEN
				SET FORPERIODDATE = (SELECT CONCAT(FORPERIOD_YEAR,'-',FORPERIOD_MONTH,'-','01'));
			ELSE
				SET FORPERIODDATE = (SELECT CONCAT(FORPERIOD_YEAR,'-','0',FORPERIOD_MONTH,'-','01'));
			END IF;
--INSERT QUERY TEMP_PAYMENT_DETAILS TABLE
			SET FOREIGN_KEY_CHECKS=0;	
			INSERT INTO TEMP_PAYMENT_DETAILS(UNIT_ID,CUSTOMER_ID,PP_ID,PD_AMOUNT,PD_FOR_PERIOD,PD_PAID_DATE,PD_COMMENTS,PD_USERSTAMP,PD_TIMESTAMP)
			SELECT (SELECT UNIT_ID FROM UNIT WHERE UNIT_NO=UNIT_NUMBER), CUSTID ,RPPID,  RDAMOUNT, FORPERIODDATE, 
			PAIDDATE, COMMENTS, USER_STAMP ,RTIMESTAMP;
		ELSE 
--INSERT QUERY TEMP_PAYMENT_DETAILS TABLE
			SET FOREIGN_KEY_CHECKS=0;
			INSERT INTO TEMP_PAYMENT_DETAILS(UNIT_ID,CUSTOMER_ID,PP_ID,PD_AMOUNT,PD_FOR_PERIOD,PD_PAID_DATE,PD_COMMENTS,PD_USERSTAMP,PD_TIMESTAMP)
			SELECT (SELECT UNIT_ID FROM UNIT WHERE UNIT_NO=UNIT_NUMBER), CUSTID ,RPPID,  RDAMOUNT, FORPERIOD, 
			PAIDDATE, COMMENTS, USER_STAMP, RTIMESTAMP;
		END IF;
	END LOOP;
	CLOSE FILTER_CURSOR;
END;

DROP PROCEDURE IF EXISTS SP_PAYMENT_UPDATE_REC_VERSION;
CREATE PROCEDURE SP_PAYMENT_UPDATE_REC_VERSION()
BEGIN
DECLARE MINCUSTOMERID INTEGER;
DECLARE MAXCUSTOMERID INTEGER;
DECLARE MINID INTEGER;
DECLARE MAXID INTEGER;
DECLARE RECVER INTEGER;
DECLARE FORPERIOD DATE;
DECLARE STARTDATE DATE;
DECLARE ENDDATE DATE;
DECLARE EXRECVER INTEGER;
DECLARE MINPAYMENTID INTEGER;
DECLARE MAXPAYMENTID INTEGER;
DECLARE PRETERMINATEDATE DATE;
DECLARE PPID INTEGER;
DECLARE EXTENSIONFLAG CHAR(1);
DECLARE UNITID INTEGER;
DECLARE CUSTOMERID INTEGER;
DECLARE PDAMOUNT DECIMAL(7,2);
DECLARE PAIDDATE DATE;
DECLARE HIGHLIGHTFLAG CHAR(1);
DECLARE COMMENTS TEXT;
DECLARE USERSTAMP VARCHAR(50);
DECLARE PREUNITID INTEGER;
DECLARE NEXTUNITID INTEGER;
DECLARE PAYMENT_TIMESTAMP TIMESTAMP;
DECLARE RECHECKINFLAG CHAR(1);
DECLARE CHECKRECVER INTEGER;
DECLARE SAMEUNITID INTEGER;
DECLARE PAYMENTID INTEGER;
DECLARE AMOUNTCOUNT INTEGER;
DROP TABLE IF EXISTS TEMP_PAYMENT_ENTRY_DETAILS;
CREATE TABLE TEMP_PAYMENT_ENTRY_DETAILS(
ID INTEGER AUTO_INCREMENT PRIMARY KEY NOT NULL,
UNIT_ID INTEGER,
CUSTOMER_ID INTEGER,
PP_ID INTEGER,
CED_REC_VER INTEGER,
PD_AMOUNT DECIMAL(7,2),
PD_FOR_PERIOD DATE,
PD_PAID_DATE DATE,
PD_HIGHLIGHT_FLAG CHAR(1),
PD_COMMENTS TEXT,
PD_USERSTAMP VARCHAR(50),
PD_TIMESTAMP VARCHAR(50));


INSERT INTO TEMP_PAYMENT_ENTRY_DETAILS(UNIT_ID,CUSTOMER_ID,PP_ID,CED_REC_VER,PD_AMOUNT,
PD_FOR_PERIOD,PD_PAID_DATE,PD_HIGHLIGHT_FLAG,PD_COMMENTS,PD_USERSTAMP,PD_TIMESTAMP)
SELECT UNIT_ID,CUSTOMER_ID,PP_ID,CED_REC_VER,PD_AMOUNT,PD_FOR_PERIOD,PD_PAID_DATE,PD_HIGHLIGHT_FLAG,PD_COMMENTS,PD_USERSTAMP,PD_TIMESTAMP FROM TEMP_PAYMENT_DETAILS ORDER BY CUSTOMER_ID,PP_ID,PD_FOR_PERIOD;

SET MINCUSTOMERID=(SELECT MIN(CUSTOMER_ID) FROM TEMP_PAYMENT_ENTRY_DETAILS);
SET MAXCUSTOMERID=(SELECT MAX(CUSTOMER_ID) FROM TEMP_PAYMENT_ENTRY_DETAILS);

WHILE MINCUSTOMERID<=MAXCUSTOMERID DO

	SET MINID=(SELECT MIN(ID) FROM TEMP_PAYMENT_ENTRY_DETAILS WHERE CUSTOMER_ID=MINCUSTOMERID);
	SET MAXID=(SELECT MAX(ID) FROM TEMP_PAYMENT_ENTRY_DETAILS WHERE CUSTOMER_ID=MINCUSTOMERID);
	
		WHILE MINID<=MAXID DO
			DROP TABLE IF EXISTS TEMP_PAYMENT_CUSTOMER;
			CREATE TABLE TEMP_PAYMENT_CUSTOMER(ID INTEGER NOT NULL PRIMARY KEY AUTO_INCREMENT,CUSTOMER_ID INTEGER,
			CED_REC_VER INTEGER,UNIT_ID INTEGER,CED_STARTDATE DATE,CED_ENDDATE DATE,CED_PRETERMINATE_DATE DATE,CED_EXTENSION CHAR(1),CED_RECHECKIN CHAR(1));
			INSERT INTO TEMP_PAYMENT_CUSTOMER(CUSTOMER_ID,CED_REC_VER,UNIT_ID,CED_STARTDATE,CED_ENDDATE,CED_PRETERMINATE_DATE,CED_EXTENSION,CED_RECHECKIN) 
			SELECT CUSTOMER_ID,CED_REC_VER,UNIT_ID,CED_STARTDATE,CED_ENDDATE,CED_PRETERMINATE_DATE,CED_EXTENSION,CED_RECHECKIN FROM TEMP_CUSTOMER_ENTRY_DETAILS WHERE CUSTOMER_ID=MINCUSTOMERID  AND IF(CED_PRETERMINATE_DATE IS NOT NULL,CED_PRETERMINATE_DATE>CED_STARTDATE,CED_ENDDATE>CED_STARTDATE);
			UPDATE TEMP_PAYMENT_CUSTOMER SET CED_STARTDATE=(SELECT ADDDATE(LAST_DAY(SUBDATE(CED_STARTDATE, INTERVAL 1 MONTH)), 1));
			SET MINPAYMENTID=(SELECT MIN(ID) FROM TEMP_PAYMENT_CUSTOMER);
			SET MAXPAYMENTID=(SELECT MAX(ID) FROM TEMP_PAYMENT_CUSTOMER);
				WHILE MINPAYMENTID<=MAXPAYMENTID DO
				
					SET FORPERIOD=(SELECT PD_FOR_PERIOD FROM TEMP_PAYMENT_ENTRY_DETAILS WHERE ID=MINID);
					SET PPID=(SELECT PP_ID FROM TEMP_PAYMENT_ENTRY_DETAILS WHERE ID=MINID);
					SET STARTDATE=(SELECT CED_STARTDATE FROM TEMP_PAYMENT_CUSTOMER WHERE ID=MINPAYMENTID);
					SET PRETERMINATEDATE=(SELECT CED_PRETERMINATE_DATE FROM TEMP_PAYMENT_CUSTOMER WHERE ID=MINPAYMENTID);
					SET EXTENSIONFLAG=(SELECT CED_EXTENSION FROM TEMP_PAYMENT_CUSTOMER WHERE ID=MINPAYMENTID);
					SET RECHECKINFLAG=(SELECT CED_RECHECKIN FROM TEMP_PAYMENT_CUSTOMER WHERE ID=MINPAYMENTID);
						IF PRETERMINATEDATE IS NOT NULL THEN
							SET ENDDATE=(SELECT CED_PRETERMINATE_DATE FROM TEMP_PAYMENT_CUSTOMER WHERE ID=MINPAYMENTID);
						ELSE
							SET ENDDATE=(SELECT CED_ENDDATE FROM TEMP_PAYMENT_CUSTOMER WHERE ID=MINPAYMENTID);
						END IF;
						
						IF FORPERIOD BETWEEN STARTDATE AND ENDDATE THEN
							SET RECVER=(SELECT CED_REC_VER FROM TEMP_PAYMENT_CUSTOMER WHERE ID=MINPAYMENTID);
								SET PREUNITID=(SELECT UNIT_ID FROM TEMP_PAYMENT_CUSTOMER WHERE CUSTOMER_ID=MINCUSTOMERID AND CED_REC_VER=RECVER);
								SET NEXTUNITID=(SELECT UNIT_ID FROM TEMP_PAYMENT_CUSTOMER WHERE CUSTOMER_ID=MINCUSTOMERID AND CED_REC_VER=(RECVER-1));
								IF (EXTENSIONFLAG IS NOT NULL) AND (PPID=1) AND (FORPERIOD=STARTDATE) AND ((PREUNITID=NEXTUNITID)OR(PREUNITID!=NEXTUNITID)) THEN
									IF NOT EXISTS(SELECT PD_FOR_PERIOD FROM TEMP_PAYMENT_ENTRY_DETAILS WHERE CUSTOMER_ID=MINCUSTOMERID AND PD_FOR_PERIOD=FORPERIOD AND PP_ID=1 AND ID>MINID)THEN
										IF NOT EXISTS(SELECT CED_REC_VER FROM TEMP_PAYMENT_ENTRY_DETAILS WHERE CUSTOMER_ID=MINCUSTOMERID AND PD_FOR_PERIOD=FORPERIOD AND PP_ID=1 AND CED_REC_VER=RECVER)THEN
											IF PPID=1 THEN
											SET UNITID=(SELECT DISTINCT UNIT_ID FROM TEMP_PAYMENT_ENTRY_DETAILS WHERE CUSTOMER_ID=MINCUSTOMERID AND CED_REC_VER=(RECVER-1)AND PP_ID=1 AND PD_FOR_PERIOD=FORPERIOD);
											SET CUSTOMERID=(SELECT DISTINCT CUSTOMER_ID FROM TEMP_PAYMENT_ENTRY_DETAILS WHERE CUSTOMER_ID=MINCUSTOMERID AND CED_REC_VER=(RECVER-1)AND PP_ID=1 AND PD_FOR_PERIOD=FORPERIOD);
											SET PDAMOUNT=(SELECT DISTINCT PD_AMOUNT FROM TEMP_PAYMENT_ENTRY_DETAILS WHERE CUSTOMER_ID=MINCUSTOMERID AND CED_REC_VER=(RECVER-1)AND PP_ID=1 AND PD_FOR_PERIOD=FORPERIOD);
											SET PAIDDATE=(SELECT DISTINCT PD_PAID_DATE FROM TEMP_PAYMENT_ENTRY_DETAILS WHERE CUSTOMER_ID=MINCUSTOMERID AND CED_REC_VER=(RECVER-1)AND PP_ID=1 AND PD_FOR_PERIOD=FORPERIOD);
											SET HIGHLIGHTFLAG=(SELECT DISTINCT PD_HIGHLIGHT_FLAG FROM TEMP_PAYMENT_ENTRY_DETAILS WHERE CUSTOMER_ID=MINCUSTOMERID AND CED_REC_VER=(RECVER-1)AND PP_ID=1 AND PD_FOR_PERIOD=FORPERIOD);
											SET COMMENTS=(SELECT DISTINCT PD_COMMENTS FROM TEMP_PAYMENT_ENTRY_DETAILS WHERE CUSTOMER_ID=MINCUSTOMERID AND CED_REC_VER=(RECVER-1)AND PP_ID=1 AND PD_FOR_PERIOD=FORPERIOD);
											SET USERSTAMP=(SELECT DISTINCT PD_USERSTAMP FROM TEMP_PAYMENT_ENTRY_DETAILS WHERE CUSTOMER_ID=MINCUSTOMERID AND CED_REC_VER=(RECVER-1)AND PP_ID=1 AND PD_FOR_PERIOD=FORPERIOD);
											SET PAYMENT_TIMESTAMP=(SELECT DISTINCT PD_TIMESTAMP FROM TEMP_PAYMENT_ENTRY_DETAILS WHERE CUSTOMER_ID=MINCUSTOMERID AND CED_REC_VER=(RECVER-1)AND PP_ID=1 AND PD_FOR_PERIOD=FORPERIOD);
											INSERT INTO TEMP_PAYMENT_ENTRY_DETAILS(UNIT_ID,CUSTOMER_ID,PP_ID,CED_REC_VER,PD_AMOUNT,PD_FOR_PERIOD,PD_PAID_DATE,PD_HIGHLIGHT_FLAG,PD_COMMENTS,PD_USERSTAMP,PD_TIMESTAMP)
											VALUES(UNITID,CUSTOMERID,1,RECVER,PDAMOUNT,FORPERIOD,PAIDDATE,HIGHLIGHTFLAG,COMMENTS,USERSTAMP,PAYMENT_TIMESTAMP);
											SET AMOUNTCOUNT=(SELECT COUNT(*) FROM TEMP_PAYMENT_ENTRY_DETAILS WHERE PD_FOR_PERIOD=FORPERIOD AND CUSTOMER_ID=MINCUSTOMERID AND PP_ID=1);
											UPDATE TEMP_PAYMENT_ENTRY_DETAILS SET PD_AMOUNT=(PD_AMOUNT/AMOUNTCOUNT) WHERE CUSTOMER_ID=MINCUSTOMERID AND PP_ID=1 AND PD_FOR_PERIOD=FORPERIOD;
											IF PPID=4 THEN
												SET UNITID=(SELECT DISTINCT UNIT_ID FROM TEMP_PAYMENT_ENTRY_DETAILS WHERE CUSTOMER_ID=MINCUSTOMERID AND CED_REC_VER=(RECVER-1)AND PP_ID=4 AND PD_FOR_PERIOD=FORPERIOD);
												SET CUSTOMERID=(SELECT DISTINCT CUSTOMER_ID FROM TEMP_PAYMENT_ENTRY_DETAILS WHERE CUSTOMER_ID=MINCUSTOMERID AND CED_REC_VER=(RECVER-1)AND PP_ID=4 AND PD_FOR_PERIOD=FORPERIOD);
												SET PDAMOUNT=(SELECT DISTINCT PD_AMOUNT FROM TEMP_PAYMENT_ENTRY_DETAILS WHERE CUSTOMER_ID=MINCUSTOMERID AND CED_REC_VER=(RECVER-1)AND PP_ID=4 AND PD_FOR_PERIOD=FORPERIOD);
												SET PAIDDATE=(SELECT DISTINCT PD_PAID_DATE FROM TEMP_PAYMENT_ENTRY_DETAILS WHERE CUSTOMER_ID=MINCUSTOMERID AND CED_REC_VER=(RECVER-1)AND PP_ID=4 AND PD_FOR_PERIOD=FORPERIOD);
												SET HIGHLIGHTFLAG=(SELECT DISTINCT PD_HIGHLIGHT_FLAG FROM TEMP_PAYMENT_ENTRY_DETAILS WHERE CUSTOMER_ID=MINCUSTOMERID AND CED_REC_VER=(RECVER-1)AND PP_ID=4 AND PD_FOR_PERIOD=FORPERIOD);
												SET COMMENTS=(SELECT DISTINCT PD_COMMENTS FROM TEMP_PAYMENT_ENTRY_DETAILS WHERE CUSTOMER_ID=MINCUSTOMERID AND CED_REC_VER=(RECVER-1)AND PP_ID=4 AND PD_FOR_PERIOD=FORPERIOD);
												SET USERSTAMP=(SELECT DISTINCT PD_USERSTAMP FROM TEMP_PAYMENT_ENTRY_DETAILS WHERE CUSTOMER_ID=MINCUSTOMERID AND CED_REC_VER=(RECVER-1)AND PP_ID=4 AND PD_FOR_PERIOD=FORPERIOD);
												SET PAYMENT_TIMESTAMP=(SELECT PD_TIMESTAMP FROM TEMP_PAYMENT_ENTRY_DETAILS WHERE CUSTOMER_ID=MINCUSTOMERID AND CED_REC_VER=(RECVER-1)AND PP_ID=4 AND PD_FOR_PERIOD=FORPERIOD);
												INSERT INTO TEMP_PAYMENT_ENTRY_DETAILS(UNIT_ID,CUSTOMER_ID,PP_ID,CED_REC_VER,PD_AMOUNT,PD_FOR_PERIOD,PD_PAID_DATE,PD_HIGHLIGHT_FLAG,PD_COMMENTS,PD_USERSTAMP,PD_TIMESTAMP)
												VALUE(UNITID,CUSTOMERID,4,RECVER,PDAMOUNT,FORPERIOD,PAIDDATE,HIGHLIGHTFLAG,COMMENTS,USERSTAMP,PAYMENT_TIMESTAMP);
												SET AMOUNTCOUNT=(SELECT COUNT(*) FROM TEMP_PAYMENT_ENTRY_DETAILS WHERE PD_FOR_PERIOD=FORPERIOD AND CUSTOMER_ID=MINCUSTOMERID AND PP_ID=4);
												UPDATE TEMP_PAYMENT_ENTRY_DETAILS SET PD_AMOUNT=(PD_AMOUNT/AMOUNTCOUNT) WHERE CUSTOMER_ID=MINCUSTOMERID AND PP_ID=4 AND PD_FOR_PERIOD=FORPERIOD;

											END IF;
										END IF;
									END IF;
									ELSE
										SET PAYMENTID=(SELECT MIN(ID) FROM TEMP_PAYMENT_ENTRY_DETAILS WHERE CUSTOMER_ID=MINCUSTOMERID AND PD_FOR_PERIOD=FORPERIOD AND PP_ID=1 AND ID>MINID AND CED_REC_VER IS NULL);
										IF PAYMENTID IS NOT NULL THEN
											UPDATE TEMP_PAYMENT_ENTRY_DETAILS SET CED_REC_VER=RECVER WHERE ID=PAYMENTID;
										END IF;
									END IF;
								
								ELSE	
									SET CHECKRECVER=(SELECT CED_REC_VER FROM TEMP_PAYMENT_ENTRY_DETAILS WHERE ID=MINID);
										IF CHECKRECVER IS NULL THEN
											UPDATE TEMP_PAYMENT_ENTRY_DETAILS SET CED_REC_VER=RECVER WHERE ID=MINID;
										END IF;
									IF(RECHECKINFLAG IS NOT NULL)THEN
											UPDATE TEMP_PAYMENT_ENTRY_DETAILS SET CED_REC_VER=RECVER WHERE ID=MINID;
											SET SAMEUNITID=(SELECT ID FROM TEMP_PAYMENT_ENTRY_DETAILS WHERE PD_FOR_PERIOD=FORPERIOD AND PP_ID=1 AND ID!=MINID AND CED_REC_VER=RECVER AND CUSTOMER_ID=MINCUSTOMERID);
											IF SAMEUNITID IS NOT NULL THEN
												UPDATE TEMP_PAYMENT_ENTRY_DETAILS SET CED_REC_VER=(RECVER-1) WHERE ID=SAMEUNITID;
											END IF;
									END IF;
									
								END IF;
						END IF;
						
					SET MINPAYMENTID=MINPAYMENTID+1;
					END WHILE;
		SET MINID=MINID+1;
		END WHILE;
	SET MINCUSTOMERID=MINCUSTOMERID+1;
END WHILE;
END;
							
							
		


--FINAL PAYMENT SP
DROP PROCEDURE IF EXISTS SP_MIG_PAYMENT_INSERT;
CREATE PROCEDURE SP_MIG_PAYMENT_INSERT(IN RENTAL_USERSTAMP VARCHAR(100))
BEGIN
	DECLARE STARTTIME TIME;
	DECLARE ENDTIME TIME;
	DECLARE DURATION TIME;
	SET STARTTIME = (SELECT CURTIME());
	SET FOREIGN_KEY_CHECKS=0;
	CALL TEMP_RENTAL_CUSTOMER_INSERT();
	CALL SP_TEMP_RENTAL_SCDB_FORMAT_INSERT();
	CALL SP_TEMP_PAYMENT_DETAILS_INSERT();
	CALL SP_PAYMENT_UPDATE_REC_VERSION();
--QUERY FOR CREATE PAYMENT_DETAILS TABLE
	DROP TABLE IF EXISTS PAYMENT_DETAILS;
	CREATE TABLE PAYMENT_DETAILS(
	PD_ID INTEGER NOT NULL AUTO_INCREMENT,
	UNIT_ID	INTEGER NOT NULL,
	CUSTOMER_ID	INTEGER NOT NULL,
	PP_ID INTEGER NOT NULL,
	CED_REC_VER	INTEGER NOT NULL,
	PD_AMOUNT DECIMAL(7,2) NOT NULL,
	PD_FOR_PERIOD DATE NOT NULL,
	PD_PAID_DATE DATE NOT NULL,
	PD_HIGHLIGHT_FLAG CHAR(1) NULL,
	PD_COMMENTS	TEXT NULL,
	ULD_ID INTEGER(2) NOT NULL,
	PD_TIMESTAMP TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
	PRIMARY KEY(PD_ID),
	FOREIGN KEY(UNIT_ID) REFERENCES UNIT (UNIT_ID),
	FOREIGN KEY(CUSTOMER_ID) REFERENCES CUSTOMER (CUSTOMER_ID),
	FOREIGN KEY(PP_ID) REFERENCES PAYMENT_PROFILE (PP_ID),
	FOREIGN KEY(ULD_ID) REFERENCES USER_LOGIN_DETAILS (ULD_ID));
--QUERY FOR INSERT PAYMENT_DETAILS TABLE	
	INSERT INTO PAYMENT_DETAILS (UNIT_ID , CUSTOMER_ID, PP_ID,CED_REC_VER,PD_AMOUNT,PD_FOR_PERIOD,PD_PAID_DATE,PD_HIGHLIGHT_FLAG,
	PD_COMMENTS,ULD_ID,PD_TIMESTAMP) (SELECT T.UNIT_ID , T.CUSTOMER_ID, T.PP_ID,T.CED_REC_VER,T.PD_AMOUNT,T.PD_FOR_PERIOD,T.PD_PAID_DATE,T.PD_HIGHLIGHT_FLAG,
	T.PD_COMMENTS,ULD.ULD_ID,T.PD_TIMESTAMP FROM TEMP_PAYMENT_ENTRY_DETAILS T,USER_LOGIN_DETAILS ULD WHERE
	ULD.ULD_LOGINID=T.PD_USERSTAMP);
--QUERY FOR DROP ALL TEMP TABLE
	SET ENDTIME = (SELECT CURTIME());
	SET DURATION=(SELECT TIMEDIFF(ENDTIME,STARTTIME));
	SET @COUNT_SCDB_RENTAL=(SELECT COUNT(*) FROM RENTAL_SCDB_FORMAT);
	SET @COUNT_SPLITTED_RENTAL=(SELECT COUNT(*) FROM PAYMENT_DETAILS);
	SET @REJECTION_COUNT=(@COUNT_SCDB_RENTAL-@COUNT_SPLITTED_RENTAL);
--QUERY FOR UPDATE PRE_AUDIT_SUB_PROFILE TABLE
	UPDATE PRE_AUDIT_SUB_PROFILE SET PREASP_NO_OF_REC=@COUNT_SCDB_RENTAL WHERE PREASP_DATA='PAYMENT_DETAILS';
--QUERY FOR INSERT POST_AUDIT_HISTORY TABLE
	INSERT INTO POST_AUDIT_HISTORY(POSTAP_ID,POSTAH_NO_OF_REC,PREASP_ID,PREAMP_ID,POSTAH_DURATION,POSTAH_NO_OF_REJ,POSTAH_USERSTAMP)
	VALUES((SELECT POSTAP_ID FROM POST_AUDIT_PROFILE WHERE POSTAP_DATA='PAYMENT_DETAILS'),@COUNT_SPLITTED_RENTAL,(SELECT PREASP_ID FROM PRE_AUDIT_SUB_PROFILE WHERE PREASP_DATA='PAYMENT_DETAILS'),
	(SELECT PREAMP_ID FROM PRE_AUDIT_MAIN_PROFILE WHERE PREAMP_DATA='PAYMENT'),DURATION,@REJECTION_COUNT,RENTAL_USERSTAMP);
	SET FOREIGN_KEY_CHECKS=1;
	DROP TABLE IF EXISTS TEMP_RENTAL_SCDB_FORMAT;
	DROP TABLE IF EXISTS TEMP_RENTAL_CUSTOMER;
	DROP TABLE IF EXISTS TEMP_PAYMENT_DETAILS;
	DROP TABLE IF EXISTS TEMP_PAYMENT_DETAILS_UPDATE_RECORD_VERSION;
	DROP TABLE IF EXISTS TEMP_CUSTOMER_ENTRY_DETAILS;
	DROP TABLE IF EXISTS TEMP_CUSTOMER_TERMINATION_DETAILS;
END;


CALL SP_MIG_PAYMENT_INSERT('safi@gmail.com');