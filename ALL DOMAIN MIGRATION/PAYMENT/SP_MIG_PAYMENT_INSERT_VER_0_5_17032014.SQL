-- version:0.5 -- sdate:17/03/2014 -- edate:17/03/2014 -- issue:765 --desc:droped temp table --doneby:RL
--version:0.4 --sdate:26/02/2014 --edate:26/02/2014 --issue:750 --desc:userstamp changed as uld_id --done by:RL
--version:0.3 --sdate:20/02/2014 --edate:20/02/2014 --issue:594 --comment:104 --done by:DHIVYA
--version:0.2 --sdate:24/01/2014 --edate:30/01/2014 --issue:594 --desc:changed migration.rental_scdb_format as rental_scdb_format n update rec version --doneby:RL
--SP FOR CREATE TEMP_RENTAL_SCDB_FORMAT TABLE
DROP PROCEDURE IF EXISTS SP_TEMP_RENTAL_SCDB_FORMAT_INSERT;
CREATE PROCEDURE SP_TEMP_RENTAL_SCDB_FORMAT_INSERT()
BEGIN
--QUERY FOR CREATE TEMP TABLE
	DROP TABLE IF EXISTS TEMP_RENTAL_SCDB_FORMAT;
	CREATE TABLE TEMP_RENTAL_SCDB_FORMAT LIKE RENTAL_SCDB_FORMAT;
--INSERT QUERY  TEMP TABLE
	INSERT INTO TEMP_RENTAL_SCDB_FORMAT SELECT * FROM RENTAL_SCDB_FORMAT;
--ALTER QUERY FOR TEMP_RENTAL_SCDB_FORMAT TABLE
	ALTER TABLE TEMP_RENTAL_SCDB_FORMAT ADD COLUMN RD_AMOUNT VARCHAR(255) NULL;
	ALTER TABLE TEMP_RENTAL_SCDB_FORMAT ADD COLUMN RPP_ID VARCHAR(255) NULL;
--UPDATE QUERY FOR TEMP_RENTAL_SCDB_FORMAT
	UPDATE TEMP_RENTAL_SCDB_FORMAT SET 
	RD_AMOUNT = CONCAT(IFNULL(RENTAL_DEPOSIT, ''), ' ', IFNULL(RENTAL_DEPOSIT_REFUND, ''), ' ', 
	IFNULL(RENTAL_AMOUNT, ''), ' ', IFNULL(RENTAL_PROCESSING_FEE, ''), ' ', IFNULL(RENTAL_CLEANING_FEE, ''));
	UPDATE TEMP_RENTAL_SCDB_FORMAT SET RPP_ID=1 WHERE RENTAL_AMOUNT IS NOT NULL;
	UPDATE TEMP_RENTAL_SCDB_FORMAT SET RPP_ID=2 WHERE RENTAL_DEPOSIT IS NOT NULL;
	UPDATE TEMP_RENTAL_SCDB_FORMAT SET RPP_ID=3 WHERE RENTAL_PROCESSING_FEE IS NOT NULL;
	UPDATE TEMP_RENTAL_SCDB_FORMAT SET RPP_ID=4 WHERE RENTAL_CLEANING_FEE IS NOT NULL;
	UPDATE TEMP_RENTAL_SCDB_FORMAT SET RPP_ID=5 WHERE RENTAL_DEPOSIT_REFUND IS NOT NULL;
	UPDATE TEMP_RENTAL_SCDB_FORMAT SET RENTAL_CUSTOMER='CHARLES AND JOANNA' WHERE RENTAL_CUSTOMER='CHARLES ANDJOANNA';
END;

--SP FOR CREATE TEMP_RENTAL_CUSTOMER TABLE
DROP PROCEDURE IF EXISTS TEMP_RENTAL_CUSTOMER_INSERT;
CREATE PROCEDURE TEMP_RENTAL_CUSTOMER_INSERT()
BEGIN
--QUERY FOR CREATE TEMP TABLE
	DROP TABLE IF EXISTS TEMP_RENTAL_CUSTOMER;
	CREATE TABLE TEMP_RENTAL_CUSTOMER(ID INTEGER NOT NULL AUTO_INCREMENT,CUST_ID INTEGER,CUSTOMER_NAME CHAR(100),
	UNITNO INTEGER,PRIMARY KEY(ID));
--INSERT QUERY TEMP TABLE
	INSERT INTO TEMP_RENTAL_CUSTOMER(CUST_ID,CUSTOMER_NAME,UNITNO)
	SELECT CC_CUST_ID,IF(CC_FIRST_NAME=CC_LAST_NAME,CC_FIRST_NAME, CONCAT(CC_FIRST_NAME,'_',CC_LAST_NAME)),CC_UNIT_NO FROM TEMP_CUSTOMER_SCDB_FORMAT;
	UPDATE TEMP_RENTAL_CUSTOMER SET CUSTOMER_NAME='MAN_MAN' WHERE CUSTOMER_NAME='MAN' AND UNITNO=3906; 
END;

--SP FOR CREATE TEMP_PAYMENT_DETAILS TABLE
DROP PROCEDURE IF EXISTS SP_TEMP_PAYMENT_DETAILS_INSERT;
CREATE PROCEDURE SP_TEMP_PAYMENT_DETAILS_INSERT()
BEGIN
--VARIABLE DECLARATION
	DECLARE DONE INT DEFAULT FALSE;
	DECLARE CUSTOMERNAME CHAR(100);
	DECLARE UNIT_NUMBER INTEGER;
	DECLARE FORPERIOD DATE;
	DECLARE PAIDDATE DATE;
	DECLARE RPPID INTEGER;
	DECLARE RDAMOUNT DECIMAL(7,2);
	DECLARE COMMENTS TEXT;
	DECLARE USER_STAMP VARCHAR(50);
	DECLARE CUSTID INTEGER;
	DECLARE RENTALID INTEGER;
	DECLARE FORPERIOD_MONTH INTEGER;
	DECLARE FORPERIOD_YEAR INTEGER;
	DECLARE FORPERIOD_DATE INTEGER;
	DECLARE FORPERIODDATE DATE;
	DECLARE RTIMESTAMP VARCHAR(50);
	DECLARE FILTER_CURSOR CURSOR FOR 
	SELECT RENTAL_ID,RENTAL_CUSTOMER, RENTAL_UNIT, RENTAL_FOR_PERIOD, RENTAL_PAID_DATE,  RPP_ID, RD_AMOUNT,RENTAL_COMMENTS,USERSTAMP,TIMESTAMP FROM TEMP_RENTAL_SCDB_FORMAT;
	DECLARE CONTINUE HANDLER FOR NOT FOUND SET DONE = TRUE;
	OPEN FILTER_CURSOR;
--QUERY FOR CREATE TEMP_PAYMENT_DETAILS TABLE
	DROP TABLE IF EXISTS TEMP_PAYMENT_DETAILS;
	CREATE TABLE TEMP_PAYMENT_DETAILS(
	PD_ID INTEGER NOT NULL AUTO_INCREMENT,
	UNIT_ID	INTEGER NOT NULL,
	CUSTOMER_ID	INTEGER NOT NULL,
	PP_ID INTEGER NOT NULL,
	CED_REC_VER	INTEGER NULL,
	PD_AMOUNT DECIMAL(7,2) NOT NULL,
	PD_FOR_PERIOD DATE NOT NULL,
	PD_PAID_DATE DATE NOT NULL,
	PD_HIGHLIGHT_FLAG CHAR(1) NULL,
	PD_COMMENTS	TEXT NULL,
	PD_USERSTAMP VARCHAR(50) NOT NULL,
	PD_TIMESTAMP VARCHAR(50) NOT NULL,
	PRIMARY KEY(PD_ID),
	FOREIGN KEY(UNIT_ID) REFERENCES UNIT (UNIT_ID),
	FOREIGN KEY(CUSTOMER_ID) REFERENCES CUSTOMER (CUSTOMER_ID),
	FOREIGN KEY(PP_ID) REFERENCES PAYMENT_PROFILE (PP_ID));
	read_loop: LOOP
		FETCH FILTER_CURSOR INTO RENTALID, CUSTOMERNAME, UNIT_NUMBER, FORPERIOD, PAIDDATE,  RPPID, RDAMOUNT,
		COMMENTS, USER_STAMP, RTIMESTAMP;
		IF DONE THEN
			LEAVE read_loop;
		END IF;
--QUERY FOR SET VALUES
		SET FORPERIOD_MONTH = (SELECT MONTH(FORPERIOD));
		SET FORPERIOD_YEAR = (SELECT YEAR(FORPERIOD));
		SET FORPERIOD_DATE = (SELECT DAY(FORPERIOD));
		SET CUSTID = (SELECT DISTINCT(CUST_ID) FROM TEMP_RENTAL_CUSTOMER WHERE CUSTOMER_NAME=CUSTOMERNAME AND UNITNO=UNIT_NUMBER);
		IF (FORPERIOD_DATE!=1)THEN
			IF(LENGTH(FORPERIOD_MONTH>1))THEN
				SET FORPERIODDATE = (SELECT CONCAT(FORPERIOD_YEAR,'-',FORPERIOD_MONTH,'-','01'));
			ELSE
				SET FORPERIODDATE = (SELECT CONCAT(FORPERIOD_YEAR,'-','0',FORPERIOD_MONTH,'-','01'));
			END IF;
--INSERT QUERY TEMP_PAYMENT_DETAILS TABLE
			SET FOREIGN_KEY_CHECKS=0;	
			INSERT INTO TEMP_PAYMENT_DETAILS(UNIT_ID,CUSTOMER_ID,PP_ID,PD_AMOUNT,PD_FOR_PERIOD,PD_PAID_DATE,PD_COMMENTS,PD_USERSTAMP,PD_TIMESTAMP)
			SELECT (SELECT UNIT_ID FROM UNIT WHERE UNIT_NO=UNIT_NUMBER), CUSTID ,RPPID,  RDAMOUNT, FORPERIODDATE, 
			PAIDDATE, COMMENTS, USER_STAMP ,RTIMESTAMP;
		ELSE 
--INSERT QUERY TEMP_PAYMENT_DETAILS TABLE
			SET FOREIGN_KEY_CHECKS=0;
			INSERT INTO TEMP_PAYMENT_DETAILS(UNIT_ID,CUSTOMER_ID,PP_ID,PD_AMOUNT,PD_FOR_PERIOD,PD_PAID_DATE,PD_COMMENTS,PD_USERSTAMP,PD_TIMESTAMP)
			SELECT (SELECT UNIT_ID FROM UNIT WHERE UNIT_NO=UNIT_NUMBER), CUSTID ,RPPID,  RDAMOUNT, FORPERIOD, 
			PAIDDATE, COMMENTS, USER_STAMP, RTIMESTAMP;
		END IF;
	END LOOP;
	CLOSE FILTER_CURSOR;
END;

--CREATE SP FOR UPDATE RECVERSION IN TEMP_PAYMENT_DETAILS TABLE
DROP PROCEDURE IF EXISTS SP_TEMP_PAYMENT_DETAILS_UPDATE_RECORD_VERSION;
CREATE PROCEDURE SP_TEMP_PAYMENT_DETAILS_UPDATE_RECORD_VERSION()
BEGIN
	DECLARE MIN_PDID INTEGER;
	DECLARE MAX_PDID INTEGER;
	DECLARE MIN_TPDURV_ID INTEGER;
	DECLARE MAX_TPDURV_ID INTEGER;
	DECLARE FORPERIOD_MONTH INTEGER;
	DECLARE FORPERIOD_YEAR INTEGER;
	DECLARE ENDDATE DATE;
	DECLARE STARTDATE_MONTH INTEGER;
	DECLARE STARTDATE_LENGTH INTEGER;
	DECLARE STARTDATE_YEAR INTEGER;
	DECLARE STARTDATE DATE;
	DECLARE FORPERIOD DATE;
	DECLARE CURRENT_STARTDATE_MONTH INTEGER;
	DECLARE CURRENT_STARTDATE_YEAR INTEGER;
	DECLARE CURRENT_ENDDATE_MONTH INTEGER;
	DECLARE CURRENT_ENDDATE_YEAR INTEGER;
	DECLARE CURRENT_SDATE_MONTH_YEAR TEXT;
	DECLARE PREVIOUS_REC_ENDDATE_MONTH INTEGER;
	DECLARE PREVIOUS_REC_ENDDATE_YEAR INTEGER;
	DECLARE PREVIOUS_REC_ENDDATE_MONTH_YEAR TEXT;
	DECLARE REC_VER INTEGER;
--QUERY FOR SET VALUES
	SET MIN_PDID = (SELECT MIN(PD_ID) FROM TEMP_PAYMENT_DETAILS);
	SET MAX_PDID = (SELECT MAX(PD_ID) FROM TEMP_PAYMENT_DETAILS);
	WHILE(MIN_PDID<=MAX_PDID)DO
		SET FORPERIOD = (SELECT PD_FOR_PERIOD FROM TEMP_PAYMENT_DETAILS WHERE PD_ID=MIN_PDID);
--QUERY FOR CREATE TEMP TABLE    
		DROP TABLE IF EXISTS TEMP_PAYMENT_DETAILS_UPDATE_RECORD_VERSION;
		CREATE TABLE TEMP_PAYMENT_DETAILS_UPDATE_RECORD_VERSION(TPDURV_ID INTEGER AUTO_INCREMENT,TPDURV_CUSTID INTEGER,
		TPDURV_RECVER INTEGER,TPDURV_STARTDATE DATE,TPDURV_ENDDATE DATE,TPDURV_PTDDATE DATE,TPDURV_RECHECKINFLAG
		CHAR(1),PRIMARY KEY(TPDURV_ID));
--INSERT QUERY FOR TEMP_PAYMENT_DETAILS_UPDATE_RECORD_VERSION
		INSERT INTO TEMP_PAYMENT_DETAILS_UPDATE_RECORD_VERSION(TPDURV_CUSTID,TPDURV_RECVER,TPDURV_STARTDATE,TPDURV_ENDDATE,TPDURV_PTDDATE,TPDURV_RECHECKINFLAG)
		SELECT TCED.CUSTOMER_ID,TCED.CED_REC_VER,TCED.CED_STARTDATE,TCED.CED_ENDDATE,TCED.CED_PRETERMINATE_DATE,TCED.CED_RECHECKIN FROM 
		TEMP_CUSTOMER_ENTRY_DETAILS TCED WHERE TCED.CUSTOMER_ID=(SELECT CUSTOMER_ID FROM TEMP_PAYMENT_DETAILS WHERE PD_ID=MIN_PDID)AND
		TCED.UNIT_ID=(SELECT UNIT_ID FROM TEMP_PAYMENT_DETAILS WHERE PD_ID=MIN_PDID)
		AND IF(TCED.CED_PRETERMINATE_DATE IS NOT NULL,TCED.CED_PRETERMINATE_DATE>TCED.CED_STARTDATE,TCED.CED_ENDDATE>TCED.CED_STARTDATE) ;
--QUERY FOR SET VALUES    
		SET MIN_TPDURV_ID = (SELECT MIN(TPDURV_ID) FROM TEMP_PAYMENT_DETAILS_UPDATE_RECORD_VERSION);
		SET MAX_TPDURV_ID = (SELECT MAX(TPDURV_ID) FROM TEMP_PAYMENT_DETAILS_UPDATE_RECORD_VERSION);
		WHILE(MIN_TPDURV_ID<=MAX_TPDURV_ID)DO
			IF EXISTS(SELECT TPDURV_PTDDATE FROM TEMP_PAYMENT_DETAILS_UPDATE_RECORD_VERSION WHERE TPDURV_ID=MIN_TPDURV_ID AND TPDURV_PTDDATE IS NOT NULL)THEN
--QUERY FOR SET VALUES    
				SET ENDDATE = (SELECT TPDURV_PTDDATE FROM TEMP_PAYMENT_DETAILS_UPDATE_RECORD_VERSION WHERE TPDURV_ID=MIN_TPDURV_ID);
			ELSE
				SET ENDDATE = (SELECT TPDURV_ENDDATE FROM TEMP_PAYMENT_DETAILS_UPDATE_RECORD_VERSION WHERE TPDURV_ID=MIN_TPDURV_ID);
			END IF;
--QUERY FOR SET VALUES    
			SET STARTDATE_LENGTH = (SELECT LENGTH(TPDURV_STARTDATE) FROM TEMP_PAYMENT_DETAILS_UPDATE_RECORD_VERSION WHERE TPDURV_ID=MIN_TPDURV_ID);
			SET STARTDATE_MONTH = (SELECT MONTH(TPDURV_STARTDATE) FROM TEMP_PAYMENT_DETAILS_UPDATE_RECORD_VERSION WHERE TPDURV_ID=MIN_TPDURV_ID);
			SET STARTDATE_YEAR = (SELECT YEAR(TPDURV_STARTDATE) FROM TEMP_PAYMENT_DETAILS_UPDATE_RECORD_VERSION WHERE TPDURV_ID=MIN_TPDURV_ID);
			IF(STARTDATE_LENGTH=1) THEN
--QUERY FOR SET VALUES     
				SET STARTDATE=(SELECT CONCAT((SELECT YEAR(TPDURV_STARTDATE) FROM TEMP_PAYMENT_DETAILS_UPDATE_RECORD_VERSION WHERE 
				TPDURV_ID=MIN_TPDURV_ID),'-','0',(SELECT MONTH(TPDURV_STARTDATE) FROM TEMP_PAYMENT_DETAILS_UPDATE_RECORD_VERSION WHERE
				TPDURV_ID=MIN_TPDURV_ID),'-','01'));
			ELSE
				SET STARTDATE=(SELECT CONCAT((SELECT YEAR(TPDURV_STARTDATE) FROM TEMP_PAYMENT_DETAILS_UPDATE_RECORD_VERSION WHERE 
				TPDURV_ID=MIN_TPDURV_ID),'-',(SELECT MONTH(TPDURV_STARTDATE) FROM TEMP_PAYMENT_DETAILS_UPDATE_RECORD_VERSION WHERE
				TPDURV_ID=MIN_TPDURV_ID),'-','01'));
			END IF; 
--QUERY FOR SET VALUES	FOR CURRENT STARTDATE MONTH AND YEAR
			SET CURRENT_STARTDATE_MONTH = (SELECT MONTH(TPDURV_STARTDATE) FROM TEMP_PAYMENT_DETAILS_UPDATE_RECORD_VERSION WHERE TPDURV_ID=MIN_TPDURV_ID);
			SET CURRENT_STARTDATE_YEAR = (SELECT YEAR(TPDURV_STARTDATE) FROM TEMP_PAYMENT_DETAILS_UPDATE_RECORD_VERSION WHERE TPDURV_ID=MIN_TPDURV_ID);
			IF EXISTS(SELECT TPDURV_PTDDATE FROM TEMP_PAYMENT_DETAILS_UPDATE_RECORD_VERSION WHERE TPDURV_ID=MIN_TPDURV_ID AND TPDURV_PTDDATE IS NOT NULL)THEN
                SET CURRENT_ENDDATE_MONTH = (SELECT MONTH(TPDURV_PTDDATE) FROM TEMP_PAYMENT_DETAILS_UPDATE_RECORD_VERSION WHERE TPDURV_ID=MIN_TPDURV_ID);
				SET CURRENT_ENDDATE_YEAR = (SELECT YEAR(TPDURV_PTDDATE) FROM TEMP_PAYMENT_DETAILS_UPDATE_RECORD_VERSION WHERE TPDURV_ID=MIN_TPDURV_ID);
            ELSE
                SET CURRENT_ENDDATE_MONTH = (SELECT MONTH(TPDURV_ENDDATE) FROM TEMP_PAYMENT_DETAILS_UPDATE_RECORD_VERSION WHERE TPDURV_ID=MIN_TPDURV_ID);
				SET CURRENT_ENDDATE_YEAR = (SELECT YEAR(TPDURV_ENDDATE) FROM TEMP_PAYMENT_DETAILS_UPDATE_RECORD_VERSION WHERE TPDURV_ID=MIN_TPDURV_ID);
            END IF;
			SET CURRENT_SDATE_MONTH_YEAR = (SELECT CONCAT(CURRENT_STARTDATE_MONTH,'-',CURRENT_STARTDATE_YEAR));
--QUERY FOR UPDATE RECVER FOR RECHEKIN CUSTOMER
			IF EXISTS(SELECT TPDURV_RECHECKINFLAG FROM TEMP_PAYMENT_DETAILS_UPDATE_RECORD_VERSION WHERE TPDURV_ID=MIN_TPDURV_ID AND TPDURV_RECHECKINFLAG IS NOT NULL)THEN
--QUERY FOR SET VALUES	FOR PREVIOUS RECORD ENDDATE MONTH AND YEAR	
				IF EXISTS(SELECT TPDURV_PTDDATE FROM TEMP_PAYMENT_DETAILS_UPDATE_RECORD_VERSION WHERE TPDURV_ID=MIN_TPDURV_ID AND TPDURV_PTDDATE IS NOT NULL AND TPDURV_ID-1)THEN
					SET PREVIOUS_REC_ENDDATE_MONTH = (SELECT MONTH(TPDURV_PTDDATE) FROM TEMP_PAYMENT_DETAILS_UPDATE_RECORD_VERSION WHERE TPDURV_ID=MIN_TPDURV_ID AND TPDURV_ID-1);
					SET PREVIOUS_REC_ENDDATE_YEAR = (SELECT YEAR(TPDURV_PTDDATE) FROM TEMP_PAYMENT_DETAILS_UPDATE_RECORD_VERSION WHERE TPDURV_ID=MIN_TPDURV_ID AND TPDURV_ID-1);
				ELSE
					SET PREVIOUS_REC_ENDDATE_MONTH = (SELECT MONTH(TPDURV_ENDDATE) FROM TEMP_PAYMENT_DETAILS_UPDATE_RECORD_VERSION WHERE TPDURV_ID=MIN_TPDURV_ID AND TPDURV_ID-1);
					SET PREVIOUS_REC_ENDDATE_YEAR = (SELECT YEAR(TPDURV_ENDDATE) FROM TEMP_PAYMENT_DETAILS_UPDATE_RECORD_VERSION WHERE TPDURV_ID=MIN_TPDURV_ID AND TPDURV_ID-1);
				END IF;
			SET PREVIOUS_REC_ENDDATE_MONTH_YEAR = (SELECT CONCAT(PREVIOUS_REC_ENDDATE_MONTH,'-',PREVIOUS_REC_ENDDATE_YEAR));
				IF(CURRENT_SDATE_MONTH_YEAR=PREVIOUS_REC_ENDDATE_MONTH_YEAR)THEN
					SET REC_VER = (SELECT TPDURV_RECVER FROM TEMP_PAYMENT_DETAILS_UPDATE_RECORD_VERSION WHERE 
					TPDURV_ID=MIN_TPDURV_ID);
					UPDATE TEMP_PAYMENT_DETAILS SET CED_REC_VER=REC_VER-1 WHERE (PD_ID=MIN_PDID-1 AND PP_ID=1);
				END IF;
			END IF;
--UPDATE QUERY FOR TEMP_PAYMENT_DETAILS    
			IF(FORPERIOD BETWEEN STARTDATE AND ENDDATE)THEN
				UPDATE TEMP_PAYMENT_DETAILS SET CED_REC_VER=(SELECT TPDURV_RECVER FROM TEMP_PAYMENT_DETAILS_UPDATE_RECORD_VERSION WHERE 
				TPDURV_ID=MIN_TPDURV_ID)WHERE PD_ID=MIN_PDID;
			END IF;
		SET MIN_TPDURV_ID=MIN_TPDURV_ID+1;
		END WHILE;
	SET MIN_PDID=MIN_PDID+1;
	END WHILE;
END;

--FINAL PAYMENT SP
DROP PROCEDURE IF EXISTS SP_MIG_PAYMENT_INSERT;
CREATE PROCEDURE SP_MIG_PAYMENT_INSERT(IN RENTAL_USERSTAMP VARCHAR(100))
BEGIN
	DECLARE STARTTIME TIME;
	DECLARE ENDTIME TIME;
	DECLARE DURATION TIME;
	SET STARTTIME = (SELECT CURTIME());
	SET FOREIGN_KEY_CHECKS=0;
	CALL TEMP_RENTAL_CUSTOMER_INSERT();
	CALL SP_TEMP_RENTAL_SCDB_FORMAT_INSERT();
	CALL SP_TEMP_PAYMENT_DETAILS_INSERT();
	CALL SP_TEMP_PAYMENT_DETAILS_UPDATE_RECORD_VERSION();
--QUERY FOR CREATE PAYMENT_DETAILS TABLE
	DROP TABLE IF EXISTS PAYMENT_DETAILS;
	CREATE TABLE PAYMENT_DETAILS(
	PD_ID INTEGER NOT NULL AUTO_INCREMENT,
	UNIT_ID	INTEGER NOT NULL,
	CUSTOMER_ID	INTEGER NOT NULL,
	PP_ID INTEGER NOT NULL,
	CED_REC_VER	INTEGER NOT NULL,
	PD_AMOUNT DECIMAL(7,2) NOT NULL,
	PD_FOR_PERIOD DATE NOT NULL,
	PD_PAID_DATE DATE NOT NULL,
	PD_HIGHLIGHT_FLAG CHAR(1) NULL,
	PD_COMMENTS	TEXT NULL,
	ULD_ID INTEGER(2) NOT NULL,
	PD_TIMESTAMP TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
	PRIMARY KEY(PD_ID),
	FOREIGN KEY(UNIT_ID) REFERENCES UNIT (UNIT_ID),
	FOREIGN KEY(CUSTOMER_ID) REFERENCES CUSTOMER (CUSTOMER_ID),
	FOREIGN KEY(PP_ID) REFERENCES PAYMENT_PROFILE (PP_ID),
	FOREIGN KEY(ULD_ID) REFERENCES USER_LOGIN_DETAILS (ULD_ID));
--QUERY FOR INSERT PAYMENT_DETAILS TABLE	
	INSERT INTO PAYMENT_DETAILS (UNIT_ID , CUSTOMER_ID, PP_ID,CED_REC_VER,PD_AMOUNT,PD_FOR_PERIOD,PD_PAID_DATE,PD_HIGHLIGHT_FLAG,
	PD_COMMENTS,ULD_ID,PD_TIMESTAMP) (SELECT T.UNIT_ID , T.CUSTOMER_ID, T.PP_ID,T.CED_REC_VER,T.PD_AMOUNT,T.PD_FOR_PERIOD,T.PD_PAID_DATE,T.PD_HIGHLIGHT_FLAG,
	T.PD_COMMENTS,ULD.ULD_ID,T.PD_TIMESTAMP FROM TEMP_PAYMENT_DETAILS T,USER_LOGIN_DETAILS ULD WHERE
	ULD.ULD_LOGINID=T.PD_USERSTAMP);
--QUERY FOR DROP ALL TEMP TABLE
	SET ENDTIME = (SELECT CURTIME());
	SET DURATION=(SELECT TIMEDIFF(ENDTIME,STARTTIME));
	SET @COUNT_SCDB_RENTAL=(SELECT COUNT(*) FROM RENTAL_SCDB_FORMAT);
	SET @COUNT_SPLITTED_RENTAL=(SELECT COUNT(*) FROM PAYMENT_DETAILS);
	SET @REJECTION_COUNT=(@COUNT_SCDB_RENTAL-@COUNT_SPLITTED_RENTAL);
--QUERY FOR UPDATE PRE_AUDIT_SUB_PROFILE TABLE
	UPDATE PRE_AUDIT_SUB_PROFILE SET PREASP_NO_OF_REC=@COUNT_SCDB_RENTAL WHERE PREASP_DATA='PAYMENT_DETAILS';
--QUERY FOR INSERT POST_AUDIT_HISTORY TABLE
	INSERT INTO POST_AUDIT_HISTORY(POSTAP_ID,POSTAH_NO_OF_REC,PREASP_ID,PREAMP_ID,POSTAH_DURATION,POSTAH_NO_OF_REJ,POSTAH_USERSTAMP)
	VALUES((SELECT POSTAP_ID FROM POST_AUDIT_PROFILE WHERE POSTAP_DATA='PAYMENT_DETAILS'),@COUNT_SPLITTED_RENTAL,(SELECT PREASP_ID FROM PRE_AUDIT_SUB_PROFILE WHERE PREASP_DATA='PAYMENT_DETAILS'),
	(SELECT PREAMP_ID FROM PRE_AUDIT_MAIN_PROFILE WHERE PREAMP_DATA='PAYMENT'),DURATION,@REJECTION_COUNT,RENTAL_USERSTAMP);
	SET FOREIGN_KEY_CHECKS=1;
	DROP TABLE IF EXISTS TEMP_RENTAL_SCDB_FORMAT;
	DROP TABLE IF EXISTS TEMP_RENTAL_CUSTOMER;
	DROP TABLE IF EXISTS TEMP_PAYMENT_DETAILS;
	DROP TABLE IF EXISTS TEMP_PAYMENT_DETAILS_UPDATE_RECORD_VERSION;
	DROP TABLE IF EXISTS TEMP_CUSTOMER_ENTRY_DETAILS;
	DROP TABLE IF EXISTS TEMP_CUSTOMER_TERMINATION_DETAILS;
END;


CALL SP_MIG_PAYMENT_INSERT('safi@gmail.com');