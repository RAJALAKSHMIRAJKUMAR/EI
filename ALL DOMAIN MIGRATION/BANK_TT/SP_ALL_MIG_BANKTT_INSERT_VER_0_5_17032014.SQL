-- version:0.5 -- sdate:17/03/2014 -- edate:17/03/2014 -- issue:765 --desc:droped temp table --doneby:RL
 --version:0.4 --sdate:25/02/2014 --edate:26/02/2014 --issue:750 COMMENT :#30 -desc:CHANGED TIMESTAMP AS SOURCE TIMESTAMP & ALTERED USERSTAMP COLUMN AS ULD_ID done by:dhivya


--ALL BANK TT DOMAIN SPLITED TABLE INSERT QUEREIS
DROP PROCEDURE IF EXISTS SP_TEMP_MIG_BANK_TRANSFER;
CREATE PROCEDURE SP_TEMP_MIG_BANK_TRANSFER(IN BANKTT_USERSTAMP VARCHAR(100))
BEGIN
DECLARE START_TIME TIME;
DECLARE END_TIME TIME;
DECLARE DURATION TIME;
DECLARE EXIT HANDLER FOR SQLEXCEPTION
BEGIN
ROLLBACK;
END;
START TRANSACTION;
SET START_TIME=(SELECT CURTIME());
DROP TABLE IF EXISTS BANK_TRANSFER_MODELS;
CREATE TABLE BANK_TRANSFER_MODELS(
BTM_ID INTEGER NOT NULL	AUTO_INCREMENT,
BTM_DATA VARCHAR(50) NOT NULL,
BTM_OBSOLETE CHAR(1),
ULD_ID INT(2) NOT NULL,	
BTM_TIMESTAMP TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
PRIMARY KEY(BTM_ID),
FOREIGN KEY(ULD_ID) REFERENCES USER_LOGIN_DETAILS(ULD_ID));
--INSERT QUERY FOR BANK_TRANSFER_MODELS
INSERT INTO BANK_TRANSFER_MODELS(ULD_ID,BTM_ID, BTM_DATA) 
SELECT ULD.ULD_ID,M.BTM_ID,M.BTM_DATA FROM MIG_BANK_TRANSFER_MODELS M,USER_LOGIN_DETAILS ULD WHERE ULD.ULD_LOGINID=M.BTM_USERSTAMP;
SET END_TIME=(SELECT CURTIME());
SET DURATION=(SELECT TIMEDIFF(END_TIME,START_TIME));
SET @COUNT_SCDB_BTM=(SELECT COUNT(*) FROM MIG_BANK_TRANSFER_MODELS);
SET @COUNT_SPLITTED_BTM=(SELECT COUNT(*) FROM BANK_TRANSFER_MODELS);
SET @REJECTION_COUNT=(@COUNT_SCDB_BTM-@COUNT_SPLITTED_BTM);
UPDATE PRE_AUDIT_SUB_PROFILE SET PREASP_NO_OF_REC=@COUNT_SCDB_BTM WHERE PREASP_DATA='BANK_TRANSFER_MODELS';
INSERT INTO POST_AUDIT_HISTORY(POSTAP_ID,POSTAH_NO_OF_REC,PREASP_ID,PREAMP_ID,POSTAH_DURATION,POSTAH_NO_OF_REJ,POSTAH_USERSTAMP)
VALUES((SELECT POSTAP_ID FROM POST_AUDIT_PROFILE WHERE POSTAP_DATA='BANK_TRANSFER_MODELS'),@COUNT_SPLITTED_BTM,(SELECT PREASP_ID FROM PRE_AUDIT_SUB_PROFILE WHERE PREASP_DATA='BANK_TRANSFER_MODELS'),
(SELECT PREAMP_ID FROM PRE_AUDIT_MAIN_PROFILE WHERE PREAMP_DATA='BANKTT'),DURATION,@REJECTION_COUNT,BANKTT_USERSTAMP);
		
		
--TEMP TABLE FOR MIG_BANK_TRANSFER
DROP TABLE IF EXISTS TEMP_MIG_BANK_TRANSFER;
CREATE TABLE TEMP_MIG_BANK_TRANSFER LIKE MIG_BANK_TRANSFER;
INSERT INTO TEMP_MIG_BANK_TRANSFER SELECT * FROM MIG_BANK_TRANSFER;
--THESE CUSTOMERS R UNIT OWNERS
DELETE FROM TEMP_MIG_BANK_TRANSFER WHERE BT_CUSTOMER='MAUNG KHIN MAUNG WIN' OR BT_CUSTOMER='RIN NAN YOONG' OR BT_CUSTOMER='LEONG KIAN SHIANG';

UPDATE TEMP_MIG_BANK_TRANSFER SET BT_CUSTOMER='ALI' WHERE BT_CUSTOMER='Ali Yilmaz';
UPDATE TEMP_MIG_BANK_TRANSFER SET BT_CUSTOMER='HANA' WHERE BT_CUSTOMER='JOO HANA';
UPDATE TEMP_MIG_BANK_TRANSFER SET BT_CUSTOMER='YANIV' WHERE BT_CUSTOMER='Yaniv Goder';
UPDATE TEMP_MIG_BANK_TRANSFER SET BT_CUSTOMER='VICKY CULLEN' WHERE BT_CUSTOMER='YANG MING';
UPDATE TEMP_MIG_BANK_TRANSFER SET BT_CUSTOMER='DAIMLER MARI OGASA' WHERE BT_CUSTOMER='mari ogasa';
UPDATE TEMP_MIG_BANK_TRANSFER SET BT_CUSTOMER='ZUBIN' WHERE BT_CUSTOMER='Navin C. Sharma and Pamela Morin';
UPDATE TEMP_MIG_BANK_TRANSFER SET BT_CUSTOMER='BEN' WHERE BT_CUSTOMER='CENTAURI HOLDINGS LIMITED';
UPDATE TEMP_MIG_BANK_TRANSFER SET BT_CUSTOMER='SALMA' WHERE BT_CUSTOMER='SAIMA';
UPDATE TEMP_MIG_BANK_TRANSFER SET BT_CUSTOMER='AKIMA' WHERE BT_CUSTOMER='AKM PRINCIPAL INVESTMENTS Pte Ltd';
UPDATE TEMP_MIG_BANK_TRANSFER SET BT_CUSTOMER='DAVIS AND OLIVIA' WHERE BT_CUSTOMER='OLIVIA';
UPDATE TEMP_MIG_BANK_TRANSFER SET BT_CUSTOMER='BENJAMIN' WHERE BT_CUSTOMER='BENJAMIN AARON GILLENWATER';
UPDATE TEMP_MIG_BANK_TRANSFER SET BT_CUSTOMER='SILVIU BUSU' WHERE BT_CUSTOMER='ARISTOTEL SILVIU BUSU LUNCAR';
UPDATE TEMP_MIG_BANK_TRANSFER SET BT_CUSTOMER='JUNE WANG' WHERE BT_CUSTOMER='WANG JUNXIA';
UPDATE TEMP_MIG_BANK_TRANSFER SET BT_CUSTOMER='VALLARINO' WHERE BT_CUSTOMER='VITTORIO VALLARINO GANCIA';
UPDATE TEMP_MIG_BANK_TRANSFER SET BT_CUSTOMER='LILLIAN WONG' WHERE BT_CUSTOMER='LILLIAN CHIA LING WANG';
UPDATE TEMP_MIG_BANK_TRANSFER SET BT_CUSTOMER='MAN' WHERE BT_CUSTOMER='CHAN LAI MAN';
UPDATE TEMP_MIG_BANK_TRANSFER SET BT_CUSTOMER='YOKO' WHERE BT_CUSTOMER='PLENUS & MK PTE LTD';
UPDATE TEMP_MIG_BANK_TRANSFER SET BT_CUSTOMER='BW FLEET' WHERE BT_CUSTOMER='BW MARITIME PTE LTD';
UPDATE TEMP_MIG_BANK_TRANSFER SET BT_CUSTOMER='HAITHAM' WHERE BT_CUSTOMER='HAITHAM A H M ABDULKARIM';
UPDATE TEMP_MIG_BANK_TRANSFER SET BT_CUSTOMER='PONTUS' WHERE BT_CUSTOMER='SIGHTLINE VISION AB';
UPDATE TEMP_MIG_BANK_TRANSFER SET BT_CUSTOMER='FARHANA' WHERE BT_CUSTOMER='ALAN ZACHARY ANWAR';
UPDATE TEMP_MIG_BANK_TRANSFER SET BT_CUSTOMER='CATHERINE' WHERE BT_CUSTOMER='CAITLIN JEAN WONG';
UPDATE TEMP_MIG_BANK_TRANSFER SET BT_CUSTOMER='CHRIS' WHERE BT_CUSTOMER='CHRIS CHEN';
UPDATE TEMP_MIG_BANK_TRANSFER SET BT_CUSTOMER='ROSALIND CHU' WHERE BT_CUSTOMER='ROSALIND ANNETT CHU';
UPDATE TEMP_MIG_BANK_TRANSFER SET BT_CUSTOMER='MATTHIAS AND CAITILN TILP' WHERE BT_CUSTOMER='MATTHIAS AND CAITILN';
UPDATE TEMP_MIG_BANK_TRANSFER SET BT_CUSTOMER='LISA MAHTANI' WHERE BT_CUSTOMER='LISA';
UPDATE TEMP_MIG_BANK_TRANSFER SET BT_CUSTOMER='CHRISTO WIESE' WHERE BT_CUSTOMER='CHRISTO';
UPDATE TEMP_MIG_BANK_TRANSFER SET BT_CUSTOMER='ANDREJ DOBES' WHERE BT_CUSTOMER='ANDREJ';
UPDATE TEMP_MIG_BANK_TRANSFER SET BT_CUSTOMER='ALEXANDER BRUNOW' WHERE BT_CUSTOMER='ALEX BRUNOW';
UPDATE TEMP_MIG_BANK_TRANSFER SET BT_CUSTOMER='RICHARD  WAINWRIGHT' WHERE BT_CUSTOMER='RICHARD WAINWRIGHT';
UPDATE TEMP_MIG_BANK_TRANSFER SET BT_CUSTOMER='CIARON PATRICK MCKINLEY' WHERE BT_CUSTOMER='CIARON';
UPDATE TEMP_MIG_BANK_TRANSFER SET BT_CUSTOMER='EASON FANG ENHUA' WHERE BT_CUSTOMER='EASON';
UPDATE TEMP_MIG_BANK_TRANSFER SET BT_CUSTOMER='VENN ILIEV SALTIROV' WHERE BT_CUSTOMER='VENN';
UPDATE TEMP_MIG_BANK_TRANSFER SET BT_CUSTOMER='SHUBHAM CHANDRA' WHERE BT_CUSTOMER='SHUBHAM CHANDHRA';
UPDATE TEMP_MIG_BANK_TRANSFER SET BT_CUSTOMER='ELAINE PATERSON' WHERE BT_CUSTOMER='ELLEN PATERSON';

DROP TABLE IF EXISTS TEMP_BANK_TRANSFER;
CREATE TABLE TEMP_BANK_TRANSFER	(
BT_ID INTEGER NOT NULL,
BTCT_ID INTEGER NOT NULL, 
BTCB_ID INTEGER NOT NULL, 
BTS_ID INTEGER NOT NULL, 
BTT_ID TEXT NOT NULL,	
BT_DATE	DATE NOT NULL,	
BT_AMOUNT DECIMAL(7,2) NOT NULL,	
BT_ACC_NAME	VARCHAR(40),			
BT_ACC_NO VARCHAR(25),			
BT_BANK_CODE VARCHAR(4),			
BT_BRANCH_CODE VARCHAR(3),			
BT_BANK_ADDRESS VARCHAR(250),			
BT_SWIFT_CODE VARCHAR(12),			
BT_CUST_REF	VARCHAR(200),			
BT_INV_DETAILS TEXT,		
BT_DEBITED_ON DATE,			
BT_COMMENTS	TEXT,			
ULD_ID INTEGER(2) NOT NULL,	
BT_TIMESTAMP TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
PRIMARY KEY(BT_ID)

);
COMMIT;
END;


--CREATE QUERY FOR BANK_TRANSFER AND BANK_TRANSFER_STATUS_DETAILS
DROP PROCEDURE IF EXISTS SP_BANK_TRANSFER_TABLE;
CREATE PROCEDURE SP_BANK_TRANSFER_TABLE()
BEGIN
SET FOREIGN_KEY_CHECKS=0;
DROP TABLE IF EXISTS BANK_TRANSFER;
CREATE TABLE BANK_TRANSFER	(
BT_ID INTEGER NOT NULL AUTO_INCREMENT,
BTM_ID INTEGER,	
BT_DATE	DATE NOT NULL,	
BT_AMOUNT DECIMAL(7,2) NOT NULL,	
BT_ACC_NAME	VARCHAR(40),			
BT_ACC_NO VARCHAR(25),			
BT_BANK_CODE VARCHAR(4),			
BT_BRANCH_CODE VARCHAR(3),			
BT_BANK_ADDRESS VARCHAR(250),			
BT_SWIFT_CODE VARCHAR(12),			
BT_CUST_REF	VARCHAR(200),			
BT_INV_DETAILS TEXT,		
BT_DEBITED_ON DATE,			
BT_COMMENTS	TEXT,			
ULD_ID INT(2) NOT NULL,	
BT_TIMESTAMP TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
PRIMARY KEY(BT_ID),
FOREIGN KEY(ULD_ID) REFERENCES USER_LOGIN_DETAILS(ULD_ID));

DROP TABLE IF EXISTS BANK_TRANSFER_STATUS_DETAILS;
CREATE TABLE BANK_TRANSFER_STATUS_DETAILS(
BTSD_ID INTEGER NOT NULL AUTO_INCREMENT,
BT_ID INTEGER NOT NULL,
BCN_ID INTEGER NOT NULL,
CGN_ID INTEGER NOT NULL,
PRIMARY KEY(BTSD_ID),
FOREIGN KEY(BT_ID) REFERENCES BANK_TRANSFER(BT_ID),
FOREIGN KEY(BCN_ID) REFERENCES BANKTT_CONFIGURATION(BCN_ID),
FOREIGN KEY(CGN_ID) REFERENCES CONFIGURATION(CGN_ID));

SET FOREIGN_KEY_CHECKS=1;
END;

--INSERT QUERY FOR TEMP_BANK_TRANSFER
DROP PROCEDURE IF EXISTS SP_TEMP_BANK_TRANSFER;
CREATE PROCEDURE SP_TEMP_BANK_TRANSFER()
BEGIN
 DECLARE  DONE INT DEFAULT FALSE;
 DECLARE BTID INTEGER;
 DECLARE USERSTAMP VARCHAR(50);
 DECLARE BTCTID INTEGER;
 DECLARE BTCBID INTEGER;
 DECLARE BTSID INTEGER;
 DECLARE BTTID TEXT;
 DECLARE BTDATE DATE;
 DECLARE BTAMOUNT DECIMAL(7,2);
 DECLARE BTACCNAME VARCHAR(40);
 DECLARE BTACCNO VARCHAR(25);
 DECLARE BTBANKCODE VARCHAR(4);
 DECLARE BTBRANCHCODE VARCHAR(3);
 DECLARE BTBANKADDRESS TEXT;
 DECLARE BTSWIFTCODE VARCHAR(12);
 DECLARE BTCUSTREF VARCHAR(200);
 DECLARE BTINVDETAILS LONGTEXT;
 DECLARE BTDEBITEDON DATE;
 DECLARE BTCOMMENTS LONGTEXT;
 DECLARE BTTIMESTAMP TIMESTAMP;

DECLARE FILTER_CURSOR CURSOR FOR 
SELECT BT_SNO,BT_USER_STAMP, BTCT_ID, BTCB_ID, BTS_ID, BT_TRANSACTION_TYPE, BT_DATE, BT_AMOUNT, BT_ACC_NAME, BT_ACC_NO, BT_BANK_CODE,
BT_BRANCH_CODE, BT_BANK_ADDRESS, BT_SWIFT_CODE, BT_CUST_REF, BT_INV_DETAILS, BT_DEBITED_ON, BT_COMMENTS,BT_TIME_STAMP FROM TEMP_MIG_BANK_TRANSFER;
DECLARE CONTINUE HANDLER FOR NOT FOUND SET DONE = TRUE;

OPEN FILTER_CURSOR;

read_loop: LOOP
FETCH FILTER_CURSOR INTO BTID,USERSTAMP,BTCTID,BTCBID,BTSID,BTTID,BTDATE,BTAMOUNT,BTACCNAME,BTACCNO,BTBANKCODE,
BTBRANCHCODE,BTBANKADDRESS,BTSWIFTCODE,BTCUSTREF,BTINVDETAILS,BTDEBITEDON,BTCOMMENTS,BTTIMESTAMP;
IF DONE THEN
      LEAVE read_loop;
END IF;
	IF (BTTID='GIRO' OR BTTID='TT') THEN
		SET FOREIGN_KEY_CHECKS=0;
		INSERT INTO TEMP_BANK_TRANSFER(BT_ID,ULD_ID, BTCT_ID, BTCB_ID, BTS_ID, BTT_ID, BT_DATE, BT_AMOUNT, BT_ACC_NAME, BT_ACC_NO, BT_BANK_CODE, BT_BRANCH_CODE,
		BT_BANK_ADDRESS, BT_SWIFT_CODE, BT_CUST_REF, BT_INV_DETAILS, BT_DEBITED_ON, BT_COMMENTS,BT_TIMESTAMP)VALUES
		(BTID,(SELECT ULD_ID FROM USER_LOGIN_DETAILS WHERE ULD_LOGINID=USERSTAMP),BTCTID,BTCBID,BTSID,(SELECT BTT_ID FROM MIG_BANK_TRANSFER_TYPE WHERE BTT_DATA=BTTID),BTDATE,BTAMOUNT,BTACCNAME,BTACCNO,BTBANKCODE,BTBRANCHCODE,
		BTBANKADDRESS,BTSWIFTCODE,BTCUSTREF,BTINVDETAILS,BTDEBITEDON,BTCOMMENTS,BTTIMESTAMP);
	ELSE
	    SET FOREIGN_KEY_CHECKS=0;
		INSERT INTO TEMP_BANK_TRANSFER(BT_ID,ULD_ID, BTCT_ID, BTCB_ID, BTS_ID, BTT_ID, BT_DATE, BT_AMOUNT, BT_ACC_NAME, BT_ACC_NO, BT_BANK_CODE, BT_BRANCH_CODE,
		BT_BANK_ADDRESS, BT_SWIFT_CODE, BT_CUST_REF, BT_INV_DETAILS, BT_DEBITED_ON, BT_COMMENTS,BT_TIMESTAMP)VALUES
		(BTID,(SELECT ULD_ID FROM USER_LOGIN_DETAILS WHERE ULD_LOGINID=USERSTAMP),BTCTID,BTCBID,BTSID,(SELECT BTM_DATA FROM BANK_TRANSFER_MODELS WHERE BTM_ID=BTTID),BTDATE,BTAMOUNT,BTACCNAME,BTACCNO,BTBANKCODE,BTBRANCHCODE,
		BTBANKADDRESS,BTSWIFTCODE,BTCUSTREF,BTINVDETAILS,BTDEBITEDON,BTCOMMENTS,BTTIMESTAMP);
	END IF;

END LOOP;
CLOSE FILTER_CURSOR;
DROP TABLE IF EXISTS TEMP_BANKTT_TABLE;
CREATE TABLE TEMP_BANKTT_TABLE(SNO INTEGER AUTO_INCREMENT NOT NULL PRIMARY KEY,BT_ID INTEGER,BTT_DATA VARCHAR(50),BT_DATE DATE,BT_ACC_NO VARCHAR(25),BT_ACC_NAME VARCHAR(40),BT_AMOUNT DECIMAL(7,2),BTS_DATA VARCHAR(20),BT_DEBITED_ON DATE,BT_BANK_CODE VARCHAR(4),BT_BRANCH_CODE VARCHAR(4),BT_BANK_ADDRESS TEXT,BT_SWIFT_CODE VARCHAR(25),BTCT_DATA VARCHAR(20),BT_CUST_REF VARCHAR(50),BT_INV_DETAILS TEXT,BTCB_DATA VARCHAR(50),BT_COMMENTS TEXT,ULD_ID INTEGER,BT_TIMESTAMP TIMESTAMP);
INSERT INTO TEMP_BANKTT_TABLE(BT_ID,BTT_DATA,BT_DATE,BT_ACC_NO,BT_ACC_NAME,BT_AMOUNT,BTS_DATA,BT_DEBITED_ON,BT_BANK_CODE,BT_BRANCH_CODE,BT_BANK_ADDRESS,BT_SWIFT_CODE,BTCT_DATA,BT_CUST_REF,BT_INV_DETAILS,BTCB_DATA,BT_COMMENTS,ULD_ID,BT_TIMESTAMP) SELECT BT.BT_ID,BTT.BTT_DATA,BT.BT_DATE,BT.BT_ACC_NO,BT.BT_ACC_NAME,BT.BT_AMOUNT,BTS.BTS_DATA,BT.BT_DEBITED_ON,BT.BT_BANK_CODE,BT.BT_BRANCH_CODE,BT.BT_BANK_ADDRESS,BT.BT_SWIFT_CODE,BTCT.BTCT_DATA,BT.BT_CUST_REF,BT.BT_INV_DETAILS,BTCB.BTCB_DATA,BT.BT_COMMENTS,BT.ULD_ID,BT.BT_TIMESTAMP FROM TEMP_BANK_TRANSFER BT,MIG_BANK_TRANSFER_STATUS BTS,MIG_BANK_TRANSFER_CHARGES_TO BTCT,MIG_BANK_TRANSFER_CREATED_BY BTCB,MIG_BANK_TRANSFER_TYPE BTT WHERE BT.BTT_ID=BTT.BTT_ID AND BT.BTS_ID=BTS.BTS_ID AND BT.BTCT_ID=BTCT.BTCT_ID AND BTCB.BTCB_ID=BT.BTCB_ID;
INSERT INTO TEMP_BANKTT_TABLE(BT_ID,BTT_DATA,BT_DATE,BT_AMOUNT,BTS_DATA,BT_DEBITED_ON,BT_BANK_ADDRESS,BT_CUST_REF,BT_INV_DETAILS,BT_COMMENTS,ULD_ID,BTCB_DATA,BT_TIMESTAMP) SELECT BT.BT_ID,BTM.BTM_DATA,BT.BT_DATE,BT.BT_AMOUNT,BTS.BTS_DATA,BT_DEBITED_ON,BT.BT_BANK_ADDRESS,BT.BT_CUST_REF,BT.BT_INV_DETAILS,BT.BT_COMMENTS,BT.ULD_ID,BTCB.BTCB_DATA,BT.BT_TIMESTAMP FROM TEMP_BANK_TRANSFER BT,MIG_BANK_TRANSFER_STATUS BTS,MIG_BANK_TRANSFER_CREATED_BY BTCB,BANK_TRANSFER_MODELS BTM WHERE BT.BTS_ID=BTS.BTS_ID AND BTCB.BTCB_ID=BT.BTCB_ID AND BTM.BTM_DATA=BT.BTT_ID;
END;

--SP FOR INSERTING BANK_TRANSFER AND BANK_TRANSFER_STATUS_DETAILS
DROP PROCEDURE IF EXISTS SP_MIG_BANKTT;
CREATE PROCEDURE SP_MIG_BANKTT()
BEGIN
DECLARE  DONE INT DEFAULT FALSE;
DECLARE BTID INTEGER;
DECLARE BTTDATA VARCHAR(100);
DECLARE BTDATE DATE;
DECLARE BTACCNO VARCHAR(25);
DECLARE BTACCNAME VARCHAR(40);
DECLARE BTAMOUNT DECIMAL(7,2);
DECLARE BTSDATA VARCHAR(20);
DECLARE BTDEBITEDON DATE;
DECLARE BTBANKCODE VARCHAR(4);
DECLARE BTBRANCHCODE VARCHAR(3);
DECLARE BTBANKADDRESS VARCHAR(250);
DECLARE BTSWIFTCODE VARCHAR(12);
DECLARE BTCUSTREF VARCHAR(200);
DECLARE BTINVDETAILS TEXT;
DECLARE BTCOMMENTS TEXT;
DECLARE ULDID INTEGER;
DECLARE BTTIMESTAMP TIMESTAMP;
DECLARE BTCTDATA VARCHAR(50);
DECLARE BTCBDATA VARCHAR(50);

DECLARE FILTER_CURSOR CURSOR FOR 
SELECT BT_ID,BTT_DATA,BT_DATE,BT_ACC_NO,BT_ACC_NAME,BT_AMOUNT,BTS_DATA,BT_DEBITED_ON,BT_BANK_CODE,BT_BRANCH_CODE,BT_BANK_ADDRESS,BT_SWIFT_CODE,BTCT_DATA,BT_CUST_REF,BT_INV_DETAILS,BTCB_DATA,BT_COMMENTS,ULD_ID,BT_TIMESTAMP FROM TEMP_BANKTT_TABLE;
DECLARE CONTINUE HANDLER FOR NOT FOUND SET DONE = TRUE;

OPEN FILTER_CURSOR;

read_loop: LOOP
FETCH FILTER_CURSOR INTO BTID,BTTDATA,BTDATE,BTACCNO,BTACCNAME,BTAMOUNT,BTSDATA,BTDEBITEDON,BTBANKCODE,BTBRANCHCODE,BTBANKADDRESS,BTSWIFTCODE,BTCTDATA,BTCUSTREF,BTINVDETAILS,BTCBDATA,BTCOMMENTS,ULDID,BTTIMESTAMP;
IF DONE THEN
      LEAVE read_loop;
END IF;

INSERT INTO BANK_TRANSFER(BT_ID,BTM_ID,BT_DATE,BT_AMOUNT,BT_ACC_NAME,BT_ACC_NO,BT_BANK_CODE,BT_BRANCH_CODE,BT_BANK_ADDRESS,BT_SWIFT_CODE,BT_CUST_REF,BT_INV_DETAILS,BT_DEBITED_ON,BT_COMMENTS,ULD_ID,BT_TIMESTAMP)
VALUES(BTID,(SELECT BTM_ID FROM BANK_TRANSFER_MODELS WHERE BTM_DATA=BTTDATA),BTDATE,BTAMOUNT,BTACCNAME,BTACCNO,BTBANKCODE,BTBRANCHCODE,BTBANKADDRESS,BTSWIFTCODE,BTCUSTREF,BTINVDETAILS,BTDEBITEDON,BTCOMMENTS,ULDID,BTTIMESTAMP);

	IF BTTDATA='GIRO' OR BTTDATA='TT' THEN

		INSERT INTO BANK_TRANSFER_STATUS_DETAILS(BT_ID,CGN_ID,BCN_ID)VALUES(BTID,(SELECT CGN_ID FROM BANKTT_CONFIGURATION WHERE BCN_DATA=BTTDATA),(SELECT BCN_ID FROM BANKTT_CONFIGURATION WHERE BCN_DATA=BTTDATA));

	END IF;

	IF BTSDATA!=' ' THEN
		
		INSERT INTO BANK_TRANSFER_STATUS_DETAILS(BT_ID,CGN_ID,BCN_ID)VALUES(BTID,(SELECT CGN_ID FROM BANKTT_CONFIGURATION WHERE BCN_DATA=BTSDATA),(SELECT BCN_ID FROM BANKTT_CONFIGURATION WHERE BCN_DATA=BTSDATA));
		
	END IF;
	
	IF BTCTDATA!=' ' THEN
		INSERT INTO BANK_TRANSFER_STATUS_DETAILS(BT_ID,CGN_ID,BCN_ID)VALUES(BTID,(SELECT CGN_ID FROM BANKTT_CONFIGURATION WHERE BCN_DATA=BTCTDATA),(SELECT BCN_ID FROM BANKTT_CONFIGURATION WHERE BCN_DATA=BTCTDATA));
	END IF;
	
	IF BTCBDATA!=' ' THEN
		INSERT INTO BANK_TRANSFER_STATUS_DETAILS(BT_ID,CGN_ID,BCN_ID)VALUES(BTID,(SELECT CGN_ID FROM BANKTT_CONFIGURATION WHERE BCN_DATA=BTCBDATA),(SELECT BCN_ID FROM BANKTT_CONFIGURATION WHERE BCN_DATA=BTCBDATA));
	END IF;

END LOOP;
CLOSE FILTER_CURSOR;

END;

-- SP FOR AUDIT TABLE HISTORY FOR BANK_TRANSFER AND BANK_TRANSFER_STATUS_DETAILS
DROP PROCEDURE IF EXISTS SP_BANK_TRANSFER_DURATION;
CREATE PROCEDURE SP_BANK_TRANSFER_DURATION(IN BANKTT_USERSTAMP VARCHAR(100))
BEGIN
DECLARE START_TIME TIME;
DECLARE END_TIME TIME;
DECLARE DURATION TIME;
SET START_TIME=(SELECT CURTIME());
CALL SP_BANK_TRANSFER_TABLE();
CALL SP_TEMP_BANK_TRANSFER();
CALL SP_MIG_BANKTT();
SET END_TIME=(SELECT CURTIME());
SET DURATION=(SELECT TIMEDIFF(END_TIME,START_TIME));
SET @COUNT_SCDB_BANK_TRANSFER=(SELECT COUNT(*) FROM MIG_BANK_TRANSFER);
SET @COUNT_SPLITTED_BANK_TRANSFER=(SELECT COUNT(*) FROM BANK_TRANSFER);

SET @REJECTION_COUNT=(@COUNT_SCDB_BANK_TRANSFER-@COUNT_SPLITTED_BANK_TRANSFER);
		
UPDATE PRE_AUDIT_SUB_PROFILE SET PREASP_NO_OF_REC=@COUNT_SCDB_BANK_TRANSFER WHERE PREASP_DATA='BANK_TRANSFER';
		
INSERT INTO POST_AUDIT_HISTORY(POSTAP_ID,POSTAH_NO_OF_REC,PREASP_ID,PREAMP_ID,POSTAH_DURATION,POSTAH_NO_OF_REJ,POSTAH_USERSTAMP)
VALUES((SELECT POSTAP_ID FROM POST_AUDIT_PROFILE WHERE POSTAP_DATA='BANK_TRANSFER'),@COUNT_SPLITTED_BANK_TRANSFER,(SELECT PREASP_ID FROM PRE_AUDIT_SUB_PROFILE WHERE PREASP_DATA='BANK_TRANSFER'),
(SELECT PREAMP_ID FROM PRE_AUDIT_MAIN_PROFILE WHERE PREAMP_DATA='BANKTT'),DURATION,@REJECTION_COUNT,BANKTT_USERSTAMP);

SET @GIRO=(SELECT COUNT(*) FROM MIG_BANK_TRANSFER WHERE BT_TRANSACTION_TYPE='GIRO');
SET @TT=(SELECT COUNT(*) FROM MIG_BANK_TRANSFER WHERE BT_TRANSACTION_TYPE='TT');
SET @BTSID=(SELECT COUNT(*) FROM MIG_BANK_TRANSFER WHERE BTS_ID IS NOT NULL);
SET @BTCBID=(SELECT COUNT(*) FROM MIG_BANK_TRANSFER WHERE  BTCB_ID!=1 AND BTCB_ID IS NOT NULL);
SET @BTCTID=(SELECT COUNT(*) FROM MIG_BANK_TRANSFER WHERE BTCT_ID!=1 AND BTCT_ID IS NOT NULL);

SET @COUNT_SCDB_BTSD=(SELECT SUM(@GIRO+@TT+@BTSID+@BTCBID+@BTCTID));
SET @COUNT_SPLITTED_BTSD=(SELECT COUNT(*) FROM BANK_TRANSFER_STATUS_DETAILS);
SET @REJECTION_COUNT=(@COUNT_SCDB_BTSD-@COUNT_SPLITTED_BTSD);
UPDATE PRE_AUDIT_SUB_PROFILE SET PREASP_NO_OF_REC=@COUNT_SCDB_BTSD WHERE PREASP_DATA='BANK_TRANSFER_STATUS_DETAILS';

INSERT INTO POST_AUDIT_HISTORY(POSTAP_ID,POSTAH_NO_OF_REC,PREASP_ID,PREAMP_ID,POSTAH_DURATION,POSTAH_NO_OF_REJ,POSTAH_USERSTAMP)
VALUES((SELECT POSTAP_ID FROM POST_AUDIT_PROFILE WHERE POSTAP_DATA='BANK_TRANSFER_STATUS_DETAILS'),@COUNT_SPLITTED_BTSD,(SELECT PREASP_ID FROM PRE_AUDIT_SUB_PROFILE WHERE PREASP_DATA='BANK_TRANSFER_STATUS_DETAILS'),
(SELECT PREAMP_ID FROM PRE_AUDIT_MAIN_PROFILE WHERE PREAMP_DATA='BANKTT'),DURATION,@REJECTION_COUNT,BANKTT_USERSTAMP);
END;


--CREATE QUERY FOR BANK_TRANSFER_DETAIL TABLE
DROP PROCEDURE IF EXISTS SP_BANK_TRANSFER_DETAIL_TABLE;
CREATE PROCEDURE SP_BANK_TRANSFER_DETAIL_TABLE()
BEGIN
SET FOREIGN_KEY_CHECKS=0;
DROP TABLE IF EXISTS BANK_TRANSFER_DETAIL;
CREATE TABLE BANK_TRANSFER_DETAIL(
BTD_ID	INTEGER NOT NULL AUTO_INCREMENT,
UNIT_ID	INTEGER NOT NULL, 
CUSTOMER_ID	INTEGER NOT NULL,
BT_ID INTEGER NOT NULL,
PRIMARY KEY(BTD_ID),
FOREIGN KEY(UNIT_ID) REFERENCES UNIT (UNIT_ID),
FOREIGN KEY(CUSTOMER_ID) REFERENCES CUSTOMER (CUSTOMER_ID),
FOREIGN KEY(BT_ID) REFERENCES BANK_TRANSFER (BT_ID));
SET FOREIGN_KEY_CHECKS=1;
END;

--INSERT QUERY FOR BANK_TRANSFER_DETAIL TABLE
DROP PROCEDURE IF EXISTS SP_BANK_TRANSFER_DETAIL;
CREATE PROCEDURE SP_BANK_TRANSFER_DETAIL(IN BANKTT_USERSTAMP VARCHAR(100))
BEGIN
 DECLARE  DONE INT DEFAULT FALSE;
 DECLARE UNITNO INTEGER;
 DECLARE CUSTOMERNAME VARCHAR(50);
 DECLARE BTID INTEGER;
 DECLARE CUSTOMERID INTEGER;
 DECLARE START_TIME TIME;
DECLARE END_TIME TIME;
DECLARE DURATION TIME;
 
DECLARE FILTER_CURSOR CURSOR FOR 
SELECT BT_SNO,BT_CUSTOMER,BT_UNIT FROM TEMP_MIG_BANK_TRANSFER WHERE BT_TRANSACTION_TYPE='TT' OR BT_TRANSACTION_TYPE='GIRO';
DECLARE CONTINUE HANDLER FOR NOT FOUND SET DONE = TRUE;
CREATE OR REPLACE VIEW VW_TEMP_BANKTT_CUSTOMER AS SELECT C.CC_CUST_ID,IF(C.CC_FIRST_NAME=C.CC_LAST_NAME, C.CC_FIRST_NAME, CONCAT(C.CC_FIRST_NAME,' ',C.CC_LAST_NAME)) AS CUSTOMER_NAME,CC_UNIT_NO FROM TEMP_CUSTOMER_SCDB_FORMAT C;
SET START_TIME=(SELECT CURTIME());
CALL SP_BANK_TRANSFER_DETAIL_TABLE();
OPEN FILTER_CURSOR;
read_loop: LOOP
FETCH FILTER_CURSOR INTO BTID,CUSTOMERNAME,UNITNO;
IF DONE THEN
      LEAVE read_loop;
END IF;
    SET CUSTOMERID=(SELECT DISTINCT CC_CUST_ID FROM VW_TEMP_BANKTT_CUSTOMER WHERE CUSTOMER_NAME=CUSTOMERNAME AND CC_UNIT_NO=UNITNO);
	
	
	IF CUSTOMERID IS NOT NULL THEN
	SET FOREIGN_KEY_CHECKS=0;
	 INSERT INTO BANK_TRANSFER_DETAIL(UNIT_ID,CUSTOMER_ID,BT_ID)VALUES
	 ((SELECT UNIT_ID FROM UNIT WHERE UNIT_NO=UNITNO),CUSTOMERID,BTID);
	 ELSE
	 INSERT INTO BANK_TRANSFER_DETAIL(UNIT_ID,CUSTOMER_ID,BT_ID)VALUES
	 ((SELECT UNIT_ID FROM UNIT WHERE UNIT_NO=UNITNO),(SELECT DISTINCT CC_CUST_ID FROM VW_TEMP_BANKTT_CUSTOMER WHERE CUSTOMER_NAME=CUSTOMERNAME),BTID);
	END IF;
END LOOP;
CLOSE FILTER_CURSOR;
SET END_TIME=(SELECT CURTIME());
SET DURATION=(SELECT TIMEDIFF(END_TIME,START_TIME));
SET @COUNT_SCDB_BTD=(SELECT COUNT(*) FROM MIG_BANK_TRANSFER WHERE BT_TRANSACTION_TYPE='GIRO' OR BT_TRANSACTION_TYPE='TT');
SET @COUNT_SPITTED_BTD=(SELECT COUNT(*) FROM BANK_TRANSFER_DETAIL);
SET @REJECTION_COUNT=(@COUNT_SCDB_BTD-@COUNT_SPITTED_BTD);
UPDATE PRE_AUDIT_SUB_PROFILE SET PREASP_NO_OF_REC=@COUNT_SCDB_BTD WHERE PREASP_DATA='BANK_TRANSFER_DETAIL';

INSERT INTO POST_AUDIT_HISTORY(POSTAP_ID,POSTAH_NO_OF_REC,PREASP_ID,PREAMP_ID,POSTAH_DURATION,POSTAH_NO_OF_REJ,POSTAH_USERSTAMP)
VALUES((SELECT POSTAP_ID FROM POST_AUDIT_PROFILE WHERE POSTAP_DATA='BANK_TRANSFER_DETAIL'),@COUNT_SPITTED_BTD,(SELECT PREASP_ID FROM PRE_AUDIT_SUB_PROFILE WHERE PREASP_DATA='BANK_TRANSFER_DETAIL'),
(SELECT PREAMP_ID FROM PRE_AUDIT_MAIN_PROFILE WHERE PREAMP_DATA='BANKTT'),DURATION,@REJECTION_COUNT,BANKTT_USERSTAMP);
SET FOREIGN_KEY_CHECKS=1;
END;

--OVERALL BANK TT INSERT SP
DROP PROCEDURE IF EXISTS SP_ALL_MIG_BANKTT_INSERT;
CREATE PROCEDURE SP_ALL_MIG_BANKTT_INSERT(IN BANKTT_USERSTAMP VARCHAR(100))
BEGIN
CALL SP_TEMP_MIG_BANK_TRANSFER(BANKTT_USERSTAMP);
CALL SP_BANK_TRANSFER_DURATION(BANKTT_USERSTAMP);
CALL SP_BANK_TRANSFER_DETAIL(BANKTT_USERSTAMP);
DROP TABLE IF EXISTS TEMP_BANKTT_TABLE;
DROP TABLE IF EXISTS TEMP_CUSTOMER_SCDB_FORMAT;
DROP TABLE IF EXISTS TEMP_MIG_BANK_TRANSFER;
DROP TABLE IF EXISTS TEMP_BANK_TRANSFER;
END;

CALL SP_ALL_MIG_BANKTT_INSERT('rajalakshmi.r@ssomens.com');