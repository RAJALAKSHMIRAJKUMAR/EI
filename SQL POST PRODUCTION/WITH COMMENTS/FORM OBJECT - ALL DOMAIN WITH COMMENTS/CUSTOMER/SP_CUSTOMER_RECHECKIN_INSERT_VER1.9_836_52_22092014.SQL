-- VER 1.9 ISSUE:836 COMMENT #52 STARTDATE:22/09/2014 ENDDATE:22/09/2014 DESC:INVENTORY CARD HARD CODED ERROR MSG GET FROM DB details BY DHIVYA.
-- VER 1.8 STARTDATE:21/06/2014 ENDDATE:21/06/2014 DESC:IMPLEMENTED AUTOCOMMIT DONE BY:KUMAR
-- VER 1.7 ISSUE:817 COMMENT #139 STARTDATE:21/06/2014 ENDDATE:21/06/2014 DESC:DROPED TEMP TABLES INSIDE ROLL BACK AND COMMIT DONE BY:DHIVYA.A
--version:1.6 --sdate:29/04/2014 --edate:29/04/2014 --issue:817 --desc:CHANGING THE TEMP TABLE FOR DYNAMIC PURPOSE --doneby:BHAVANI.R
--version:1.5 --sdate:22/04/2014 --edate:23/04/2014 --issue:812 --comment no#2 --desc:CHANGING THE VARIABLLE CARDNO FOR CHECKING THE INVENTORY CARD --doneby:BHAVANI.R
--version:1.4 --sdate:17/04/2014 --edate:18/04/2014 --issue:345 --comment no#693 --desc:added primary key while inserting values in tickelr table n done some changes in tickler part --doneby:RL
-- version:1.3 --sdate:17/04/2014 --edate:17/04/2014 --issue:345 --commentno#650 --desc:changes in update of tickler part for customer_recheckin_sp --doneby:Bhavani.R
-- version:1.2 --sdate:10/04/2014 --edate:11/04/2014 --issue:345 --commentno#650 --desc:creating tickler part for customer_recheckin_sp --doneby:Bhavani.R
-- version:1.1 --sdate:05/04/2014 --edate:07/04/2014 --issue:345 --commentno#644 --desc:Throws error msg if given card is active or Lost AND CHANGING THE TABLE CUSTOMER TERMINATION DETAILS INTO CUSTOMER_LP_DETAILS --doneby:Bhavani.R
-- version 1.0 startdate:28/02/2014 --enddate:28/02/2014--- issueno 754 commentno:36-->desc:added sub sp to convert userstamp as uld_id done by:Dhivya 
-- version:0.9 --sadte:27/02/2014 --edate:27/02/2014 desc:changed userstamp as uld_id --doneby:RL
-- version --> 0.8 startdate -->19/02/2014 enddate --> 19/02/2014 description -->Implementing flag for success message in SP_CUSTOMER_RECHECKIN_INSERT -->Done By:Bhavani.R issue:749   comment:67 
-- version --> 0.7 startdate -->29/01/2014 enddate --> 30/01/2014 description -->UPDATED CUSTOMER ENTRY DETAILS AS PER STIME AND ETIME DATATYPE UPDATION DONE BY:DHIVYA.A -->issue :594 comment #71
-- version --> 0.6 startdate -->21/11/2013 enddate --> 21/11/2013 description -->removed unexpected condition in customer access card details-->done by:DHIVYA.A-->issue :660
-- version --> 0.5 startdate -->20/11/2013 enddate --> 20/11/2013 description --> description --> added guest card column in customer access card details and changed access card variable datatype as integer(7)-->done by:DHIVYA.A-->issue :248-->commentno:110
-- version --> 0.4 startdate -->06/11/2013 enddate --> 06/11/2013 description --> CARD IS ASSIGNED TO CUSTOMER, EMPLOYEE_DETAILS TABLE RECORD SHLD UPDATE AS NULL IF THAT CARD EXISTS FOR THE EMPLOYEE modified by & changed sp name -->rl -->issue :345 -->commentno: 303
-- version --> 0.3 startdate -->16/10/2013 enddate --> 16/10/2013 -->issue :345 -->commentno#186 DESC:ADDED CED_RECHECKIN HEADER IN CUSTOMER_ENTRY_DETAILS by:DHIVYA.A
-- version --> 0.2 startdate -->28/09/2013 enddate --> 28/09/2013 -->issue :345 -->commentno#137--> modification done by:RL
-- version --> 0.1 startdate -->21/08/2013 enddate --> 21/08/2013 description --> SP for the customer recheckin form saving part created by -->CL -->issue :345


DROP PROCEDURE IF EXISTS SP_CUSTOMER_RECHECKIN_INSERT;
CREATE PROCEDURE SP_CUSTOMER_RECHECKIN_INSERT(
IN RE_CUSTOMER_ID INTEGER,
IN RE_CUSTOMER_FIRST_NAME CHAR(30),
IN RE_CUSTOMER_LAST_NAME CHAR(30),
IN RE_COMPANY_NAME VARCHAR(50),
IN RE_COMPANY_ADDR VARCHAR(50),
IN RE_POSTAL_CODE VARCHAR(6),
IN RE_OFFICE_NO VARCHAR(8),
IN RE_UNIT_NO SMALLINT(4),
IN RE_ROOM_TYPE VARCHAR(30),
IN RE_SD_STIME TIME,
IN RE_SD_ETIME TIME,
IN RE_ED_STIME TIME,
IN RE_ED_ETIME TIME,
IN RE_LEASE_PERIOD VARCHAR(30),
IN RE_QUARTERS DECIMAL(5,2),
IN RE_PROCESSING_WAIVED CHAR(1),
IN RE_PRORATED    CHAR(1),
IN RE_NOTICE_PERIOD TINYINT(1),
IN RE_NOTICE_START_DATE DATE,
IN RE_RENT DECIMAL(7,2),
IN RE_DEPOSIT DECIMAL(7,2),
IN RE_PROCESSING_FEE DECIMAL(7,2),
IN RE_AIRCON_FIXED_FEE DECIMAL(7,2),
IN RE_AIRCON_QUARTELY_FEE DECIMAL(7,2),
IN RE_ELECTRICITY_CAP DECIMAL(7,2),
IN RE_CHECKOUT_CLEANING_FEE DECIMAL(7,2),
IN RE_DRYCLEAN_FEE DECIMAL(7,2),
IN RE_CARD_NO TEXT,
IN RE_VALID_FROM DATE,
IN USERSTAMP VARCHAR(50),
IN RE_STARTDATE DATE,
IN RE_ENDDATE DATE,
IN RE_GUEST_CARD TEXT,
IN RE_NATIONALITY TEXT,
IN RE_MOBILE VARCHAR(8),
IN RE_INTL_MOBILE VARCHAR(20),
IN RE_EMAIL VARCHAR(40),
IN RE_PASSPORT_NO VARCHAR(15),
IN RE_PASSPORT_DATE DATE,
IN RE_DOB DATE,
IN RE_EP_NO VARCHAR(15),
IN RE_EP_DATE DATE,
IN RE_COMMENTS TEXT,
OUT CUSTOMER_RECHECKIN_TEMPTBLNAME TEXT,
OUT CUSTOMER_RECHECKIN_SUCCESS_FLAG TEXT)
BEGIN
	DECLARE ACTIVECARDCOUNT INTEGER;
	DECLARE ACTIVECARDNO INTEGER;
	DECLARE LOCATION INTEGER;
	DECLARE CUSTOMER_LENGTH INTEGER;
	DECLARE MINID INTEGER;
	DECLARE MAXID INTEGER;
	DECLARE ROOM_TYPE_ID INT;
	DECLARE RE_UNIT_ID INT;
	DECLARE NATIONALITY_DETAILS INT;
	DECLARE REC_VER INT;
	DECLARE TEMP_ACCESS_CARD TEXT;
	DECLARE ACCESS_CARD_NO INTEGER(7);
	DECLARE ACCESS_POSITION INTEGER;
	DECLARE ACCESS_LOCATION INTEGER;
	DECLARE ACCESS_LENGTH INTEGER;
	DECLARE GUEST_ACCESS_LENGTH INTEGER;
	DECLARE GUEST_FLAG CHAR(1);
	DECLARE USERSTAMP_ID INTEGER(2);
	DECLARE UASDID INTEGER;
	DECLARE ECDID INTEGER;
	DECLARE CCDID INTEGER;
	DECLARE THID INTEGER;
    DECLARE OLD_FNAME TEXT;
    DECLARE OLD_LNAME TEXT;
    DECLARE NEW_FNAME TEXT;
    DECLARE NEW_LNAME TEXT;
    DECLARE OLD_CUSTOMERTABLEDETAILS TEXT;
    DECLARE NEW_CUSTOMERTABLEDETAILS TEXT;
    DECLARE CUSTOMER_HEADNAME TEXT;
    DECLARE CUST_LENGTH INTEGER;
    DECLARE OLDCUSTOMERPOSITION INTEGER;
    DECLARE OLD_CUSTOMERS TEXT;
    DECLARE NEWCUSTOMERPOSITION INTEGER;
    DECLARE NEW_CUSTOMERS TEXT;
    DECLARE CUSTOMERHEADPOSITION INTEGER;
    DECLARE CUSTOMERHEADNAME TEXT;
    DECLARE NEWCUSTOMERRECORDS TEXT ;
    DECLARE OLDCUSTOMERRECORDS TEXT ;
    DECLARE CUSTOMERHEADERNAMES TEXT;
    DECLARE CUST_ID VARCHAR(30);
    DECLARE OLD_CUSTOMER TEXT;
    DECLARE NEW_CUSTOMER TEXT;
    DECLARE CUSTHEADERNAME TEXT;
    DECLARE CUST_LOCATION INTEGER;
	DECLARE OLD_CCDID INTEGER;
    DECLARE OLD_COMPANYNAME TEXT;
    DECLARE OLD_COMPANYADDR TEXT;
	DECLARE OLD_POSTALCODE TEXT;
	DECLARE OLD_OFFICENO TEXT;
    DECLARE NEW_COMPANYNAME TEXT;
    DECLARE NEW_COMPANYADDR TEXT;
	DECLARE NEW_POSTALCODE TEXT;
	DECLARE NEW_OFFICENO TEXT;
    DECLARE OLD_COMPANYTABLEDETAILS TEXT;
    DECLARE NEW_COMPANYTABLEDETAILS TEXT;
    DECLARE COMPANY_HEADERNAME TEXT;
    DECLARE CCD_LENGTH INTEGER;
    DECLARE OLDCOMPANYPOSITION INTEGER;
    DECLARE OLD_COMPANYS TEXT;
    DECLARE NEWCOMPANYPOSITION INTEGER;
    DECLARE NEW_COMPANYS TEXT;
    DECLARE COMPANYHEADPOSITION INTEGER;
    DECLARE COMPANYHEADNAME TEXT;
    DECLARE NEWCOMPANYRECORDS TEXT ;
    DECLARE OLDCOMPANYRECORDS TEXT ;
    DECLARE COMPANYHEADERNAMES TEXT;
    DECLARE CUSTCOMPANY_ID VARCHAR(30);
    DECLARE OLD_COMPANYDTL TEXT;
    DECLARE NEW_COMPANYDTL TEXT;
    DECLARE CUSTCOMPANYHEADERNAME TEXT;
    DECLARE COMPANY_LOCATION INTEGER;
	DECLARE OLD_CPDID INTEGER;
    DECLARE OLD_NCID TEXT;
    DECLARE OLD_MOBILE TEXT;
	DECLARE OLD_INTL_MOBILE TEXT;
	DECLARE OLD_EMAIL TEXT;
	DECLARE OLD_PASSPORTNO TEXT;
	DECLARE OLD_PASSPORTDATE TEXT;
	DECLARE OLD_DOB TEXT;
	DECLARE OLD_EPNO TEXT;
	DECLARE OLD_EPDATE TEXT;
	DECLARE OLD_COMMENTS TEXT;
    DECLARE NEW_NCID TEXT;
    DECLARE NEW_MOBILE TEXT;
	DECLARE NEW_INTL_MOBILE TEXT;
	DECLARE NEW_EMAIL TEXT;
	DECLARE NEW_PASSPORTNO TEXT;
	DECLARE NEW_PASSPORTDATE TEXT;
	DECLARE NEW_DOB TEXT;
	DECLARE NEW_EPNO TEXT;
	DECLARE NEW_EPDATE TEXT;
	DECLARE NEW_COMMENTS TEXT;
    DECLARE OLD_PERSONALTABLEDETAILS TEXT;
    DECLARE NEW_PERSONALTABLEDETAILS TEXT;
    DECLARE PERSONAL_HEADERNAME TEXT;
    DECLARE CPD_LENGTH INTEGER;
    DECLARE OLDPERSONALPOSITION INTEGER;
    DECLARE OLD_CUSTOMERPERSONALS TEXT;
    DECLARE NEWPERSONALPOSITION INTEGER;
    DECLARE NEW_CUSTOMERPERSONALS TEXT;
    DECLARE PERSONALHEADPOSITION INTEGER;
    DECLARE PERSONALHEADNAME TEXT;
    DECLARE NEWPERSONALRECORDS TEXT ;
    DECLARE OLDPERSONALRECORDS TEXT ;
    DECLARE PERSONALHEADERNAMES TEXT;
    DECLARE CUSTPERSONAL_ID VARCHAR(30);
    DECLARE OLD_PERSONALDTL TEXT;
    DECLARE NEW_PERSONALDTL TEXT;
    DECLARE CUSTPERSONALHEADERNAME TEXT;
    DECLARE PERSONAL_LOCATION INTEGER;
	DECLARE CARDNO TEXT;
	DECLARE RECHECKIN_TEMPTBLNAME TEXT;
	DECLARE ACTIVEVALUE CHAR(1);
	DECLARE LOSTVALUE CHAR(1);
	DECLARE INVENTORYVALUE CHAR(1);
	DECLARE ERRORMSG TEXT;
	DECLARE EXIT HANDLER FOR SQLEXCEPTION
	BEGIN 
		ROLLBACK;
		IF (CUSTOMER_RECHECKIN_TEMPTBLNAME IS NOT NULL)THEN
			SET @DROP_TEMP_TABLE=(SELECT CONCAT('DROP TABLE IF EXISTS ',CUSTOMER_RECHECKIN_TEMPTBLNAME));
			PREPARE DROP_TEMP_TABLE_STMT FROM @DROP_TEMP_TABLE;
			EXECUTE DROP_TEMP_TABLE_STMT;
		END IF;
		IF CUSTOMER_RECHECKIN_SUCCESS_FLAG=1 THEN
			SET CUSTOMER_RECHECKIN_SUCCESS_FLAG=0;
		END IF;
	END;
	CALL SP_CHANGE_USERSTAMP_AS_ULDID(USERSTAMP,@ULDID);
	SET USERSTAMP_ID = (SELECT @ULDID);
	SET ROOM_TYPE_ID=(SELECT UASD_ID FROM UNIT_ACCESS_STAMP_DETAILS WHERE URTD_ID=(SELECT URTD_ID FROM UNIT_ROOM_TYPE_DETAILS WHERE URTD_ROOM_TYPE=RE_ROOM_TYPE) AND UNIT_ID=(SELECT UNIT_ID FROM UNIT WHERE UNIT_NO=RE_UNIT_NO));
	SET RE_UNIT_ID=(SELECT UNIT_ID FROM UNIT WHERE UNIT_NO=RE_UNIT_NO);
	SET NATIONALITY_DETAILS=(SELECT NC_ID FROM NATIONALITY_CONFIGURATION WHERE NC_DATA=RE_NATIONALITY);
	SET REC_VER=(SELECT MAX(CED_REC_VER) FROM CUSTOMER_ENTRY_DETAILS WHERE CUSTOMER_ID=RE_CUSTOMER_ID);
	IF RE_COMPANY_NAME='' THEN
		SET RE_COMPANY_NAME=NULL;
	END IF;
	IF RE_COMPANY_ADDR='' THEN
		SET RE_COMPANY_ADDR=NULL;
	END IF;
	IF RE_POSTAL_CODE='' THEN
		SET RE_POSTAL_CODE=NULL;
	END IF;
	IF RE_OFFICE_NO='' THEN
		SET RE_OFFICE_NO=NULL;
	END IF;
	IF RE_PROCESSING_WAIVED='' THEN
		SET RE_PROCESSING_WAIVED=NULL;
	END IF;
	IF RE_PRORATED='' THEN
		SET RE_PRORATED=NULL;
	END IF;
	IF RE_NOTICE_PERIOD='' THEN
		SET RE_NOTICE_PERIOD=NULL;
	END IF;
	IF RE_ROOM_TYPE='' THEN
		SET RE_ROOM_TYPE=NULL;
	END IF;
	IF RE_COMMENTS='' THEN
		SET RE_COMMENTS=NULL;
	END IF;
	IF RE_CARD_NO='' THEN
		SET RE_CARD_NO=NULL;
	END IF;
	IF RE_GUEST_CARD='' THEN
		SET RE_GUEST_CARD=NULL;
	END IF;
	IF RE_MOBILE='' THEN
		SET RE_MOBILE=NULL;
	END IF;
	IF RE_INTL_MOBILE='' THEN
		SET RE_INTL_MOBILE=NULL;
	END IF;
	IF RE_PASSPORT_NO='' THEN
		SET RE_PASSPORT_NO=NULL;
	END IF;
	IF RE_EP_NO='' THEN
		SET RE_EP_NO=NULL;
	END IF;
	START TRANSACTION;
    SET AUTOCOMMIT=0;
SET USERSTAMP_ID = (SELECT @ULDID);
SET RECHECKIN_TEMPTBLNAME=(SELECT CONCAT('TEMP_CREATE_RE_CARD_NO',SYSDATE()));
		SET RECHECKIN_TEMPTBLNAME=(SELECT REPLACE(RECHECKIN_TEMPTBLNAME,' ',''));
		SET RECHECKIN_TEMPTBLNAME=(SELECT REPLACE(RECHECKIN_TEMPTBLNAME,'-',''));
		SET RECHECKIN_TEMPTBLNAME=(SELECT REPLACE(RECHECKIN_TEMPTBLNAME,':',''));
		SET CUSTOMER_RECHECKIN_TEMPTBLNAME=(SELECT CONCAT(RECHECKIN_TEMPTBLNAME,'_',USERSTAMP_ID)); 
	SET CUSTOMER_RECHECKIN_SUCCESS_FLAG='';
	SET CUSTOMER_LENGTH = 1;
	SET ACTIVECARDCOUNT = 0;
	SET @TEMP_CARD_NO = RE_CARD_NO;
	IF(RE_CARD_NO IS NOT NULL) THEN
		SET @TEMP_CREATE_RE_CARD_NO=(SELECT CONCAT('CREATE TABLE ',CUSTOMER_RECHECKIN_TEMPTBLNAME,'(ID INTEGER AUTO_INCREMENT,CARD_NO INTEGER(7),ACTIVE CHAR(1),LOST CHAR(1),INVENTORY CHAR(1),PRIMARY KEY(ID))'));
		PREPARE TEMP_CREATE_RE_CARD_NO_STMT FROM @TEMP_CREATE_RE_CARD_NO;
		EXECUTE TEMP_CREATE_RE_CARD_NO_STMT;
		MAIN_LOOP : LOOP
			CALL SP_GET_SPECIAL_CHARACTER_SEPERATED_VALUES(',',@TEMP_CARD_NO,@VALUE,@REMAINING_STRING);
			SELECT @VALUE INTO CARDNO;
			SELECT @REMAINING_STRING INTO @TEMP_CARD_NO;
			SET @ACTIVE_FLAG =(SELECT CONCAT('SELECT UASD_ACCESS_ACTIVE  INTO @ACTIVE_VALUE FROM UNIT_ACCESS_STAMP_DETAILS WHERE UASD_ACCESS_CARD=',CARDNO));
			PREPARE ACTIVE_FLAG_STMT FROM @ACTIVE_FLAG;
			EXECUTE ACTIVE_FLAG_STMT;
			SET ACTIVEVALUE=@ACTIVE_VALUE;
			SET @LOST_FLAG =(SELECT CONCAT('SELECT UASD_ACCESS_LOST INTO @LOST_VALUE FROM UNIT_ACCESS_STAMP_DETAILS WHERE UASD_ACCESS_CARD=',CARDNO));
			PREPARE LOST_FLAG_STMT FROM @LOST_FLAG;
			EXECUTE LOST_FLAG_STMT;
			SET LOSTVALUE=@LOST_VALUE;
			SET @INVENTORY_FLAG =(SELECT CONCAT('SELECT UASD_ACCESS_INVENTORY INTO @INVENTORY_VALUE FROM UNIT_ACCESS_STAMP_DETAILS WHERE UASD_ACCESS_CARD=',CARDNO));
			PREPARE INVENTORY_FLAG_STMT FROM @INVENTORY_FLAG;
			EXECUTE INVENTORY_FLAG_STMT;
			SET INVENTORYVALUE=@INVENTORY_VALUE;
			SET @INSERT_TEMP_RECHECKIN_CARD_NO=(SELECT CONCAT('INSERT INTO ',CUSTOMER_RECHECKIN_TEMPTBLNAME,'(CARD_NO,ACTIVE,LOST,INVENTORY)VALUES(',CARDNO,',@ACTIVE_VALUE,@LOST_VALUE,@INVENTORY_VALUE)'));
			PREPARE INSERT_TEMP_CREATION_CARD_NO_STMT FROM @INSERT_TEMP_RECHECKIN_CARD_NO;
			EXECUTE INSERT_TEMP_CREATION_CARD_NO_STMT;	
			IF @TEMP_CARD_NO IS NULL THEN
				LEAVE  MAIN_LOOP;
			END IF;
		END LOOP;
			SET @ACTIVECARD_COUNT = (SELECT CONCAT('SELECT COUNT(*) INTO @ACTIVE_CARD_COUNT FROM ',CUSTOMER_RECHECKIN_TEMPTBLNAME,' WHERE ACTIVE IS NOT NULL OR LOST IS NOT NULL'));
			PREPARE ACTIVECARD_COUNT_STMT FROM @ACTIVECARD_COUNT;
			EXECUTE ACTIVECARD_COUNT_STMT;
			SET ACTIVECARDCOUNT=@ACTIVE_CARD_COUNT;
END IF;
	IF(ACTIVECARDCOUNT!=0) THEN
		SET @TEMP_MINID = (SELECT CONCAT('SELECT MIN(ID) INTO @TEMPMINID FROM ',CUSTOMER_RECHECKIN_TEMPTBLNAME));
		PREPARE TEMP_MINID_STMT FROM @TEMP_MINID;
		EXECUTE TEMP_MINID_STMT;
		SET MINID=@TEMPMINID;
		SET @TEMP_MAXID =(SELECT CONCAT('SELECT MAX(ID) INTO @TEMPMAXID FROM ',CUSTOMER_RECHECKIN_TEMPTBLNAME));
		PREPARE TEMP_MAXID_STMT FROM @TEMP_MAXID;
		EXECUTE TEMP_MAXID_STMT;
		SET MAXID=@TEMPMAXID;
		WHILE (MINID <= MAXID)DO
			SET @ACTIVE_CARDNO = (SELECT CONCAT('SELECT CARD_NO INTO @ACTIVE_CARD_NO FROM ',CUSTOMER_RECHECKIN_TEMPTBLNAME,' WHERE ID =',MINID,' AND (ACTIVE IS NOT NULL OR LOST IS NOT NULL)'));
			PREPARE ACTIVE_CARD_NO_STMT FROM @ACTIVE_CARDNO;
			EXECUTE ACTIVE_CARD_NO_STMT;
			SET ACTIVECARDNO=@ACTIVE_CARD_NO;	
			IF (ACTIVECARDNO IS NOT NULL)THEN
				SET CUSTOMER_RECHECKIN_SUCCESS_FLAG = (SELECT CONCAT(CUSTOMER_RECHECKIN_SUCCESS_FLAG,',',ACTIVECARDNO));
			END IF;
			SET MINID = MINID+1;
		END WHILE;
		SET ERRORMSG=(SELECT EMC_DATA FROM ERROR_MESSAGE_CONFIGURATION WHERE EMC_ID=571);
		SET LOCATION=(SELECT LOCATE(',', CUSTOMER_RECHECKIN_SUCCESS_FLAG,CUSTOMER_LENGTH));
		SET CUSTOMER_RECHECKIN_SUCCESS_FLAG=(SELECT SUBSTRING(CUSTOMER_RECHECKIN_SUCCESS_FLAG,LOCATION+1));
		SET CUSTOMER_RECHECKIN_SUCCESS_FLAG = (SELECT REPLACE(ERRORMSG,'[CARD NO]',CUSTOMER_RECHECKIN_SUCCESS_FLAG));
	END IF;
	IF (ACTIVECARDCOUNT = 0 OR CARDNO IS NULL) THEN
		SET CUST_ID = '';
		SET OLD_FNAME = (SELECT CUSTOMER_FIRST_NAME FROM CUSTOMER WHERE CUSTOMER_ID = RE_CUSTOMER_ID);
		SET OLD_LNAME = (SELECT CUSTOMER_LAST_NAME FROM CUSTOMER WHERE CUSTOMER_ID = RE_CUSTOMER_ID);
		SET NEW_FNAME = RE_CUSTOMER_FIRST_NAME;
		SET NEW_LNAME = RE_CUSTOMER_LAST_NAME;
		SET CUSTOMERHEADERNAMES = 'CUSTOMER_FIRST_NAME,CUSTOMER_LAST_NAME';
		SET OLD_CUSTOMERTABLEDETAILS = (SELECT CONCAT(OLD_FNAME,'^','^',OLD_LNAME));
		SET NEW_CUSTOMERTABLEDETAILS = (SELECT CONCAT(NEW_FNAME,'^','^',NEW_LNAME));
		IF(OLD_CUSTOMERTABLEDETAILS != NEW_CUSTOMERTABLEDETAILS)THEN
			SET OLDCUSTOMERRECORDS = OLD_CUSTOMERTABLEDETAILS;
			SET NEWCUSTOMERRECORDS = NEW_CUSTOMERTABLEDETAILS;
			SET CUSTOMERHEADNAME = CUSTOMERHEADERNAMES;
			SET OLD_CUSTOMERS = '';
			SET NEW_CUSTOMERS = '';
			SET CUST_LENGTH = 1;
			loop_label : LOOP
				SET OLDCUSTOMERPOSITION = (SELECT LOCATE('^^',OLDCUSTOMERRECORDS,CUST_LENGTH));
				IF (OLDCUSTOMERPOSITION=0) THEN
					SET OLD_CUSTOMER = OLDCUSTOMERRECORDS;
				ELSE
					SET OLD_CUSTOMER =(SELECT SUBSTRING(OLDCUSTOMERRECORDS,CUST_LENGTH,OLDCUSTOMERPOSITION-1));
					SET OLDCUSTOMERRECORDS=(SELECT SUBSTRING(OLDCUSTOMERRECORDS,OLDCUSTOMERPOSITION+2));
				END IF;
				SET NEWCUSTOMERPOSITION = (SELECT LOCATE('^^',NEWCUSTOMERRECORDS,CUST_LENGTH));
				IF (NEWCUSTOMERPOSITION=0) THEN
					SET NEW_CUSTOMER = NEWCUSTOMERRECORDS;
				ELSE
					SET NEW_CUSTOMER=(SELECT SUBSTRING(NEWCUSTOMERRECORDS,CUST_LENGTH,NEWCUSTOMERPOSITION-1));
					SET NEWCUSTOMERRECORDS=(SELECT SUBSTRING(NEWCUSTOMERRECORDS,NEWCUSTOMERPOSITION+2));
				END IF;
				SET CUSTOMERHEADPOSITION = (SELECT LOCATE(',',CUSTOMERHEADNAME,CUST_LENGTH));
				IF (CUSTOMERHEADPOSITION=0) THEN
					SET CUSTHEADERNAME = CUSTOMERHEADNAME;
				ELSE
					SET CUSTHEADERNAME=(SELECT SUBSTRING(CUSTOMERHEADNAME,CUST_LENGTH,CUSTOMERHEADPOSITION-1));
					SET CUSTOMERHEADNAME=(SELECT SUBSTRING(CUSTOMERHEADNAME,CUSTOMERHEADPOSITION+1));
				END IF;
				IF(OLD_CUSTOMER != NEW_CUSTOMER)THEN
					SET OLD_CUSTOMER=(SELECT CONCAT(CUSTHEADERNAME, '=', OLD_CUSTOMER));
					SET NEW_CUSTOMER=(SELECT CONCAT(CUSTHEADERNAME, '=' ,NEW_CUSTOMER));
					SET NEW_CUSTOMERS=(SELECT CONCAT(NEW_CUSTOMERS,',',NEW_CUSTOMER));
					SET OLD_CUSTOMERS=(SELECT CONCAT(OLD_CUSTOMERS,',',OLD_CUSTOMER));
				END IF;  
				IF (CUSTOMERHEADPOSITION<=0) THEN
					LEAVE  loop_label;
				END IF;
			END LOOP;
			SET CUST_LOCATION=(SELECT LOCATE(',', NEW_CUSTOMERS,1));
			SET NEW_CUSTOMERS=(SELECT SUBSTRING(NEW_CUSTOMERS,CUST_LOCATION+1));
			SET CUST_LOCATION=(SELECT LOCATE(',', OLD_CUSTOMERS,1));
			SET OLD_CUSTOMERS=(SELECT SUBSTRING(OLD_CUSTOMERS,CUST_LOCATION+1));
			IF(RE_CUSTOMER_FIRST_NAME IS NOT NULL AND RE_CUSTOMER_LAST_NAME IS NOT NULL) THEN
				INSERT INTO TICKLER_HISTORY(TP_ID,TTIP_ID,TH_OLD_VALUE,TH_NEW_VALUE,ULD_ID,CUSTOMER_ID)VALUES
				((SELECT TP_ID FROM TICKLER_PROFILE WHERE TP_TYPE='UPDATION'),
				(SELECT TTIP_ID FROM TICKLER_TABID_PROFILE WHERE TTIP_DATA='CUSTOMER'),
				OLD_CUSTOMERS,NEW_CUSTOMERS,USERSTAMP_ID,RE_CUSTOMER_ID);
				UPDATE CUSTOMER SET CUSTOMER_FIRST_NAME = RE_CUSTOMER_FIRST_NAME , CUSTOMER_LAST_NAME = RE_CUSTOMER_LAST_NAME WHERE CUSTOMER_ID = RE_CUSTOMER_ID;
				SET CUSTOMER_RECHECKIN_SUCCESS_FLAG=1;
			END IF;
		END IF;
		SET CUSTCOMPANY_ID = '';
		SET OLD_CCDID = (SELECT CCD_ID FROM CUSTOMER_COMPANY_DETAILS WHERE CUSTOMER_ID = RE_CUSTOMER_ID);
		SET OLD_COMPANYNAME = (SELECT CCD_COMPANY_NAME FROM CUSTOMER_COMPANY_DETAILS WHERE CUSTOMER_ID = RE_CUSTOMER_ID);
		IF(OLD_COMPANYNAME IS NULL)THEN
			SET OLD_COMPANYNAME = 'null';
		END IF;
		SET OLD_COMPANYADDR = (SELECT CCD_COMPANY_ADDR FROM CUSTOMER_COMPANY_DETAILS WHERE CUSTOMER_ID = RE_CUSTOMER_ID);
		IF(OLD_COMPANYADDR IS NULL)THEN
			SET OLD_COMPANYADDR = 'null';
		END IF;
		SET OLD_POSTALCODE = (SELECT CCD_POSTAL_CODE FROM CUSTOMER_COMPANY_DETAILS WHERE CUSTOMER_ID = RE_CUSTOMER_ID);
		IF(OLD_POSTALCODE IS NULL)THEN
			SET OLD_POSTALCODE = 'null';
		END IF;
		SET OLD_OFFICENO = (SELECT CCD_OFFICE_NO FROM CUSTOMER_COMPANY_DETAILS WHERE CUSTOMER_ID = RE_CUSTOMER_ID);
		IF(OLD_OFFICENO IS NULL)THEN
			SET OLD_OFFICENO = 'null';
		END IF;
		SET NEW_COMPANYNAME = RE_COMPANY_NAME;
		IF(NEW_COMPANYNAME IS NULL)THEN
			SET NEW_COMPANYNAME = 'null';
		END IF;
		SET NEW_COMPANYADDR = RE_COMPANY_ADDR;
		IF(NEW_COMPANYADDR IS NULL)THEN
			SET NEW_COMPANYADDR = 'null';
		END IF;
		SET NEW_POSTALCODE = RE_POSTAL_CODE;
		IF(NEW_POSTALCODE IS NULL)THEN
			SET NEW_POSTALCODE = 'null';
		END IF;
		SET NEW_OFFICENO = RE_OFFICE_NO;
		IF(NEW_OFFICENO IS NULL)THEN
			SET NEW_OFFICENO = 'null';
		END IF;
		SET COMPANYHEADERNAMES = 'CCD_ID,CCD_COMPANY_NAME,CCD_COMPANY_ADDR,CCD_POSTAL_CODE,CCD_OFFICE_NO';
		SET OLD_COMPANYTABLEDETAILS = (SELECT CONCAT(OLD_CCDID,'^','^',OLD_COMPANYNAME,'^','^',OLD_COMPANYADDR,'^','^',OLD_POSTALCODE,'^','^',OLD_OFFICENO));
		SET NEW_COMPANYTABLEDETAILS = (SELECT CONCAT(OLD_CCDID,'^','^',NEW_COMPANYNAME,'^','^',NEW_COMPANYADDR,'^','^',NEW_POSTALCODE,'^','^',NEW_OFFICENO));
		IF(OLD_COMPANYTABLEDETAILS != NEW_COMPANYTABLEDETAILS)THEN
			SET OLDCOMPANYRECORDS = OLD_COMPANYTABLEDETAILS;
			SET NEWCOMPANYRECORDS = NEW_COMPANYTABLEDETAILS;
			SET COMPANYHEADNAME = COMPANYHEADERNAMES;
			SET OLD_COMPANYS = (SELECT CONCAT('CCD_ID=',OLD_CCDID));
			SET NEW_COMPANYS = '';
			SET CCD_LENGTH = 1;
			loop_label : LOOP
				SET OLDCOMPANYPOSITION = (SELECT LOCATE('^^',OLDCOMPANYRECORDS,CCD_LENGTH));
				IF (OLDCOMPANYPOSITION=0) THEN
					SET OLD_COMPANYDTL = OLDCOMPANYRECORDS;
				ELSE
					SET OLD_COMPANYDTL =(SELECT SUBSTRING(OLDCOMPANYRECORDS,CCD_LENGTH,OLDCOMPANYPOSITION-1));
					SET OLDCOMPANYRECORDS=(SELECT SUBSTRING(OLDCOMPANYRECORDS,OLDCOMPANYPOSITION+2));
				END IF;
				SET NEWCOMPANYPOSITION = (SELECT LOCATE('^^',NEWCOMPANYRECORDS,CCD_LENGTH));
				IF (NEWCOMPANYPOSITION=0) THEN
					SET NEW_COMPANYDTL = NEWCOMPANYRECORDS;
				ELSE
					SET NEW_COMPANYDTL=(SELECT SUBSTRING(NEWCOMPANYRECORDS,CCD_LENGTH,NEWCOMPANYPOSITION-1));
					SET NEWCOMPANYRECORDS=(SELECT SUBSTRING(NEWCOMPANYRECORDS,NEWCOMPANYPOSITION+2));
				END IF;
				SET COMPANYHEADPOSITION = (SELECT LOCATE(',',COMPANYHEADNAME,CCD_LENGTH));
				IF (COMPANYHEADPOSITION=0) THEN
					SET CUSTCOMPANYHEADERNAME = COMPANYHEADNAME;
				ELSE
					SET CUSTCOMPANYHEADERNAME=(SELECT SUBSTRING(COMPANYHEADNAME,CCD_LENGTH,COMPANYHEADPOSITION-1));
					SET COMPANYHEADNAME=(SELECT SUBSTRING(COMPANYHEADNAME,COMPANYHEADPOSITION+1));
				END IF;
				IF(OLD_COMPANYDTL != NEW_COMPANYDTL)THEN
					SET OLD_COMPANYDTL=(SELECT CONCAT(CUSTCOMPANYHEADERNAME, '=', OLD_COMPANYDTL));
					SET NEW_COMPANYDTL=(SELECT CONCAT(CUSTCOMPANYHEADERNAME, '=' ,NEW_COMPANYDTL));
					SET NEW_COMPANYS=(SELECT CONCAT(NEW_COMPANYS,',',NEW_COMPANYDTL));
					SET OLD_COMPANYS=(SELECT CONCAT(OLD_COMPANYS,',',OLD_COMPANYDTL));
				END IF;  
				IF (COMPANYHEADPOSITION<=0) THEN
					LEAVE  loop_label;
				END IF;
			END LOOP;
			SET COMPANY_LOCATION=(SELECT LOCATE(',', NEW_COMPANYS,1));
			SET NEW_COMPANYS=(SELECT SUBSTRING(NEW_COMPANYS,COMPANY_LOCATION+1));
			IF EXISTS(SELECT CUSTOMER_ID FROM CUSTOMER_COMPANY_DETAILS WHERE CUSTOMER_ID=RE_CUSTOMER_ID) THEN
				INSERT INTO TICKLER_HISTORY(TP_ID,TTIP_ID,TH_OLD_VALUE,TH_NEW_VALUE,ULD_ID,CUSTOMER_ID)VALUES
				((SELECT TP_ID FROM TICKLER_PROFILE WHERE TP_TYPE='UPDATION'),
				(SELECT TTIP_ID FROM TICKLER_TABID_PROFILE WHERE TTIP_DATA='CUSTOMER_COMPANY_DETAILS'),
				OLD_COMPANYS,NEW_COMPANYS,USERSTAMP_ID,RE_CUSTOMER_ID);
				UPDATE CUSTOMER_COMPANY_DETAILS SET CCD_COMPANY_NAME=RE_COMPANY_NAME, CCD_COMPANY_ADDR=RE_COMPANY_ADDR, CCD_POSTAL_CODE=RE_POSTAL_CODE,CCD_OFFICE_NO=RE_OFFICE_NO WHERE CUSTOMER_ID=RE_CUSTOMER_ID;
				SET CUSTOMER_RECHECKIN_SUCCESS_FLAG=1;
			END IF;
		END IF;
		IF NOT EXISTS(SELECT CUSTOMER_ID FROM CUSTOMER_COMPANY_DETAILS WHERE CUSTOMER_ID=(SELECT CUSTOMER_ID FROM CUSTOMER WHERE CUSTOMER_ID=RE_CUSTOMER_ID)) THEN
			IF (RE_COMPANY_NAME IS NOT NULL OR RE_COMPANY_ADDR IS NOT NULL OR RE_POSTAL_CODE IS NOT NULL OR RE_OFFICE_NO IS NOT NULL) THEN
				INSERT INTO CUSTOMER_COMPANY_DETAILS(CUSTOMER_ID, CCD_COMPANY_NAME, CCD_COMPANY_ADDR, CCD_POSTAL_CODE, CCD_OFFICE_NO) VALUES(RE_CUSTOMER_ID, RE_COMPANY_NAME, RE_COMPANY_ADDR, RE_POSTAL_CODE, RE_OFFICE_NO);
				SET CUSTOMER_RECHECKIN_SUCCESS_FLAG=1;
			END IF;
		END IF;
		IF (RE_COMPANY_NAME IS NULL AND RE_COMPANY_ADDR IS NULL AND RE_POSTAL_CODE IS NULL AND RE_OFFICE_NO IS NULL) THEN
			IF EXISTS(SELECT CUSTOMER_ID FROM CUSTOMER_ENTRY_DETAILS WHERE CUSTOMER_ID=RE_CUSTOMER_ID) THEN
				SET CCDID = (SELECT CCD_ID FROM CUSTOMER_COMPANY_DETAILS WHERE CUSTOMER_ID=RE_CUSTOMER_ID);
                IF OLD_COMPANYS IS NOT NULL THEN
				INSERT INTO TICKLER_HISTORY(TP_ID,TTIP_ID,TH_OLD_VALUE,ULD_ID,CUSTOMER_ID)VALUES
				((SELECT TP_ID FROM TICKLER_PROFILE WHERE TP_TYPE='UPDATION'),
				(SELECT TTIP_ID FROM TICKLER_TABID_PROFILE WHERE TTIP_DATA='CUSTOMER_COMPANY_DETAILS'),
				OLD_COMPANYS,USERSTAMP_ID,RE_CUSTOMER_ID);				
			    DELETE FROM CUSTOMER_COMPANY_DETAILS WHERE CUSTOMER_ID=RE_CUSTOMER_ID;
				SET CUSTOMER_RECHECKIN_SUCCESS_FLAG=1;
                END IF;
			END IF;
		END IF;
		IF EXISTS(SELECT CUSTOMER_ID FROM CUSTOMER_ENTRY_DETAILS WHERE CUSTOMER_ID=RE_CUSTOMER_ID) THEN
			INSERT INTO CUSTOMER_ENTRY_DETAILS(CUSTOMER_ID, UNIT_ID, UASD_ID, CED_REC_VER, CED_SD_STIME, CED_SD_ETIME, CED_ED_STIME, CED_ED_ETIME, CED_LEASE_PERIOD, CED_QUARTERS,CED_RECHECKIN, CED_PROCESSING_WAIVED, CED_PRORATED, CED_NOTICE_PERIOD, CED_NOTICE_START_DATE)VALUES
			(RE_CUSTOMER_ID, RE_UNIT_ID, ROOM_TYPE_ID, REC_VER+1, (SELECT CTP_ID FROM CUSTOMER_TIME_PROFILE WHERE CTP_DATA=RE_SD_STIME), (SELECT CTP_ID FROM CUSTOMER_TIME_PROFILE WHERE CTP_DATA=RE_SD_ETIME), (SELECT CTP_ID FROM CUSTOMER_TIME_PROFILE WHERE CTP_DATA=RE_ED_STIME), (SELECT CTP_ID FROM CUSTOMER_TIME_PROFILE WHERE CTP_DATA=RE_ED_ETIME), RE_LEASE_PERIOD, RE_QUARTERS, 'X',RE_PROCESSING_WAIVED, RE_PRORATED, RE_NOTICE_PERIOD, RE_NOTICE_START_DATE);
			SET CUSTOMER_RECHECKIN_SUCCESS_FLAG=1;
		END IF;
		SET CUSTPERSONAL_ID = '';
		SET OLD_CPDID = (SELECT CPD_ID FROM CUSTOMER_PERSONAL_DETAILS WHERE CUSTOMER_ID = RE_CUSTOMER_ID);
		SET OLD_NCID = (SELECT NC_ID FROM CUSTOMER_PERSONAL_DETAILS WHERE CUSTOMER_ID = RE_CUSTOMER_ID);
		SET OLD_EMAIL = (SELECT CPD_EMAIL FROM CUSTOMER_PERSONAL_DETAILS WHERE CUSTOMER_ID = RE_CUSTOMER_ID);
		SET OLD_MOBILE = (SELECT CPD_MOBILE FROM CUSTOMER_PERSONAL_DETAILS WHERE CUSTOMER_ID = RE_CUSTOMER_ID);
		IF(OLD_MOBILE IS NULL)THEN
			SET OLD_MOBILE = 'null';
		END IF;
		SET OLD_INTL_MOBILE = (SELECT CPD_INTL_MOBILE FROM CUSTOMER_PERSONAL_DETAILS WHERE CUSTOMER_ID = RE_CUSTOMER_ID);
		IF(OLD_INTL_MOBILE IS NULL)THEN
			SET OLD_INTL_MOBILE = 'null';
		END IF;
		SET OLD_PASSPORTNO = (SELECT CPD_PASSPORT_NO FROM CUSTOMER_PERSONAL_DETAILS WHERE CUSTOMER_ID = RE_CUSTOMER_ID);
		IF(OLD_PASSPORTNO IS NULL)THEN
			SET OLD_PASSPORTNO = 'null';
		END IF;
		SET OLD_PASSPORTDATE = (SELECT CPD_PASSPORT_DATE FROM CUSTOMER_PERSONAL_DETAILS WHERE CUSTOMER_ID = RE_CUSTOMER_ID);
		IF(OLD_PASSPORTDATE IS NULL)THEN
			SET OLD_PASSPORTDATE = 'null';
		END IF;
		SET OLD_DOB = (SELECT CPD_DOB FROM CUSTOMER_PERSONAL_DETAILS WHERE CUSTOMER_ID = RE_CUSTOMER_ID);
		IF(OLD_DOB IS NULL)THEN
			SET OLD_DOB = 'null';
		END IF;
		SET OLD_EPNO = (SELECT CPD_EP_NO FROM CUSTOMER_PERSONAL_DETAILS WHERE CUSTOMER_ID = RE_CUSTOMER_ID);
		IF(OLD_EPNO IS NULL)THEN
			SET OLD_EPNO = 'null';
		END IF;
		SET OLD_EPDATE = (SELECT CPD_EP_DATE FROM CUSTOMER_PERSONAL_DETAILS WHERE CUSTOMER_ID = RE_CUSTOMER_ID);
		IF(OLD_EPDATE IS NULL)THEN
			SET OLD_EPDATE = 'null';
		END IF;
		SET OLD_COMMENTS = (SELECT CPD_COMMENTS FROM CUSTOMER_PERSONAL_DETAILS WHERE CUSTOMER_ID = RE_CUSTOMER_ID);
		IF(OLD_COMMENTS IS NULL)THEN
			SET OLD_COMMENTS = 'null';
		END IF;
		SET NEW_NCID = NATIONALITY_DETAILS;
		SET NEW_EMAIL = RE_EMAIL;
		SET NEW_MOBILE = RE_MOBILE;
		IF(NEW_MOBILE IS NULL)THEN
			SET NEW_MOBILE = 'null';
		END IF;
		SET NEW_INTL_MOBILE = RE_INTL_MOBILE;
		IF(NEW_INTL_MOBILE IS NULL)THEN
			SET NEW_INTL_MOBILE = 'null';
		END IF;
		SET NEW_PASSPORTNO = RE_PASSPORT_NO;
		IF(NEW_PASSPORTNO IS NULL)THEN
			SET NEW_PASSPORTNO = 'null';
		END IF;
		SET NEW_PASSPORTDATE = RE_PASSPORT_DATE;
		IF(NEW_PASSPORTDATE IS NULL)THEN
			SET NEW_PASSPORTDATE = 'null';
		END IF;
		SET NEW_DOB = RE_DOB;
		IF(NEW_DOB IS NULL)THEN
			SET NEW_DOB = 'null';
		END IF;
		SET NEW_EPNO = RE_EP_NO;
		IF(NEW_EPNO IS NULL)THEN
			SET NEW_EPNO = 'null';
		END IF;
		SET NEW_EPDATE = RE_EP_DATE;
		IF(NEW_EPDATE IS NULL)THEN
			SET NEW_EPDATE = 'null';
		END IF;
		SET NEW_COMMENTS = RE_COMMENTS;
		IF(NEW_COMMENTS IS NULL)THEN
			SET NEW_COMMENTS = 'null';
		END IF;
		SET PERSONALHEADERNAMES = 'CPD_ID,NC_ID,CPD_MOBILE,CPD_INTL_MOBILE,CPD_EMAIL,CPD_PASSPORT_NO,CPD_PASSPORT_DATE,CPD_DOB,CPD_EP_NO,CPD_EP_DATE,CPD_COMMENTS';
		SET OLD_PERSONALTABLEDETAILS = (SELECT CONCAT(OLD_CPDID,'^','^',OLD_NCID,'^','^',OLD_MOBILE,'^','^',OLD_INTL_MOBILE,'^','^',OLD_EMAIL,'^','^',OLD_PASSPORTNO,'^','^',OLD_PASSPORTDATE,'^','^',OLD_DOB,'^','^',OLD_EPNO,'^','^',OLD_EPDATE,'^','^',OLD_COMMENTS));
		SET NEW_PERSONALTABLEDETAILS = (SELECT CONCAT(OLD_CPDID,'^','^',NEW_NCID,'^','^',NEW_MOBILE,'^','^',NEW_INTL_MOBILE,'^','^',NEW_EMAIL,'^','^',NEW_PASSPORTNO,'^','^',NEW_PASSPORTDATE,'^','^',NEW_DOB,'^','^',NEW_EPNO,'^','^',NEW_EPDATE,'^','^',NEW_COMMENTS));
		IF(OLD_PERSONALTABLEDETAILS != NEW_PERSONALTABLEDETAILS)THEN
			SET OLDPERSONALRECORDS = OLD_PERSONALTABLEDETAILS;
			SET NEWPERSONALRECORDS = NEW_PERSONALTABLEDETAILS;
			SET PERSONALHEADNAME = PERSONALHEADERNAMES;
			SET OLD_CUSTOMERPERSONALS = (SELECT CONCAT('CPD_ID=',OLD_CPDID));
			SET NEW_CUSTOMERPERSONALS = '';
			SET CPD_LENGTH = 1;
			loop_label : LOOP
				SET OLDPERSONALPOSITION = (SELECT LOCATE('^^',OLDPERSONALRECORDS,CPD_LENGTH));
				IF (OLDPERSONALPOSITION=0) THEN
					SET OLD_PERSONALDTL = OLDPERSONALRECORDS;
				ELSE
					SET OLD_PERSONALDTL =(SELECT SUBSTRING(OLDPERSONALRECORDS,CPD_LENGTH,OLDPERSONALPOSITION-1));
					SET OLDPERSONALRECORDS=(SELECT SUBSTRING(OLDPERSONALRECORDS,OLDPERSONALPOSITION+2));
				END IF;
				SET NEWPERSONALPOSITION = (SELECT LOCATE('^^',NEWPERSONALRECORDS,CPD_LENGTH));
				IF (NEWPERSONALPOSITION=0) THEN
					SET NEW_PERSONALDTL = NEWPERSONALRECORDS;
				ELSE
					SET NEW_PERSONALDTL=(SELECT SUBSTRING(NEWPERSONALRECORDS,CPD_LENGTH,NEWPERSONALPOSITION-1));
					SET NEWPERSONALRECORDS=(SELECT SUBSTRING(NEWPERSONALRECORDS,NEWPERSONALPOSITION+2));
				END IF;
				SET PERSONALHEADPOSITION = (SELECT LOCATE(',',PERSONALHEADNAME,CPD_LENGTH));
				IF (PERSONALHEADPOSITION=0) THEN
					SET CUSTPERSONALHEADERNAME = PERSONALHEADNAME;
				ELSE
					SET CUSTPERSONALHEADERNAME=(SELECT SUBSTRING(PERSONALHEADNAME,CPD_LENGTH,PERSONALHEADPOSITION-1));
					SET PERSONALHEADNAME=(SELECT SUBSTRING(PERSONALHEADNAME,PERSONALHEADPOSITION+1));
				END IF;
				IF(OLD_PERSONALDTL != NEW_PERSONALDTL)THEN
					SET OLD_PERSONALDTL=(SELECT CONCAT(CUSTPERSONALHEADERNAME, '=', OLD_PERSONALDTL));
					SET NEW_PERSONALDTL=(SELECT CONCAT(CUSTPERSONALHEADERNAME, '=' ,NEW_PERSONALDTL));
					SET NEW_CUSTOMERPERSONALS=(SELECT CONCAT(NEW_CUSTOMERPERSONALS,',',NEW_PERSONALDTL));
					SET OLD_CUSTOMERPERSONALS=(SELECT CONCAT(OLD_CUSTOMERPERSONALS,',',OLD_PERSONALDTL));
				END IF;  
				IF (PERSONALHEADPOSITION<=0) THEN
					LEAVE  loop_label;
				END IF;
			END LOOP;
			SET PERSONAL_LOCATION=(SELECT LOCATE(',', NEW_CUSTOMERPERSONALS,1));
			SET NEW_CUSTOMERPERSONALS=(SELECT SUBSTRING(NEW_CUSTOMERPERSONALS,PERSONAL_LOCATION+1));
			IF EXISTS(SELECT CUSTOMER_ID FROM CUSTOMER_PERSONAL_DETAILS WHERE CUSTOMER_ID=RE_CUSTOMER_ID) THEN
				INSERT INTO TICKLER_HISTORY(TP_ID,TTIP_ID,TH_OLD_VALUE,TH_NEW_VALUE,ULD_ID,CUSTOMER_ID)VALUES
				((SELECT TP_ID FROM TICKLER_PROFILE WHERE TP_TYPE='UPDATION'),
				(SELECT TTIP_ID FROM TICKLER_TABID_PROFILE WHERE TTIP_DATA='CUSTOMER_PERSONAL_DETAILS'),
				OLD_CUSTOMERPERSONALS,NEW_CUSTOMERPERSONALS,USERSTAMP_ID,RE_CUSTOMER_ID);
				UPDATE CUSTOMER_PERSONAL_DETAILS SET NC_ID=NATIONALITY_DETAILS, CPD_MOBILE=RE_MOBILE, CPD_INTL_MOBILE=RE_INTL_MOBILE, CPD_EMAIL=RE_EMAIL,CPD_PASSPORT_NO=RE_PASSPORT_NO, CPD_PASSPORT_DATE=RE_PASSPORT_DATE, CPD_DOB=RE_DOB, CPD_EP_NO=RE_EP_NO, CPD_EP_DATE=RE_EP_DATE, CPD_COMMENTS=RE_COMMENTS WHERE CUSTOMER_ID=RE_CUSTOMER_ID;
				SET CUSTOMER_RECHECKIN_SUCCESS_FLAG=1;
			END IF;
		END IF;
		IF RE_CARD_NO IS NOT NULL AND RE_VALID_FROM IS NOT NULL THEN
			SET TEMP_ACCESS_CARD = RE_CARD_NO;
			SET ACCESS_LENGTH=1;
			loop_label:  LOOP
				SET ACCESS_POSITION=(SELECT LOCATE(',', TEMP_ACCESS_CARD,ACCESS_LENGTH));
				IF ACCESS_POSITION<=0 THEN
					SET ACCESS_CARD_NO=TEMP_ACCESS_CARD;
				ELSE
					SELECT SUBSTRING(TEMP_ACCESS_CARD,ACCESS_LENGTH,ACCESS_POSITION-1) INTO ACCESS_CARD_NO;
					SET TEMP_ACCESS_CARD=(SELECT SUBSTRING(TEMP_ACCESS_CARD,ACCESS_POSITION+1));
				END IF;
				SET ACCESS_LOCATION=(SELECT LOCATE(ACCESS_CARD_NO, RE_GUEST_CARD));
				SET GUEST_ACCESS_LENGTH=(SELECT LENGTH(ACCESS_CARD_NO));
				SET GUEST_FLAG=(SELECT SUBSTRING(RE_GUEST_CARD,ACCESS_LOCATION+GUEST_ACCESS_LENGTH+1,1));
				SET GUEST_FLAG=TRIM(GUEST_FLAG);
				IF GUEST_FLAG='' THEN
					SET GUEST_FLAG=NULL;
				END IF;
				SET UASDID = (SELECT UASD_ID FROM EMPLOYEE_CARD_DETAILS WHERE UASD_ID=(SELECT UASD_ID FROM UNIT_ACCESS_STAMP_DETAILS WHERE UASD_ACCESS_CARD=ACCESS_CARD_NO));
				IF(UASDID IS NOT NULL) THEN
					SET ECDID = (SELECT ECD_ID FROM EMPLOYEE_CARD_DETAILS WHERE UASD_ID = UASDID);
					CALL SP_CUSTOMER_EMPLOYEE_CARD_DELETION(40,ECDID,USERSTAMP_ID);
					SET CUSTOMER_RECHECKIN_SUCCESS_FLAG=1;
				END IF;
				INSERT INTO CUSTOMER_ACCESS_CARD_DETAILS (CUSTOMER_ID,UASD_ID,CACD_VALID_FROM,CACD_GUEST_CARD,ULD_ID) VALUES(RE_CUSTOMER_ID,(SELECT UASD_ID FROM UNIT_ACCESS_STAMP_DETAILS WHERE UASD_ACCESS_CARD=ACCESS_CARD_NO AND UNIT_ID=(SELECT UNIT_ID FROM UNIT WHERE UNIT_NO=RE_UNIT_NO)),RE_VALID_FROM,GUEST_FLAG,USERSTAMP_ID);
				SET CUSTOMER_RECHECKIN_SUCCESS_FLAG=1;
				UPDATE UNIT_ACCESS_STAMP_DETAILS SET UASD_ACCESS_ACTIVE='X',UASD_ACCESS_INVENTORY=NULL WHERE UASD_ACCESS_CARD=ACCESS_CARD_NO AND UNIT_ID=(SELECT UNIT_ID FROM UNIT WHERE UNIT_NO=RE_UNIT_NO);
				SET CUSTOMER_RECHECKIN_SUCCESS_FLAG=1;
				IF ACCESS_POSITION<=0 THEN
					LEAVE  loop_label;
				END IF;
			END LOOP;
		END IF;
		IF RE_STARTDATE IS NOT NULL AND RE_ENDDATE IS NOT NULL THEN
			IF RE_CARD_NO IS NOT NULL THEN
				SET TEMP_ACCESS_CARD = RE_CARD_NO;
				SET ACCESS_LENGTH=1;
				loop_label:  LOOP
					SET ACCESS_POSITION=(SELECT LOCATE(',', TEMP_ACCESS_CARD,ACCESS_LENGTH));
					IF ACCESS_POSITION<=0 THEN
						SET ACCESS_CARD_NO=TEMP_ACCESS_CARD;
					ELSE
						SELECT SUBSTRING(TEMP_ACCESS_CARD,ACCESS_LENGTH,ACCESS_POSITION-1) INTO ACCESS_CARD_NO;
						SET TEMP_ACCESS_CARD=(SELECT SUBSTRING(TEMP_ACCESS_CARD,ACCESS_POSITION+1));
					END IF;
					SET ACCESS_LOCATION=(SELECT LOCATE(ACCESS_CARD_NO, RE_GUEST_CARD));
					SET GUEST_ACCESS_LENGTH=(SELECT LENGTH(ACCESS_CARD_NO));
					SET GUEST_FLAG=(SELECT SUBSTRING(RE_GUEST_CARD,ACCESS_LOCATION+GUEST_ACCESS_LENGTH+1,1));
					SET GUEST_FLAG=TRIM(GUEST_FLAG);
					IF GUEST_FLAG='' THEN
						SET GUEST_FLAG=NULL;
					END IF;
					SET UASDID = (SELECT UASD_ID FROM EMPLOYEE_CARD_DETAILS WHERE UASD_ID=(SELECT UASD_ID FROM UNIT_ACCESS_STAMP_DETAILS WHERE UASD_ACCESS_CARD=ACCESS_CARD_NO));
					IF(UASDID IS NOT NULL) THEN
						SET ECDID = (SELECT ECD_ID FROM EMPLOYEE_CARD_DETAILS WHERE UASD_ID = UASDID);
						CALL SP_CUSTOMER_EMPLOYEE_CARD_DELETION(40,ECDID,USERSTAMP_ID);
						SET CUSTOMER_RECHECKIN_SUCCESS_FLAG=1;
					END IF;
					INSERT INTO CUSTOMER_LP_DETAILS (CUSTOMER_ID,CED_REC_VER,UASD_ID,CLP_STARTDATE,CLP_ENDDATE,CLP_GUEST_CARD,ULD_ID)
					VALUES (RE_CUSTOMER_ID,REC_VER+1,(SELECT UASD_ID FROM UNIT_ACCESS_STAMP_DETAILS WHERE UASD_ACCESS_CARD=ACCESS_CARD_NO AND UNIT_ID=(SELECT UNIT_ID FROM UNIT WHERE UNIT_NO=RE_UNIT_NO)),RE_STARTDATE,RE_ENDDATE,GUEST_FLAG,USERSTAMP_ID);
					SET CUSTOMER_RECHECKIN_SUCCESS_FLAG=1;
					IF ACCESS_POSITION<=0 THEN
						LEAVE  loop_label;
					END IF;
				END LOOP;
			ELSE
				INSERT INTO CUSTOMER_LP_DETAILS (CUSTOMER_ID,CED_REC_VER,UASD_ID,CLP_STARTDATE,CLP_ENDDATE,CLP_GUEST_CARD,ULD_ID)
				VALUES (RE_CUSTOMER_ID,REC_VER+1,RE_CARD_NO,RE_STARTDATE,RE_ENDDATE,GUEST_FLAG,USERSTAMP_ID);
				SET CUSTOMER_RECHECKIN_SUCCESS_FLAG=1;
			END IF;
		END IF;
		IF RE_RENT IS NOT NULL THEN
			INSERT INTO CUSTOMER_FEE_DETAILS (CUSTOMER_ID,CED_REC_VER,CPP_ID,CFD_AMOUNT) VALUES (RE_CUSTOMER_ID,REC_VER+1,1,RE_RENT);
			SET CUSTOMER_RECHECKIN_SUCCESS_FLAG=1;
		END IF;
		IF RE_DEPOSIT IS NOT NULL THEN
			INSERT INTO CUSTOMER_FEE_DETAILS (CUSTOMER_ID,CED_REC_VER,CPP_ID,CFD_AMOUNT) VALUES (RE_CUSTOMER_ID,REC_VER+1,2,RE_DEPOSIT);
			SET CUSTOMER_RECHECKIN_SUCCESS_FLAG=1;
		END IF;
		IF RE_PROCESSING_FEE IS NOT NULL THEN
			INSERT INTO CUSTOMER_FEE_DETAILS (CUSTOMER_ID,CED_REC_VER,CPP_ID,CFD_AMOUNT) VALUES (RE_CUSTOMER_ID,REC_VER+1,3,RE_PROCESSING_FEE);
			SET CUSTOMER_RECHECKIN_SUCCESS_FLAG=1;
		END IF;
		IF RE_AIRCON_FIXED_FEE IS NOT NULL THEN
			INSERT INTO CUSTOMER_FEE_DETAILS (CUSTOMER_ID,CED_REC_VER,CPP_ID,CFD_AMOUNT) VALUES (RE_CUSTOMER_ID,REC_VER+1,4,RE_AIRCON_FIXED_FEE);
			SET CUSTOMER_RECHECKIN_SUCCESS_FLAG=1;
		END IF;
		IF RE_ELECTRICITY_CAP IS NOT NULL THEN
			INSERT INTO CUSTOMER_FEE_DETAILS (CUSTOMER_ID,CED_REC_VER,CPP_ID,CFD_AMOUNT) VALUES (RE_CUSTOMER_ID,REC_VER+1,5,RE_ELECTRICITY_CAP);
			SET CUSTOMER_RECHECKIN_SUCCESS_FLAG=1;
		END IF;
		IF RE_DRYCLEAN_FEE IS NOT NULL THEN
			INSERT INTO CUSTOMER_FEE_DETAILS (CUSTOMER_ID,CED_REC_VER,CPP_ID,CFD_AMOUNT) VALUES (RE_CUSTOMER_ID,REC_VER+1,6,RE_DRYCLEAN_FEE);
			SET CUSTOMER_RECHECKIN_SUCCESS_FLAG=1;
		END IF;
		IF RE_AIRCON_QUARTELY_FEE IS NOT NULL THEN
			INSERT INTO CUSTOMER_FEE_DETAILS (CUSTOMER_ID,CED_REC_VER,CPP_ID,CFD_AMOUNT) VALUES (RE_CUSTOMER_ID,REC_VER+1,7,RE_AIRCON_QUARTELY_FEE);
			SET CUSTOMER_RECHECKIN_SUCCESS_FLAG=1;
		END IF;
		IF RE_CHECKOUT_CLEANING_FEE IS NOT NULL THEN
			INSERT INTO CUSTOMER_FEE_DETAILS (CUSTOMER_ID,CED_REC_VER,CPP_ID,CFD_AMOUNT) VALUES (RE_CUSTOMER_ID,REC_VER+1,8,RE_CHECKOUT_CLEANING_FEE);
			SET CUSTOMER_RECHECKIN_SUCCESS_FLAG=1;
		END IF;
	END IF;
END;
