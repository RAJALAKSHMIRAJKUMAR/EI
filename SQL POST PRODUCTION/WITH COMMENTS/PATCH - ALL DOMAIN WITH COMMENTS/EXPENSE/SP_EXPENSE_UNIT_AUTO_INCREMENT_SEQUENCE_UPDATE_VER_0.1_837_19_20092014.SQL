-- VERSION:0.1 --SDATE:19/09/2014 --EDATE:20/09/2014 --ISSUE:837 --COMMENTNO:19 --DESC:SP TO UPDATE EXPENSE_UNIT TABLE AUTOINCREMENT DYNAMICALLY --DONE BY:RL
DROP PROCEDURE IF EXISTS SP_EXPENSE_UNIT_AUTO_INCREMENT_SEQUENCE_UPDATE;
CREATE PROCEDURE SP_EXPENSE_UNIT_AUTO_INCREMENT_SEQUENCE_UPDATE(
IN FILENAME TEXT,
IN USERSTAMP VARCHAR(50),
OUT SUCCESS_MESSAGE TEXT)

BEGIN

-- VARIABLE DECLARE FOR SHOW SUCCESS MESSAGE
	DECLARE FAILURE_ECN_DATA TEXT;
	DECLARE FAIL_ECNDATA TEXT;
	DECLARE SUCCESS_ECNDATA TEXT;
	DECLARE FAILURE_ECNDATA TEXT;
	DECLARE SUCCESSECNDATA TEXT;
	DECLARE FAILUREECNDATA TEXT;
	DECLARE PATCHFILENAME VARCHAR(100);
	DECLARE PHSTATUS TINYINT;

	DECLARE MINCOUNT INTEGER;
	DECLARE MAXCOUNT INTEGER;

	DECLARE MIN_TEUID INTEGER;
	DECLARE MAX_TEUID INTEGER;
	DECLARE MINID INTEGER;

	DECLARE TABLEID INTEGER;
	DECLARE TICKLER_DELCOUNT INTEGER;
	DECLARE TICKLER_UPDATECOUNT INTEGER;

	DECLARE MINTEUID INTEGER;
	DECLARE MAXTEUID INTEGER;
	DECLARE OLDEUID INTEGER;
	DECLARE NEWEUID INTEGER;

	DECLARE MIN_DELID INTEGER;
	DECLARE MAX_DELID INTEGER;
	DECLARE TICKLER_OLDVALUE TEXT;
	DECLARE TICKLER_OLD_VAL_POS INTEGER;
	DECLARE TICKLER_OLD_VAL_POS1 INTEGER;
	DECLARE TICKLER_OLD_SUBSTRING TEXT;
	DECLARE TICKLER_OLD_VAL_POS2 INTEGER;
	DECLARE TICKLER_OLD_SUB_VALUE TEXT;
	DECLARE TICKLER_OLD_NEW_STRING TEXT;
	DECLARE TICKLER_REPLACE_STRING TEXT;

	DECLARE MIN_UPDATEID INTEGER;
	DECLARE MAX_UPDATEID INTEGER;
	DECLARE OLDVALUE TEXT;
	DECLARE OLD_VAL_POS INTEGER;
	DECLARE OLD_VAL_POS1 INTEGER;
	DECLARE OLD_VAL_POS2 INTEGER;
	DECLARE OLD_SUBSTRING TEXT;
	DECLARE OLD_SUB_VALUE TEXT;
	DECLARE OLD_NEW_STRING TEXT;
	DECLARE REPLACE_STRING TEXT;

-- QUERY FOR ROLLBACK COMMAND
	DECLARE EXIT HANDLER FOR SQLEXCEPTION
	BEGIN 
		ROLLBACK;
		DROP TABLE IF EXISTS TEMP_EXPENSE_UNIT_EUID;
		DROP TABLE IF EXISTS TEMP_EXPENSE_UNIT_TICKLER_DELETION;
		DROP TABLE IF EXISTS TEMP_EXPENSE_UNIT_TICKLER_UPDATION;
		INSERT INTO PATCH_HISTORY(PO_ID,PH_FILE_NAME,PH_STATUS,ULD_ID) VALUES (8,FILENAME,0,(SELECT ULD_ID FROM USER_LOGIN_DETAILS WHERE ULD_LOGINID=USERSTAMP));
	END;

-- QUERY FOR START TRANSACTION
	SET AUTOCOMMIT = 0;
 	START TRANSACTION;
	SET FOREIGN_KEY_CHECKS = 0;

-- QUERY FOR GET ERROR MSG FROM ERROR_MESSAGE_CONFIGURATION TABLE
	SET SUCCESS_ECNDATA =  (SELECT EMC_DATA FROM ERROR_MESSAGE_CONFIGURATION WHERE EMC_ID=469);
	SET FAILURE_ECNDATA =  (SELECT EMC_DATA FROM ERROR_MESSAGE_CONFIGURATION WHERE EMC_ID=470);
	SET FAILURE_ECN_DATA = (SELECT EMC_DATA FROM ERROR_MESSAGE_CONFIGURATION WHERE EMC_ID=473);
	SET SUCCESSECNDATA = (SELECT REPLACE(SUCCESS_ECNDATA,'[FILENAME]',FILENAME));
	SET FAILUREECNDATA = (SELECT REPLACE(FAILURE_ECNDATA,'[FILENAME]',FILENAME));
	SET FAIL_ECNDATA = (SELECT REPLACE(FAILURE_ECN_DATA,'[FILENAME]',FILENAME));

-- QUERY FOR SHOW ERROR MSG THE FILE IS ALDEARY EXISTS IN PATCH_HISTORY TABLE
	IF EXISTS(SELECT PH_FILE_NAME FROM PATCH_HISTORY WHERE PH_FILE_NAME = FILENAME AND PH_STATUS = 1) THEN
		SET SUCCESS_MESSAGE = FAILUREECNDATA;
	END IF;

	SET PATCHFILENAME = (SELECT PH_FILE_NAME FROM PATCH_HISTORY WHERE PH_FILE_NAME = FILENAME);
	SET PHSTATUS = (SELECT PH_STATUS FROM PATCH_HISTORY WHERE PH_FILE_NAME = FILENAME AND PH_STATUS = 0);

	IF ((PATCHFILENAME IS NOT NULL) AND (PHSTATUS = 0)) OR (PATCHFILENAME IS NULL)THEN
		
-- QUERY FOR GET MINIMUM EU_ID FROM EXPENSE_UNIT (TS > 2014-07-16)	
		SET MINCOUNT= (SELECT MIN(EU_ID) FROM EXPENSE_UNIT WHERE EU_TIMESTAMP > '2014-07-16');

-- QUERY FOR GET MAXIMUM EU_ID FROM EXPENSE_UNIT TABLE
		SET MAXCOUNT = (SELECT MAX(EU_ID) FROM EXPENSE_UNIT);

-- QUERY FOR DROP, CREATE TEMP_EXPENSE_UNIT_EUID
		DROP TABLE IF EXISTS TEMP_EXPENSE_UNIT_EUID;
		CREATE TABLE TEMP_EXPENSE_UNIT_EUID(
		TEU_ID INTEGER AUTO_INCREMENT PRIMARY KEY NOT NULL,
		OLD_EUID INTEGER,
		NEW_EUID INTEGER);

-- QUERY FOR INSERT OLD_EUID IN TEMP_EXPENSE_UNIT_EUID TABLE
		WHILE(MINCOUNT <= MAXCOUNT) DO 

			INSERT INTO TEMP_EXPENSE_UNIT_EUID(OLD_EUID)VALUES(MINCOUNT);

		SET MINCOUNT = MINCOUNT+1;
		END WHILE;

-- QUERY FOR GET MINIMUM, MAXIMUM TEU_ID FROM TEMP_EXPENSE_UNIT_EUID
		SET MIN_TEUID = (SELECT MIN(TEU_ID) FROM TEMP_EXPENSE_UNIT_EUID);
		SET MAX_TEUID = (SELECT MAX(TEU_ID) FROM TEMP_EXPENSE_UNIT_EUID);

-- QUERY FOR GET MINIMUM EU_ID FROM EXPENSE_UNIT TABLE (TS < 2014-07-16)
		SET MINID = (SELECT MAX(EU_ID) FROM EXPENSE_UNIT WHERE EU_TIMESTAMP < '2014-07-16');

-- QUERY FOR UPDATE NEW_EUID IN TEMP_EXPENSE_UNIT_EUID TABLE
		WHILE(MIN_TEUID <= MAX_TEUID) DO 

			SET MINID = MINID+1;
			UPDATE TEMP_EXPENSE_UNIT_EUID SET NEW_EUID = MINID WHERE TEU_ID = MIN_TEUID;

		SET MIN_TEUID = MIN_TEUID+1;
		END WHILE;

-- QUERY FOR GET MINIMUM, MAXIMUM TEU_ID FROM TEMP_EXPENSE_UNIT_EUID
		SET MINTEUID = (SELECT MIN(TEU_ID) FROM TEMP_EXPENSE_UNIT_EUID);
		SET MAXTEUID = (SELECT MAX(TEU_ID) FROM TEMP_EXPENSE_UNIT_EUID);

-- QUERY FOR GET TABLEID FORM TICKLER_TABID PROFILE
		SET TABLEID = (SELECT TTIP_ID FROM TICKLER_TABID_PROFILE WHERE TTIP_DATA = 'EXPENSE_UNIT');

-- QUERY FOR GET COUNT FROM TICKLER_HISTORY TABLE FOR EXPENSE_UNIT WHERE TP_ID = 2
		SET TICKLER_DELCOUNT = (SELECT COUNT(*) FROM TICKLER_HISTORY WHERE TTIP_ID = TABLEID AND TP_ID = 2);

-- QUERY FOR INSERT VALUES IN TEMP_EXPENSE_UNIT_TICKLER_DELETION FROM TICKLER_HISTORY TABLE FOR EXPENSE_UNIT WHERE TP_ID = 2
		IF(TICKLER_DELCOUNT > 0) THEN

			DROP TABLE IF EXISTS TEMP_EXPENSE_UNIT_TICKLER_DELETION;
			CREATE TABLE TEMP_EXPENSE_UNIT_TICKLER_DELETION(
			ID INTEGER AUTO_INCREMENT PRIMARY KEY NOT NULL,
			THID INTEGER,
			THOLDVALUE TEXT);
			INSERT INTO TEMP_EXPENSE_UNIT_TICKLER_DELETION(THID,THOLDVALUE)
			SELECT TH_ID,TH_OLD_VALUE FROM TICKLER_HISTORY WHERE TTIP_ID = TABLEID AND TP_ID = 2;

		END IF;

-- QUERY FOR GET COUNT FROM TICKLER_HISTORY TABLE FOR EXPENSE_UNIT WHERE TP_ID = 1
		SET TICKLER_UPDATECOUNT = (SELECT COUNT(*) FROM TICKLER_HISTORY WHERE TTIP_ID = TABLEID AND TP_ID = 1);

-- QUERY FOR INSERT VALUES IN TEMP_EXPENSE_UNIT_TICKLER_UPDATION FROM TICKLER_HISTORY TABLE FOR EXPENSE_UNIT WHERE TP_ID = 1
		DROP TABLE IF EXISTS TEMP_EXPENSE_UNIT_TICKLER_UPDATION;
		CREATE TABLE TEMP_EXPENSE_UNIT_TICKLER_UPDATION(
		ID INTEGER AUTO_INCREMENT PRIMARY KEY NOT NULL,
		THID INTEGER,
		THOLDVALUE TEXT);
		INSERT INTO TEMP_EXPENSE_UNIT_TICKLER_UPDATION(THID,THOLDVALUE)
		SELECT TH_ID,TH_OLD_VALUE FROM TICKLER_HISTORY WHERE TTIP_ID = TABLEID AND TP_ID = 1;

		WHILE(MINTEUID <= MAXTEUID) DO 

-- QUERY FOR GET OLDEUID,NEWEUID FROM TEMP_EXPENSE_UNIT_EUID FOR MINTEUID TO MAXTEUID
			SET OLDEUID = (SELECT OLD_EUID FROM TEMP_EXPENSE_UNIT_EUID WHERE TEU_ID = MINTEUID);
			SET NEWEUID = (SELECT NEW_EUID FROM TEMP_EXPENSE_UNIT_EUID WHERE TEU_ID = MINTEUID);

-- QUERY FOR GET MINIMUM, MAXIMUM ID FROM TEMP_EXPENSE_UNIT_TICKLER_DELETION
			SET MIN_DELID = (SELECT MIN(ID) FROM TEMP_EXPENSE_UNIT_TICKLER_DELETION);
			SET MAX_DELID = (SELECT MAX(ID) FROM TEMP_EXPENSE_UNIT_TICKLER_DELETION);

-- QUERY FOR GET MINIMUM, MAXIMUM ID FROM TEMP_EXPENSE_UNIT_TICKLER_UPDATION
			SET MIN_UPDATEID = (SELECT MIN(ID) FROM TEMP_EXPENSE_UNIT_TICKLER_UPDATION);
			SET MAX_UPDATEID = (SELECT MAX(ID) FROM TEMP_EXPENSE_UNIT_TICKLER_UPDATION);

			IF EXISTS(SELECT EU_ID FROM EXPENSE_UNIT WHERE EU_ID = OLDEUID)THEN

				UPDATE EXPENSE_UNIT SET EU_ID = NEWEUID , EU_TIMESTAMP = EU_TIMESTAMP WHERE EU_ID = OLDEUID;
				
				IF(TICKLER_UPDATECOUNT > 0) THEN

					IF(MIN_UPDATEID IS NOT NULL AND MAX_UPDATEID IS NOT NULL) THEN
	
						WHILE(MIN_UPDATEID <= MAX_UPDATEID) DO 
	
							SET OLDVALUE = (SELECT THOLDVALUE FROM TEMP_EXPENSE_UNIT_TICKLER_UPDATION WHERE ID = MIN_UPDATEID); 
							SET OLD_VAL_POS = (SELECT LOCATE('EU_ID',OLDVALUE));
							SET OLD_VAL_POS1 = (SELECT LOCATE(',',OLDVALUE,OLD_VAL_POS));
	
							IF(OLD_VAL_POS1 = 0) THEN
								SET OLD_SUBSTRING = (SELECT SUBSTRING(OLDVALUE,OLD_VAL_POS));
							ELSE
								SET OLD_SUBSTRING = (SELECT SUBSTRING(OLDVALUE,OLD_VAL_POS,(OLD_VAL_POS1-OLD_VAL_POS)));
							END IF;
	
							SET OLD_VAL_POS2 = (SELECT LOCATE('=',OLD_SUBSTRING));
							SET OLD_SUB_VALUE = (SELECT SUBSTRING(OLD_SUBSTRING,(OLD_VAL_POS2+1)));
	
							IF(OLD_SUB_VALUE = OLDEUID) THEN
								SET OLD_NEW_STRING = (SELECT REPLACE(OLD_SUBSTRING,OLD_SUB_VALUE,NEWEUID));
								SET REPLACE_STRING = (SELECT REPLACE(OLDVALUE,OLD_SUBSTRING,OLD_NEW_STRING));
								UPDATE TICKLER_HISTORY SET TH_OLD_VALUE=REPLACE_STRING , TH_TIMESTAMP=TH_TIMESTAMP WHERE TH_ID=(SELECT THID FROM TEMP_EXPENSE_UNIT_TICKLER_UPDATION WHERE ID=MIN_UPDATEID);
							END IF;
	
						SET MIN_UPDATEID = MIN_UPDATEID+1;
						END WHILE;
	
					END IF;
					
				END IF;

			ELSE

				IF(MIN_DELID IS NOT NULL AND MAX_DELID IS NOT NULL) THEN

					WHILE(MIN_DELID <= MAX_DELID) DO 

						SET TICKLER_OLDVALUE = (SELECT THOLDVALUE FROM TEMP_EXPENSE_UNIT_TICKLER_DELETION WHERE ID = MIN_DELID); 
						SET TICKLER_OLD_VAL_POS = (SELECT LOCATE('EU_ID',TICKLER_OLDVALUE));
						SET TICKLER_OLD_VAL_POS1 = (SELECT LOCATE(',',TICKLER_OLDVALUE,TICKLER_OLD_VAL_POS));

						IF(TICKLER_OLD_VAL_POS1 = 0) THEN
							SET TICKLER_OLD_SUBSTRING = (SELECT SUBSTRING(TICKLER_OLDVALUE,TICKLER_OLD_VAL_POS));
						ELSE
							SET TICKLER_OLD_SUBSTRING = (SELECT SUBSTRING(TICKLER_OLDVALUE,TICKLER_OLD_VAL_POS,(TICKLER_OLD_VAL_POS1-TICKLER_OLD_VAL_POS)));
						END IF;

						SET TICKLER_OLD_VAL_POS2 = (SELECT LOCATE('=',TICKLER_OLD_SUBSTRING));
						SET TICKLER_OLD_SUB_VALUE = (SELECT SUBSTRING(TICKLER_OLD_SUBSTRING,(TICKLER_OLD_VAL_POS2+1)));

						IF(TICKLER_OLD_SUB_VALUE = OLDEUID) THEN
							SET TICKLER_OLD_NEW_STRING = (SELECT REPLACE(TICKLER_OLD_SUBSTRING,TICKLER_OLD_SUB_VALUE,NEWEUID));
							SET TICKLER_REPLACE_STRING = (SELECT REPLACE(TICKLER_OLDVALUE,TICKLER_OLD_SUBSTRING,TICKLER_OLD_NEW_STRING));
							UPDATE TICKLER_HISTORY SET TH_OLD_VALUE=TICKLER_REPLACE_STRING , TH_TIMESTAMP=TH_TIMESTAMP WHERE TH_ID=(SELECT THID FROM TEMP_EXPENSE_UNIT_TICKLER_DELETION WHERE ID=MIN_DELID);
						END IF;

					SET MIN_DELID = MIN_DELID+1;
					END WHILE;

				END IF;

			END IF;

		SET MINTEUID = MINTEUID+1;
		END WHILE;

		INSERT INTO PATCH_HISTORY(PO_ID,PH_FILE_NAME,PH_STATUS,ULD_ID) VALUES (8,FILENAME,1,(SELECT ULD_ID FROM USER_LOGIN_DETAILS WHERE ULD_LOGINID=USERSTAMP));
		
		SET SUCCESS_MESSAGE = SUCCESSECNDATA;
		SET FOREIGN_KEY_CHECKS = 1;
	
	END IF;

	DROP TABLE IF EXISTS TEMP_EXPENSE_UNIT_EUID;
	DROP TABLE IF EXISTS TEMP_EXPENSE_UNIT_TICKLER_DELETION;
	DROP TABLE IF EXISTS TEMP_EXPENSE_UNIT_TICKLER_UPDATION;

	COMMIT;

END;