-- VERSION:0.1 --SDATE:18/09/2014 --EDATE:18/09/2014 --ISSUE:837 --COMMENTNO:19 --DESC:SP TO UPDATE AUTOINCREMENT DYNAMICALLY --DONE BY:RL

DROP PROCEDURE IF EXISTS SP_USER_MENU_DETAILS_AUTO_INCREMENT_SEQUENCE_UPDATE;
CREATE PROCEDURE SP_USER_MENU_DETAILS_AUTO_INCREMENT_SEQUENCE_UPDATE(
IN FILENAME TEXT,
IN USERSTAMP VARCHAR(50),
OUT SUCCESS_MESSAGE TEXT)
BEGIN
DECLARE MINID INTEGER;
DECLARE MAXID INTEGER;
DECLARE PRIMARY_KEY_ID INTEGER;
DECLARE SEQID INTEGER;
DECLARE MINCHILDID INTEGER;
DECLARE MAXCHILDID INTEGER;
DECLARE MINTICKLERID INTEGER;
DECLARE MAXTICKLERID INTEGER;
DECLARE CHILD_PRI_ID INTEGER;
DECLARE CHILD_TABLE_NAME TEXT;
DECLARE COLNAME TEXT;
DECLARE FID INTEGER;
DECLARE PRIMARY_KEY_COLUMN TEXT;
DECLARE TICKLERID INTEGER;
DECLARE COUNT_TABLE INTEGER;
DECLARE OLDVALUE TEXT;
DECLARE NEWVALUE TEXT;
DECLARE OLD_VAL_POS INTEGER;
DECLARE OLD_VAL_POS1 INTEGER;
DECLARE OLD_VAL_POS2 INTEGER;
DECLARE OLD_SUBSTRING TEXT;
DECLARE OLD_SUB_VALUE TEXT;
DECLARE OLD_NEW_STRING TEXT;
DECLARE REPLACE_STRING TEXT;
DECLARE TABLEID INTEGER;
DECLARE MINDELID INTEGER;
DECLARE MAXDELID INTEGER;
DECLARE TICKLER_OLDVALUE TEXT;
DECLARE TICKLER_OLD_VAL_POS INTEGER;
DECLARE TICKLER_OLD_VAL_POS1 INTEGER;
DECLARE TICKLER_OLD_SUBSTRING TEXT;
DECLARE TICKLER_OLD_VAL_POS2 INTEGER;
DECLARE TICKLER_OLD_SUB_VALUE TEXT;
DECLARE MINTABLEID INTEGER;
DECLARE MAXTABLEID INTEGER;
DECLARE MAINTABLENAME TEXT;
DECLARE MAIN_TABLE_TIMESTAMP TEXT;
DECLARE MAXIDCOUNT INTEGER;
DECLARE AUTO_INCREMENT_ID INTEGER;
DECLARE MAINTABLEID INTEGER;
DECLARE CHILD_TABLE_TIMESTAMP TEXT;
DECLARE FAILURE_ECN_DATA TEXT;
DECLARE FAIL_ECNDATA TEXT;
DECLARE SUCCESS_ECNDATA TEXT;
DECLARE FAILURE_ECNDATA TEXT;
DECLARE SUCCESSECNDATA TEXT;
DECLARE FAILUREECNDATA TEXT;
DECLARE PATCHFILENAME VARCHAR(100);
DECLARE PHSTATUS TINYINT;
DECLARE EXIT HANDLER FOR SQLEXCEPTION
BEGIN 
	ROLLBACK;
	DROP TABLE IF EXISTS TEMP_USER_RIGHTS_TICKLER_DELETION;
	DROP TABLE IF EXISTS TEMP_USER_RIGHTS_CHILD_TABLE;
	DROP TABLE IF EXISTS TEMP_USER_RIGHTS_TICKLER_UPDATION;
	INSERT INTO PATCH_HISTORY(PO_ID,PH_FILE_NAME,PH_STATUS,ULD_ID) VALUES (2,FILENAME,0,(SELECT ULD_ID FROM USER_LOGIN_DETAILS WHERE ULD_LOGINID=USERSTAMP));
	SET SUCCESS_MESSAGE = FAIL_ECNDATA;
	END;
	START TRANSACTION;
	SET AUTOCOMMIT=0;
	SET FOREIGN_KEY_CHECKS = 0;
	SET SUCCESS_ECNDATA =  (SELECT EMC_DATA FROM ERROR_MESSAGE_CONFIGURATION WHERE EMC_ID=469);
	SET FAILURE_ECNDATA =  (SELECT EMC_DATA FROM ERROR_MESSAGE_CONFIGURATION WHERE EMC_ID=470);
	SET FAILURE_ECN_DATA = (SELECT EMC_DATA FROM ERROR_MESSAGE_CONFIGURATION WHERE EMC_ID=473);
	SET SUCCESSECNDATA = (SELECT REPLACE(SUCCESS_ECNDATA,'[FILENAME]',FILENAME));
	SET FAILUREECNDATA = (SELECT REPLACE(FAILURE_ECNDATA,'[FILENAME]',FILENAME));
	SET FAIL_ECNDATA = (SELECT REPLACE(FAILURE_ECN_DATA,'[FILENAME]',FILENAME));
	IF EXISTS(SELECT PH_FILE_NAME FROM PATCH_HISTORY WHERE PH_FILE_NAME = FILENAME AND PH_STATUS = 1) THEN
		SET SUCCESS_MESSAGE = FAILUREECNDATA;
	END IF;
	SET PATCHFILENAME = (SELECT PH_FILE_NAME FROM PATCH_HISTORY WHERE PH_FILE_NAME = FILENAME);
	SET PHSTATUS = (SELECT PH_STATUS FROM PATCH_HISTORY WHERE PH_FILE_NAME = FILENAME AND PH_STATUS = 0);
	IF ((PATCHFILENAME IS NOT NULL) AND (PHSTATUS = 0)) OR (PATCHFILENAME IS NULL)THEN
		SET MAINTABLENAME=(SELECT TRIM(TTIP_DATA) FROM TICKLER_TABID_PROFILE WHERE TTIP_ID=86);
		SET MAINTABLEID=(SELECT TTIP_ID FROM TICKLER_TABID_PROFILE WHERE TTIP_DATA=MAINTABLENAME);
		SET PRIMARY_KEY_COLUMN=(SELECT DISTINCT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME=MAINTABLENAME AND COLUMN_KEY='PRI' AND TABLE_SCHEMA=(SELECT DATABASE()));
		SET MAIN_TABLE_TIMESTAMP=(SELECT DISTINCT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME=MAINTABLENAME AND TABLE_SCHEMA=(SELECT DATABASE()) AND COLUMN_NAME LIKE '%TIMESTAMP');
		SET @CHECK_TABLEID=MAINTABLEID;
		SET MINID=1;
		SET @SETMAXID=(SELECT CONCAT('SELECT COUNT(*) INTO @COUNTMAXID FROM ',MAINTABLENAME,' WHERE ',PRIMARY_KEY_COLUMN,'>',MINID));
		PREPARE SETMAXIDSTMT FROM @SETMAXID;
		EXECUTE SETMAXIDSTMT;
		DEALLOCATE PREPARE SETMAXIDSTMT;
		SET MAXIDCOUNT=@COUNTMAXID;
		IF MAXIDCOUNT!=0 THEN
			SET MAXID=MINID+MAXIDCOUNT;
		ELSE
			SET MAXID=MINID;
		END IF;
		SET @CHECKMAXID=MAXID;
		IF MINID IS NOT NULL AND MAXID IS NOT NULL THEN
			WHILE MINID<=MAXID DO
			-- QUERY FOR CHECKING IF THE AUTO_INCREMENT IS IS IN MAIN_TABLE
				SET @SET_CHECK_AUTO_INC_ID=(SELECT CONCAT('SELECT ',PRIMARY_KEY_COLUMN,' INTO @CHECK_AUTO_ID FROM ',MAINTABLENAME,' WHERE ',PRIMARY_KEY_COLUMN,'=',MINID));
				PREPARE SET_CHECK_AUTO_INC_ID_STMT FROM @SET_CHECK_AUTO_INC_ID;
				EXECUTE SET_CHECK_AUTO_INC_ID_STMT;
				DEALLOCATE PREPARE SET_CHECK_AUTO_INC_ID_STMT;
				SET AUTO_INCREMENT_ID=@CHECK_AUTO_ID;
				IF AUTO_INCREMENT_ID IS NULL THEN
					SET TABLEID=(SELECT TTIP_ID FROM TICKLER_TABID_PROFILE WHERE TTIP_DATA=MAINTABLENAME);
					SET @CHECKTABLEID=TABLEID;
			-- TABLE FOR CHECKING WHETHER THE UPDATING ID IS IN TICKLER_HISTORY
					DROP TABLE IF EXISTS TEMP_USER_RIGHTS_TICKLER_DELETION;
					CREATE TABLE TEMP_USER_RIGHTS_TICKLER_DELETION(ID INTEGER PRIMARY KEY NOT NULL AUTO_INCREMENT,THID INTEGER,THOLDVALUE TEXT);
					INSERT INTO TEMP_USER_RIGHTS_TICKLER_DELETION(THID,THOLDVALUE)SELECT TH_ID,TH_OLD_VALUE FROM TICKLER_HISTORY WHERE TTIP_ID=TABLEID AND TP_ID=2;
					SET MINDELID=(SELECT MIN(ID) FROM TEMP_USER_RIGHTS_TICKLER_DELETION);
					SET MAXDELID=(SELECT MAX(ID) FROM TEMP_USER_RIGHTS_TICKLER_DELETION);
					IF MINDELID IS NOT NULL AND MAXDELID IS NOT NULL THEN
						WHILE MINDELID<=MAXDELID DO
							SET TICKLER_OLDVALUE=(SELECT THOLDVALUE FROM TEMP_USER_RIGHTS_TICKLER_DELETION WHERE ID=MINDELID); 
							SET TICKLER_OLD_VAL_POS=(SELECT LOCATE(PRIMARY_KEY_COLUMN,TICKLER_OLDVALUE));
							SET TICKLER_OLD_VAL_POS1=(SELECT LOCATE(',',TICKLER_OLDVALUE,TICKLER_OLD_VAL_POS));
							IF TICKLER_OLD_VAL_POS1=0 THEN
								SET TICKLER_OLD_SUBSTRING=(SELECT SUBSTRING(TICKLER_OLDVALUE,TICKLER_OLD_VAL_POS));
							ELSE
								SET TICKLER_OLD_SUBSTRING=(SELECT SUBSTRING(TICKLER_OLDVALUE,TICKLER_OLD_VAL_POS,(TICKLER_OLD_VAL_POS1-TICKLER_OLD_VAL_POS)));
							END IF;
							SET TICKLER_OLD_VAL_POS2=(SELECT LOCATE('=',TICKLER_OLD_SUBSTRING));
							SET TICKLER_OLD_SUB_VALUE=(SELECT SUBSTRING(TICKLER_OLD_SUBSTRING,(TICKLER_OLD_VAL_POS2+1)));
							IF TICKLER_OLD_SUB_VALUE='null' or TICKLER_OLD_SUB_VALUE='NULL' THEN
								SET TICKLER_OLD_SUB_VALUE='null';
							END IF;
							IF TICKLER_OLD_SUB_VALUE=MINID THEN
								SET MINID=MINID+1;
								SET MAXID=MAXID+1;
							END IF;
							SET MINDELID=MINDELID+1;
						END WHILE;
					END IF;
				SET @SETPRIMARY_KEY_ID=(SELECT CONCAT('SELECT ',PRIMARY_KEY_COLUMN,' INTO @CHECK_PRI_ID FROM ',MAINTABLENAME,' WHERE ',PRIMARY_KEY_COLUMN,'=',MINID));
				PREPARE SETPRIMARY_KEY_ID_STMT FROM @SETPRIMARY_KEY_ID;
				EXECUTE SETPRIMARY_KEY_ID_STMT;
				DEALLOCATE PREPARE SETPRIMARY_KEY_ID_STMT;
				SET PRIMARY_KEY_ID= @CHECK_PRI_ID;

				SET @SET_SEQID=(SELECT CONCAT('SELECT MIN(',PRIMARY_KEY_COLUMN,') INTO @CHECK_SEQ_ID FROM ',MAINTABLENAME,' WHERE ',PRIMARY_KEY_COLUMN,'>',MINID));
				PREPARE SET_SEQID_STMT FROM @SET_SEQID;
				EXECUTE SET_SEQID_STMT;
				DEALLOCATE PREPARE SET_SEQID_STMT;
				SET SEQID=@CHECK_SEQ_ID;
	
			IF PRIMARY_KEY_ID IS NULL OR PRIMARY_KEY_ID=' ' THEN
				IF SEQID IS NOT NULL THEN

					SET FOREIGN_KEY_CHECKS=0;
					IF MAIN_TABLE_TIMESTAMP IS NOT NULL THEN
						SET @UPDATE_MAIN_TABLE=(SELECT CONCAT('UPDATE ',MAINTABLENAME,' SET ',PRIMARY_KEY_COLUMN,'=',MINID,',',MAIN_TABLE_TIMESTAMP,'=',MAIN_TABLE_TIMESTAMP,' WHERE ',PRIMARY_KEY_COLUMN,'=',SEQID));
						PREPARE UPDATE_MAIN_TABLE_STMT FROM @UPDATE_MAIN_TABLE;
						EXECUTE UPDATE_MAIN_TABLE_STMT;
						DEALLOCATE PREPARE UPDATE_MAIN_TABLE_STMT;
					ELSE
						SET @UPDATE_MAIN_TABLE=(SELECT CONCAT('UPDATE ',MAINTABLENAME,' SET ',PRIMARY_KEY_COLUMN,'=',MINID,' WHERE ',PRIMARY_KEY_COLUMN,'=',SEQID));
						PREPARE UPDATE_MAIN_TABLE_STMT FROM @UPDATE_MAIN_TABLE;
						EXECUTE UPDATE_MAIN_TABLE_STMT;
					END IF;
					-- TABLE FOR GETTING CHILD TABLE NAME
					DROP TABLE IF EXISTS TEMP_USER_RIGHTS_CHILD_TABLE;
					CREATE TABLE TEMP_USER_RIGHTS_CHILD_TABLE(ID INTEGER NOT NULL PRIMARY KEY AUTO_INCREMENT,TABLENAME TEXT);
					INSERT INTO TEMP_USER_RIGHTS_CHILD_TABLE(TABLENAME)SELECT DISTINCT U.TABLE_NAME FROM INFORMATION_SCHEMA.COLUMNS AS U WHERE U.COLUMN_NAME = PRIMARY_KEY_COLUMN  AND TABLE_SCHEMA=(SELECT DATABASE());
					SET MINCHILDID=(SELECT MIN(ID) FROM TEMP_USER_RIGHTS_CHILD_TABLE);
					SET MAXCHILDID=(SELECT MAX(ID) FROM TEMP_USER_RIGHTS_CHILD_TABLE);
					IF MINCHILDID IS NOT NULL AND MAXCHILDID IS NOT NULL THEN
						WHILE MINCHILDID<=MAXCHILDID DO
							SET CHILD_TABLE_NAME=(SELECT TABLENAME FROM TEMP_USER_RIGHTS_CHILD_TABLE WHERE ID=MINCHILDID);
							SET CHILD_TABLE_TIMESTAMP=(SELECT DISTINCT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME=CHILD_TABLE_NAME AND TABLE_SCHEMA=(SELECT DATABASE()) AND COLUMN_NAME LIKE '%TIMESTAMP');

							SET @CHILD_FOREIGN_ID=(SELECT CONCAT('SELECT COUNT(*) INTO @FOREIGNID FROM ',CHILD_TABLE_NAME,' WHERE ',PRIMARY_KEY_COLUMN,'=',SEQID));
							PREPARE CHILD_FOREIGN_ID_STMT FROM @CHILD_FOREIGN_ID;
							EXECUTE CHILD_FOREIGN_ID_STMT;
							DEALLOCATE PREPARE CHILD_FOREIGN_ID_STMT;

							SET FID=@FOREIGNID;
							IF FID>0 THEN
								IF CHILD_TABLE_TIMESTAMP IS NULL THEN
									SET @UPDATE_CHILD_TABLE=(SELECT CONCAT('UPDATE ',CHILD_TABLE_NAME,' SET ',PRIMARY_KEY_COLUMN,'=',MINID,' WHERE ',PRIMARY_KEY_COLUMN,'=',SEQID));
									PREPARE UPDATE_CHILD_TABLE_STMT FROM @UPDATE_CHILD_TABLE;
									EXECUTE UPDATE_CHILD_TABLE_STMT;
									DEALLOCATE PREPARE UPDATE_CHILD_TABLE_STMT;
								ELSE
									SET @UPDATE_CHILD_TABLE=(SELECT CONCAT('UPDATE ',CHILD_TABLE_NAME,' SET ',PRIMARY_KEY_COLUMN,'=',MINID,',',CHILD_TABLE_TIMESTAMP,'=',CHILD_TABLE_TIMESTAMP,' WHERE ',PRIMARY_KEY_COLUMN,'=',SEQID));
									PREPARE UPDATE_CHILD_TABLE_STMT FROM @UPDATE_CHILD_TABLE;
									EXECUTE UPDATE_CHILD_TABLE_STMT;
									DEALLOCATE PREPARE UPDATE_CHILD_TABLE_STMT;
								END IF;

							END IF;
							SET @SETTICKLERID=(SELECT CONCAT('SELECT TTIP_ID INTO @TTIPID FROM  TICKLER_TABID_PROFILE WHERE TTIP_DATA=','"',CHILD_TABLE_NAME,'"'));
							PREPARE SETTICKLERID_STMT FROM @SETTICKLERID;
							EXECUTE SETTICKLERID_STMT;
							DEALLOCATE PREPARE SETTICKLERID_STMT;

							SET TICKLERID= @TTIPID;
							IF TICKLERID>0 THEN
								DROP TABLE IF EXISTS TEMP_USER_RIGHTS_TICKLER_UPDATION;
								CREATE TABLE TEMP_USER_RIGHTS_TICKLER_UPDATION(ID INTEGER NOT NULL PRIMARY KEY AUTO_INCREMENT,THID INTEGER,THOLDVALUE TEXT,THNEWVALUE TEXT );
								INSERT INTO TEMP_USER_RIGHTS_TICKLER_UPDATION(THID,THOLDVALUE,THNEWVALUE) SELECT TH_ID,TH_OLD_VALUE,TH_NEW_VALUE FROM TICKLER_HISTORY WHERE TTIP_ID=TICKLERID AND TP_ID=1;
								SET COUNT_TABLE=(SELECT COUNT(*) FROM TEMP_USER_RIGHTS_TICKLER_UPDATION);
								IF COUNT_TABLE>0 THEN
									SET MINTICKLERID=(SELECT MIN(ID) FROM TEMP_USER_RIGHTS_TICKLER_UPDATION);
									SET MAXTICKLERID=(SELECT MAX(ID) FROM TEMP_USER_RIGHTS_TICKLER_UPDATION);
									WHILE MINTICKLERID<=MAXTICKLERID DO
										SET OLDVALUE=(SELECT THOLDVALUE FROM TEMP_USER_RIGHTS_TICKLER_UPDATION WHERE ID=MINTICKLERID);
										SET NEWVALUE=(SELECT THNEWVALUE FROM TEMP_USER_RIGHTS_TICKLER_UPDATION WHERE ID=MINTICKLERID);
										SET OLD_VAL_POS=(SELECT LOCATE(PRIMARY_KEY_COLUMN,OLDVALUE));
										IF OLD_VAL_POS>0 THEN
											SET OLD_VAL_POS1=(SELECT LOCATE(',',OLDVALUE,OLD_VAL_POS));
											IF OLD_VAL_POS1=0 THEN
												SET OLD_SUBSTRING=(SELECT SUBSTRING(OLDVALUE,OLD_VAL_POS));
											ELSE
												SET OLD_SUBSTRING=(SELECT SUBSTRING(OLDVALUE,OLD_VAL_POS,(OLD_VAL_POS1-OLD_VAL_POS)));
											END IF;
											SET OLD_VAL_POS2=(SELECT LOCATE('=',OLD_SUBSTRING));
											SET OLD_SUB_VALUE=(SELECT SUBSTRING(OLD_SUBSTRING,(OLD_VAL_POS2+1)));
											IF OLD_SUB_VALUE='null' or OLD_SUB_VALUE='NULL' THEN
												SET OLD_SUB_VALUE='null';
											END IF;
											IF OLD_SUB_VALUE=SEQID THEN
												SET OLD_NEW_STRING=(SELECT REPLACE(OLD_SUBSTRING,OLD_SUB_VALUE,MINID));
												SET REPLACE_STRING=(SELECT REPLACE(OLDVALUE,OLD_SUBSTRING,OLD_NEW_STRING));
												UPDATE TICKLER_HISTORY SET TH_OLD_VALUE=REPLACE_STRING,TH_TIMESTAMP=TH_TIMESTAMP WHERE TH_ID=(SELECT THID FROM TEMP_USER_RIGHTS_TICKLER_UPDATION WHERE ID=MINTICKLERID);
											END IF;
										END IF;
										IF NEWVALUE IS NOT NULL THEN 
											SET OLD_VAL_POS=(SELECT LOCATE(PRIMARY_KEY_COLUMN,NEWVALUE));
											IF OLD_VAL_POS>0 THEN
												SET OLD_VAL_POS1=(SELECT LOCATE(',',NEWVALUE,OLD_VAL_POS));
												IF OLD_VAL_POS1=0 THEN
													SET OLD_SUBSTRING=(SELECT SUBSTRING(NEWVALUE,OLD_VAL_POS));
												ELSE
													SET OLD_SUBSTRING=(SELECT SUBSTRING(NEWVALUE,OLD_VAL_POS,(OLD_VAL_POS1-OLD_VAL_POS)));
												END IF;
												SET OLD_VAL_POS2=(SELECT LOCATE('=',OLD_SUBSTRING));
												SET OLD_SUB_VALUE=(SELECT SUBSTRING(OLD_SUBSTRING,(OLD_VAL_POS2+1)));
												IF OLD_SUB_VALUE='null' or OLD_SUB_VALUE='NULL' THEN
													SET OLD_SUB_VALUE='null';
												END IF;
												IF OLD_SUB_VALUE=SEQID THEN
													SET OLD_NEW_STRING=(SELECT REPLACE(OLD_SUBSTRING,OLD_SUB_VALUE,MINID));
													SET REPLACE_STRING=(SELECT REPLACE(NEWVALUE,OLD_SUBSTRING,OLD_NEW_STRING));
													UPDATE TICKLER_HISTORY SET TH_NEW_VALUE=REPLACE_STRING,TH_TIMESTAMP=TH_TIMESTAMP WHERE TH_ID=(SELECT THID FROM TEMP_USER_RIGHTS_TICKLER_UPDATION WHERE ID=MINTICKLERID);
												END IF;
											END IF;
										END IF;
										SET MINTICKLERID=MINTICKLERID+1;
									END WHILE;
								END IF;
							END IF;
							SET MINCHILDID=MINCHILDID+1;
						END WHILE;
					END IF;
				END IF;
			END IF;
		END IF;
		SET @TAB_MINID=NULL;
		SET @COUNTMAXID=NULL;
		SET @CHECK_AUTO_ID=NULL;
		SET @CHECK_PRI_ID=NULL;
		SET @CHECK_SEQ_ID=NULL;
		SET @FOREIGNID=NULL;
		SET @TTIPID=NULL;
SET MINID=MINID+1;
END WHILE;
END IF;

DROP TABLE IF EXISTS TEMP_USER_RIGHTS_TICKLER_DELETION;
DROP TABLE IF EXISTS TEMP_USER_RIGHTS_CHILD_TABLE;
DROP TABLE IF EXISTS TEMP_USER_RIGHTS_TICKLER_UPDATION;
INSERT INTO PATCH_HISTORY(PO_ID,PH_FILE_NAME,PH_STATUS,ULD_ID) VALUES (2,FILENAME,1,(SELECT ULD_ID FROM USER_LOGIN_DETAILS WHERE ULD_LOGINID=USERSTAMP));
SET SUCCESS_MESSAGE = SUCCESSECNDATA;
SET FOREIGN_KEY_CHECKS = 1;
END IF;
COMMIT;
END;
CALL SP_USER_MENU_DETAILS_AUTO_INCREMENT_SEQUENCE_UPDATE(FILENAME,USERSTAMP,@SUCCESS_MESSAGE);