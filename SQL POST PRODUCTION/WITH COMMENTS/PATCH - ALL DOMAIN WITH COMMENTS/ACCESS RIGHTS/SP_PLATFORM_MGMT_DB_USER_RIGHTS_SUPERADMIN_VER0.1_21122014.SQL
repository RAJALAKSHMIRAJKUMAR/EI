-- VER0.1 STARTDATE:21/12/2014 ENDDATE:21/12/2014 ISSUE:659 CMT:142 DESC:SP TO GRANT ALL SP & VIEW FOR SUPER ADMIN DONE BY:DHIVYA



DROP PROCEDURE IF EXISTS SP_PLATFORM_MGMT_DB_USER_RIGHTS_SUPERADMIN;
CREATE PROCEDURE SP_PLATFORM_MGMT_DB_USER_RIGHTS_SUPERADMIN
(IN FILENAME TEXT,IN DB_NAME VARCHAR(20),IN ACTION VARCHAR(10),USERID INTEGER,OUT SUCCESS_MESSAGE TEXT)
BEGIN
DECLARE COUNT1        INT;
DECLARE COUNT2        INT;
DECLARE COUNT3        INT;
DECLARE V_POSTAP_ID   INT;
DECLARE V_SPP_ID      INT;
DECLARE V_VP_ID       INT;
DECLARE V_MENU_ID INT;
DECLARE V_TABLE_NAME  VARCHAR(100);
DECLARE V_SP_NAME     VARCHAR(100);
DECLARE V_VP_NAME     VARCHAR(100);
DECLARE MIN_ID        INT;
DECLARE temptable INT;
DECLARE SELECT_PRIVILEGE CHAR(1);
DECLARE UPDATE_PRIVILEGE CHAR(1);
DECLARE INSERT_PRIVILEGE CHAR(1);
DECLARE DELETE_PRIVILEGE CHAR(1);
DECLARE FINAL_PRIVILEGE VARCHAR(50);
DECLARE MINID INTEGER;
DECLARE MAXID INTEGER;
DECLARE TABLEID INTEGER;
DECLARE TEMP_TABLE TEXT;
DECLARE MIN_PMID INTEGER;
DECLARE MAX_PMID INTEGER;
DECLARE V_USER_COUNT INTEGER;
DECLARE ROLE_NAME VARCHAR(50);
DECLARE TEMP_PM_UNIQUE_TABLE_NAMES TEXT;
DECLARE TEMP_UNIQUE_TABLE_NAMES TEXT;
DECLARE TEMP_PM_UNIQUE_SP_NAMES TEXT;
DECLARE USER_NAME TEXT;
DECLARE FAILURE_ECN_DATA TEXT;
DECLARE FAIL_ECNDATA TEXT;
DECLARE SUCCESS_ECNDATA TEXT;
DECLARE FAILURE_ECNDATA TEXT;
DECLARE SUCCESSECNDATA TEXT;
DECLARE FAILUREECNDATA TEXT;
DECLARE PATCHFILENAME VARCHAR(100);
DECLARE PHSTATUS TINYINT;
DECLARE EXIT HANDLER FOR SQLEXCEPTION
BEGIN 
ROLLBACK; 

	IF TEMP_PM_UNIQUE_TABLE_NAMES IS NOT NULL THEN
 		SET @DROP_QUERY1=(SELECT CONCAT('DROP TABLE IF EXISTS ',TEMP_PM_UNIQUE_TABLE_NAMES));
 		PREPARE DROP_QUERY1_STMT FROM @DROP_QUERY1;
 		EXECUTE DROP_QUERY1_STMT;
 	END IF;
 	IF TEMP_UNIQUE_TABLE_NAMES IS NOT NULL THEN
 		SET @DROP_QUERY2=(SELECT CONCAT('DROP TABLE IF EXISTS ',TEMP_UNIQUE_TABLE_NAMES));
 		PREPARE DROP_QUERY2_STMT FROM @DROP_QUERY2;
 		EXECUTE DROP_QUERY2_STMT;
 	END IF;
 	IF TEMP_PM_UNIQUE_SP_NAMES IS NOT NULL THEN
 		SET @DROP_QUERY2=(SELECT CONCAT('DROP TABLE IF EXISTS ',TEMP_PM_UNIQUE_SP_NAMES));
 		PREPARE DROP_QUERY2_STMT FROM @DROP_QUERY2;
 		EXECUTE DROP_QUERY2_STMT;
 	END IF;
 	INSERT INTO PATCH_HISTORY(PO_ID,PH_FILE_NAME,PH_STATUS,ULD_ID) VALUES (2,FILENAME,0,1);
		SET SUCCESS_MESSAGE = FAIL_ECNDATA;
END;
START TRANSACTION;
SET SUCCESS_ECNDATA =  (SELECT EMC_DATA FROM ERROR_MESSAGE_CONFIGURATION WHERE EMC_ID=469);
	SET FAILURE_ECNDATA =  (SELECT EMC_DATA FROM ERROR_MESSAGE_CONFIGURATION WHERE EMC_ID=470);
	SET FAILURE_ECN_DATA = (SELECT EMC_DATA FROM ERROR_MESSAGE_CONFIGURATION WHERE EMC_ID=473);
	SET SUCCESSECNDATA = (SELECT REPLACE(SUCCESS_ECNDATA,'[FILENAME]',FILENAME));
	SET FAILUREECNDATA = (SELECT REPLACE(FAILURE_ECNDATA,'[FILENAME]',FILENAME));
	SET FAIL_ECNDATA = (SELECT REPLACE(FAILURE_ECN_DATA,'[FILENAME]',FILENAME));
	IF EXISTS(SELECT PH_FILE_NAME FROM PATCH_HISTORY WHERE PH_FILE_NAME = FILENAME AND PH_STATUS = 1) THEN
		SET SUCCESS_MESSAGE = FAILUREECNDATA;
	END IF;
SET PATCHFILENAME = (SELECT PH_FILE_NAME FROM PATCH_HISTORY WHERE PH_FILE_NAME = FILENAME);
	SET PHSTATUS = (SELECT PH_STATUS FROM PATCH_HISTORY WHERE PH_FILE_NAME = FILENAME AND PH_STATUS = 0);	
IF ((PATCHFILENAME IS NOT NULL) AND (PHSTATUS = 0)) OR (PATCHFILENAME IS NULL)THEN
SET AUTOCOMMIT = 0;
SET @admin_user = (SELECT URC_DATA FROM USER_RIGHTS_CONFIGURATION WHERE URC_ID=3);
SET USER_NAME=@admin_user;
SET @DROP_QUERY=(SELECT CONCAT('DROP USER ''',USER_NAME,'''@','''%'''));
PREPARE DROP_QUERY_STMT FROM @DROP_QUERY;
EXECUTE DROP_QUERY_STMT;
      select count(user) into V_USER_COUNT from mysql.user WHERE USER = @admin_user;
      IF V_USER_COUNT = 0 THEN
      SET @sql = CONCAT('CREATE USER ''',USER_NAME,'''@','''%''',' IDENTIFIED BY ''',USER_NAME,"'");
       PREPARE s1 FROM @sql;
       EXECUTE s1;
       DEALLOCATE PREPARE s1;
       END IF;
 SET @@SESSION.max_sp_recursion_depth = 15 ;
SET @SET_SELECT_PERMISSION=(SELECT CONCAT('GRANT SELECT ON ',DB_NAME,'.* TO ','"',USER_NAME ,'"','@','"%"'));
PREPARE SET_SELECT_PERMISSION_STMT FROM @SET_SELECT_PERMISSION;
EXECUTE SET_SELECT_PERMISSION_STMT;
DEALLOCATE PREPARE SET_SELECT_PERMISSION_STMT;
SET TEMP_TABLE=(SELECT CONCAT('TEMP_UNIQUE_TABLE_NAMES',SYSDATE()));
SET TEMP_TABLE=(SELECT REPLACE(TEMP_TABLE,' ',''));
SET TEMP_TABLE=(SELECT REPLACE(TEMP_TABLE,'-',''));
SET TEMP_TABLE=(SELECT REPLACE(TEMP_TABLE,':',''));
SET TEMP_UNIQUE_TABLE_NAMES=(SELECT CONCAT(TEMP_TABLE,'_',USERID));
SET TEMP_TABLE=(SELECT CONCAT('TEMP_PM_UNIQUE_TABLE_NAMES',SYSDATE()));
SET TEMP_TABLE=(SELECT REPLACE(TEMP_TABLE,' ',''));
SET TEMP_TABLE=(SELECT REPLACE(TEMP_TABLE,'-',''));
SET TEMP_TABLE=(SELECT REPLACE(TEMP_TABLE,':',''));
SET TEMP_PM_UNIQUE_TABLE_NAMES=(SELECT CONCAT(TEMP_TABLE,'_',USERID));
SET TEMP_TABLE=(SELECT CONCAT('TEMP_PM_UNIQUE_SP_NAMES',SYSDATE()));
SET TEMP_TABLE=(SELECT REPLACE(TEMP_TABLE,' ',''));
SET TEMP_TABLE=(SELECT REPLACE(TEMP_TABLE,'-',''));
SET TEMP_TABLE=(SELECT REPLACE(TEMP_TABLE,':',''));
SET TEMP_PM_UNIQUE_SP_NAMES=(SELECT CONCAT(TEMP_TABLE,'_',USERID));
SET @DROP_TEMP_PM=(SELECT CONCAT('DROP TABLE IF EXISTS ',TEMP_UNIQUE_TABLE_NAMES));
PREPARE DROP_TEMP_PM_STMT FROM @DROP_TEMP_PM;
EXECUTE DROP_TEMP_PM_STMT;
SET @CREATE_TEMP_UNIQUE=(SELECT CONCAT('CREATE TABLE ',TEMP_UNIQUE_TABLE_NAMES,' (ID INT NOT NULL AUTO_INCREMENT, POSTAP_ID INT,PRIMARY KEY (ID))'));
PREPARE CREATE_TEMP_UNIQUE FROM @CREATE_TEMP_UNIQUE;
EXECUTE CREATE_TEMP_UNIQUE;	             
SET @TEMP_SQL = CONCAT('INSERT INTO ',TEMP_UNIQUE_TABLE_NAMES,'(POSTAP_ID) SELECT DISTINCT TTIP_ID FROM PLATFORM_MANAGEMENT WHERE MP_ID IN (SELECT DISTINCT MP_ID FROM USER_MENU_DETAILS WHERE RC_ID=2) AND TTIP_ID IS NOT NULL');
PREPARE S1 FROM @TEMP_SQL;
EXECUTE S1;
DEALLOCATE PREPARE S1;
SET @DROP_TEMP_UNIQUE=(SELECT CONCAT('DROP TABLE IF EXISTS ',TEMP_PM_UNIQUE_TABLE_NAMES));
PREPARE DROP_TEMP_UNIQUE_STMT FROM @DROP_TEMP_UNIQUE;
EXECUTE DROP_TEMP_UNIQUE_STMT;
SET @CREATE_TEMP_PM_UNIQUE=(SELECT CONCAT('CREATE TABLE ',TEMP_PM_UNIQUE_TABLE_NAMES,' (ID INT NOT NULL AUTO_INCREMENT, POSTAP_ID INT,PRIMARY KEY (ID),UPDATE_PRIV CHAR(1),INSERT_PRIV CHAR(1),DELETE_PRIV CHAR(1))'));
PREPARE CREATE_TEMP_PM_UNIQUE_STMT FROM @CREATE_TEMP_PM_UNIQUE;
EXECUTE CREATE_TEMP_PM_UNIQUE_STMT;
SET @SETMINID=(SELECT CONCAT('SELECT MIN(ID) INTO @PFMINID FROM ',TEMP_UNIQUE_TABLE_NAMES ));
PREPARE SETMINIDSTMT FROM @SETMINID;
EXECUTE SETMINIDSTMT;
SET MINID=@PFMINID;
SET @SETMAXID=(SELECT CONCAT('SELECT MAX(ID) INTO @PFMAXID FROM ',TEMP_UNIQUE_TABLE_NAMES));
PREPARE SETMAXIDSTMT FROM @SETMAXID;
EXECUTE SETMAXIDSTMT;
SET MAXID=@PFMAXID;
WHILE MINID<=MAXID DO  
	SET @SETTABLEID=(SELECT CONCAT('SELECT POSTAP_ID INTO @TAB_ID FROM ',TEMP_UNIQUE_TABLE_NAMES,' WHERE ID=',MINID));
	PREPARE SETTABLEIDSTMT FROM @SETTABLEID;
	EXECUTE SETTABLEIDSTMT;
	SET TABLEID= @TAB_ID;
	SET @SET_UPDATE_PRIVILEGE=(SELECT CONCAT('SELECT DISTINCT PM_UPDATE_PRIV INTO @UP_PRIV FROM PLATFORM_MANAGEMENT WHERE MP_ID IN (SELECT DISTINCT MP_ID FROM USER_MENU_DETAILS WHERE RC_ID=2) AND PM_UPDATE_PRIV IS NOT NULL AND TTIP_ID=',TABLEID));
	PREPARE SET_UPDATE_PRIVILEGE_STMT FROM @SET_UPDATE_PRIVILEGE;
	EXECUTE SET_UPDATE_PRIVILEGE_STMT;
	SET @SET_INSERT_PRIVILEGE=(SELECT CONCAT('SELECT DISTINCT PM_INSERT_PRIV INTO @IN_PRIV FROM PLATFORM_MANAGEMENT  WHERE MP_ID IN (SELECT DISTINCT MP_ID FROM USER_MENU_DETAILS WHERE RC_ID=2) AND PM_INSERT_PRIV IS NOT NULL AND TTIP_ID=',TABLEID));
	PREPARE SET_INSERT_PRIVILEGE_STMT FROM @SET_INSERT_PRIVILEGE;
	EXECUTE SET_INSERT_PRIVILEGE_STMT;
	SET @SET_DELETE_PRIVILEGE=(SELECT CONCAT('SELECT DISTINCT PM_DELETE_PRIV INTO @DEL_PRIV FROM PLATFORM_MANAGEMENT WHERE  MP_ID IN (SELECT DISTINCT MP_ID FROM USER_MENU_DETAILS WHERE RC_ID=2) AND PM_DELETE_PRIV IS NOT NULL AND TTIP_ID=',TABLEID));
	PREPARE SET_DELETE_PRIVILEGE_STMT FROM @SET_DELETE_PRIVILEGE;
	EXECUTE SET_DELETE_PRIVILEGE_STMT;
	SET @INSERT_TEMP_PM_UNIQUE=(SELECT CONCAT('INSERT INTO ',TEMP_PM_UNIQUE_TABLE_NAMES,'(POSTAP_ID,UPDATE_PRIV,INSERT_PRIV,DELETE_PRIV)VALUES( @TAB_ID,@UP_PRIV,@IN_PRIV,@DEL_PRIV)'));
	PREPARE INSERT_TEMP_PM_UNIQUE_STMT FROM @INSERT_TEMP_PM_UNIQUE;
	EXECUTE INSERT_TEMP_PM_UNIQUE_STMT;
	SET @TABLEID=NULL;
	SET @UP_PRIV=NULL;
	SET @IN_PRIV=NULL;
	SET @DEL_PRIV=NULL;
	SET MINID=MINID+1;
END WHILE;
SET @SET_PM_MINID=(SELECT CONCAT('SELECT MIN(ID) INTO @PMMINID FROM ',TEMP_PM_UNIQUE_TABLE_NAMES));
PREPARE SET_PM_MINID_STMT FROM @SET_PM_MINID;
EXECUTE SET_PM_MINID_STMT;
SET MIN_PMID=@PMMINID;
SET @SET_PM_MAXID=(SELECT CONCAT('SELECT MAX(ID) INTO @PMMAXID FROM ',TEMP_PM_UNIQUE_TABLE_NAMES));
PREPARE SET_PM_MAXID_STMT FROM @SET_PM_MAXID;
EXECUTE SET_PM_MAXID_STMT;
SET MAX_PMID=@PMMAXID;
WHILE MIN_PMID<=MAX_PMID DO
		SET @SET_POSTAPID=(SELECT CONCAT('SELECT POSTAP_ID INTO @VPOSTAP_ID FROM ',TEMP_PM_UNIQUE_TABLE_NAMES,' WHERE ID =', MIN_PMID));
		 PREPARE SET_POSTAPID_STMT FROM @SET_POSTAPID;
		 EXECUTE SET_POSTAPID_STMT;
		 SET V_POSTAP_ID=@VPOSTAP_ID;
		SELECT TTIP_DATA INTO V_TABLE_NAME FROM TICKLER_TABID_PROFILE WHERE TTIP_ID = V_POSTAP_ID;
		SET @SET_UPDATE_PRIVILEGE=(SELECT CONCAT('SELECT UPDATE_PRIV INTO @UPPRIV FROM ',TEMP_PM_UNIQUE_TABLE_NAMES,' WHERE ID= ',MIN_PMID));
		PREPARE SET_UPDATE_PRIVILEGE_STMT FROM @SET_UPDATE_PRIVILEGE;
		EXECUTE SET_UPDATE_PRIVILEGE_STMT;
		SET UPDATE_PRIVILEGE=@UPPRIV;
		SET @SET_INSERT_PRIVILEGE=(SELECT CONCAT('SELECT INSERT_PRIV INTO @INPRIV FROM ',TEMP_PM_UNIQUE_TABLE_NAMES,' WHERE ID= ',MIN_PMID));
		PREPARE SET_INSERT_PRIVILEGE_STMT FROM @SET_INSERT_PRIVILEGE;
		EXECUTE SET_INSERT_PRIVILEGE_STMT;
		SET INSERT_PRIVILEGE=@INPRIV;
		SET @SET_DELETE_PRIVILEGE=(SELECT CONCAT('SELECT DELETE_PRIV INTO @DELPRIV FROM ',TEMP_PM_UNIQUE_TABLE_NAMES,' WHERE ID=',MIN_PMID));
		PREPARE SET_DELETE_PRIVILEGE_STMT FROM @SET_DELETE_PRIVILEGE;
		EXECUTE SET_DELETE_PRIVILEGE_STMT;
		SET DELETE_PRIVILEGE=@DELPRIV;
		IF UPDATE_PRIVILEGE IS NOT NULL AND INSERT_PRIVILEGE IS NOT NULL AND DELETE_PRIVILEGE IS NOT NULL THEN
	        SET FINAL_PRIVILEGE = (SELECT CONCAT('UPDATE,INSERT,DELETE'));
	    END IF;
		IF INSERT_PRIVILEGE IS NOT NULL AND UPDATE_PRIVILEGE IS NULL AND DELETE_PRIVILEGE IS NULL THEN
	        SET FINAL_PRIVILEGE = (SELECT CONCAT('INSERT'));
	    END IF;
        IF DELETE_PRIVILEGE IS NOT NULL  AND INSERT_PRIVILEGE IS NULL AND UPDATE_PRIVILEGE IS NULL THEN
	        SET FINAL_PRIVILEGE = (SELECT CONCAT('DELETE'));
	    END IF;
	    IF  UPDATE_PRIVILEGE IS NOT NULL  AND INSERT_PRIVILEGE IS NULL AND DELETE_PRIVILEGE IS NULL THEN
	        SET FINAL_PRIVILEGE = (SELECT CONCAT('UPDATE'));
	    END IF;
	    IF UPDATE_PRIVILEGE IS NOT NULL AND INSERT_PRIVILEGE IS NOT NULL AND DELETE_PRIVILEGE IS NULL THEN
	    	SET FINAL_PRIVILEGE = (SELECT CONCAT('UPDATE,INSERT'));
	    END IF;
	    IF INSERT_PRIVILEGE IS NOT NULL AND DELETE_PRIVILEGE IS NOT NULL AND UPDATE_PRIVILEGE IS  NULL THEN
			SET FINAL_PRIVILEGE = (SELECT CONCAT('INSERT,DELETE'));
	    END IF;
	    IF DELETE_PRIVILEGE IS NOT NULL AND UPDATE_PRIVILEGE IS NOT  NULL AND INSERT_PRIVILEGE IS  NULL THEN
	    	SET FINAL_PRIVILEGE = (SELECT CONCAT('DELETE,UPDATE'));
	    END IF;
		IF V_TABLE_NAME IS NOT NULL  THEN
			IF FINAL_PRIVILEGE IS NOT NULL THEN
		    	IF ACTION = 'GRANT' THEN
		    		SET @GRANT_UPDATE_INSERT_DEL = (SELECT CONCAT('GRANT ',FINAL_PRIVILEGE,' ON ',DB_NAME,'.',V_TABLE_NAME,' TO ''',USER_NAME ,'''@','''%'''));
		    		PREPARE UPDATE_INSERT_DEL_STMT FROM @GRANT_UPDATE_INSERT_DEL;
		    		EXECUTE UPDATE_INSERT_DEL_STMT;
		    	
		    		SET @SET_TRG_PERMISSION=(SELECT CONCAT('GRANT trigger ON ',DB_NAME,'.',V_TABLE_NAME,' TO ''',USER_NAME ,'''@','''%'''));
		    		PREPARE SET_TRG_PERMISSION_STMT FROM @SET_TRG_PERMISSION;
		    		EXECUTE SET_TRG_PERMISSION_STMT;
		    	ELSE
		   			SET @REVOKE_UPDATE_INSERT_DEL =(SELECT CONCAT('REVOKE ',FINAL_PRIVILEGE,' ON ',DB_NAME,'.',V_TABLE_NAME,' FROM ''',USER_NAME ,'''@','''%'''));
		    		PREPARE REVOKE_UPDATE_INSERT_DEL_STMT FROM @REVOKE_UPDATE_INSERT_DEL;
		    		EXECUTE REVOKE_UPDATE_INSERT_DEL_STMT;
		    		SET @SET_REVOKE_PERMISSION=(SELECT CONCAT('REVOKE  TRIGGER ON ',DB_NAME,'.',V_TABLE_NAME,' FROM ''',USER_NAME ,'''@','''%'''));
		    		PREPARE SET_REVOKE_PERMISSION_STMT FROM @SET_REVOKE_PERMISSION;
		    		EXECUTE SET_REVOKE_PERMISSION_STMT;
		    	END IF;
		    END IF;
		END IF;
	SET MIN_PMID = MIN_PMID + 1;
END WHILE;
SET @DROP_TEMP_PM_SP_TABLE=(SELECT CONCAT('DROP TABLE IF EXISTS ',TEMP_PM_UNIQUE_SP_NAMES));
PREPARE DROP_TEMP_PM_SP_TABLE_STMT FROM @DROP_TEMP_PM_SP_TABLE;
EXECUTE DROP_TEMP_PM_SP_TABLE_STMT;
SET @CREATE_SP_NAMES=(SELECT CONCAT('CREATE TABLE ',TEMP_PM_UNIQUE_SP_NAMES,' (ID INT NOT NULL AUTO_INCREMENT, SPP_ID INT,PRIMARY KEY (ID))'));
PREPARE CREATE_SP_NAMES_STMT FROM @CREATE_SP_NAMES;
EXECUTE CREATE_SP_NAMES_STMT;
SET @SQL = CONCAT('INSERT INTO ',TEMP_PM_UNIQUE_SP_NAMES,'(SPP_ID) SELECT DISTINCT SPP_ID FROM PLATFORM_MANAGEMENT WHERE MP_ID IN (SELECT MP_ID FROM USER_MENU_DETAILS WHERE RC_ID=2) AND SPP_ID IS NOT NULL');
PREPARE S1 FROM @SQL;
PREPARE S1 FROM @SQL;
EXECUTE S1;
DEALLOCATE PREPARE S1;
	SET @SETCOUNT2=(SELECT CONCAT('SELECT COUNT(*) INTO @COUNT_2 FROM ',TEMP_PM_UNIQUE_SP_NAMES));
	PREPARE SETCOUNT2STMT FROM @SETCOUNT2;
	EXECUTE SETCOUNT2STMT;
	SET COUNT2=@COUNT_2;
	IF COUNT2 > 0 THEN
		L_SP:
		LOOP
		 	SET @SETSPPID=(SELECT CONCAT('SELECT SPP_ID INTO @VSPP_ID FROM ',TEMP_PM_UNIQUE_SP_NAMES,' WHERE ID = ',COUNT2));
		 	PREPARE SETSPPIDSTMT FROM @SETSPPID;
		 	EXECUTE SETSPPIDSTMT;
	 		SET V_SPP_ID=@VSPP_ID;
    		SELECT SPP_NAME INTO V_SP_NAME FROM STORED_PROCEDURE_PROFILE WHERE SPP_ID = V_SPP_ID;
	    	IF V_SP_NAME IS NOT NULL THEN
	    	 	 SET @SPNAME=V_SP_NAME;
	    	 	 	IF ACTION = 'GRANT' THEN
	      				SET @SET_GRANT_PROCEDURE = (SELECT CONCAT('GRANT EXECUTE ON PROCEDURE ',DB_NAME,'.',V_SP_NAME,' TO ''',USER_NAME ,'''@','''%'''));
	      				PREPARE SET_GRANT_PROCEDURE_STMT FROM @SET_GRANT_PROCEDURE;
	      				EXECUTE SET_GRANT_PROCEDURE_STMT;
	      				DEALLOCATE PREPARE SET_GRANT_PROCEDURE_STMT; 
	    			ELSE
	      				SET @SET_REVOKE_PROCEDURE = (SELECT CONCAT('REVOKE EXECUTE ON PROCEDURE ',DB_NAME,'.',V_SP_NAME,' FROM ''',USER_NAME ,'''@','''%'''));
	      				PREPARE SET_REVOKE_PROCEDURE_STMT FROM @SET_REVOKE_PROCEDURE;
	      				EXECUTE SET_REVOKE_PROCEDURE_STMT;
	      				DEALLOCATE PREPARE SET_REVOKE_PROCEDURE_STMT;
	   				END IF;
	   		END IF;
	   				 SET COUNT2 = COUNT2 - 1;

		   			IF COUNT2 = 0 THEN
		      			LEAVE L_SP;
		    		END IF;
		END LOOP L_SP;
 	 END IF;
 	IF TEMP_PM_UNIQUE_TABLE_NAMES IS NOT NULL THEN
 		SET @DROP_QUERY1=(SELECT CONCAT('DROP TABLE IF EXISTS ',TEMP_PM_UNIQUE_TABLE_NAMES));
 		PREPARE DROP_QUERY1_STMT FROM @DROP_QUERY1;
 		EXECUTE DROP_QUERY1_STMT;
 	END IF;
 	IF TEMP_UNIQUE_TABLE_NAMES IS NOT NULL THEN
 		SET @DROP_QUERY2=(SELECT CONCAT('DROP TABLE IF EXISTS ',TEMP_UNIQUE_TABLE_NAMES));
 		PREPARE DROP_QUERY2_STMT FROM @DROP_QUERY2;
 		EXECUTE DROP_QUERY2_STMT;
 	END IF;
 	IF TEMP_PM_UNIQUE_SP_NAMES IS NOT NULL THEN
 		SET @DROP_QUERY2=(SELECT CONCAT('DROP TABLE IF EXISTS ',TEMP_PM_UNIQUE_SP_NAMES));
 		PREPARE DROP_QUERY2_STMT FROM @DROP_QUERY2;
 		EXECUTE DROP_QUERY2_STMT;
 	END IF;
 	INSERT INTO PATCH_HISTORY(PO_ID,PH_FILE_NAME,PH_STATUS,ULD_ID) VALUES (2,FILENAME,1,1);
	SET SUCCESS_MESSAGE = SUCCESSECNDATA;		
	END IF;
COMMIT;
END;
CALL SP_PLATFORM_MGMT_DB_USER_RIGHTS_SUPERADMIN(FILENAME,(SELECT DATABASE()),'GRANT',1,@SUCCESS_MESSAGE);