DROP PROCEDURE IF EXISTS SP_TRG_BIZDLY_FACILITY_USE_VALIDATION;
CREATE PROCEDURE SP_TRG_BIZDLY_FACILITY_USE_VALIDATION(
IN NEWUNITID INTEGER,
IN NEWINVOICEDATE DATE,
IN NEWDEPOSIT DECIMAL(7,2),
IN NEWAMOUNT DECIMAL(5,2),
IN PROCESS TEXT)
BEGIN
	DECLARE UNITSTARTDATE DATE;
	DECLARE UNITENDDATE DATE;
	DECLARE MESSAGE_TEXT VARCHAR(50);
	DECLARE MAXDATE DATE;
	DECLARE ERROR_MSG TEXT;
	CALL SP_CONFIG_SDATE_EDATE(NEWUNITID,@S_CONFIGDATE,@E_CONFIGDATE,@INVOICE_DATE);
	SET UNITSTARTDATE=@S_CONFIGDATE;
	SET UNITENDDATE=@E_CONFIGDATE;
	SET MAXDATE=@INVOICE_DATE;
	IF(PROCESS = 'INSERT') OR (PROCESS='UPDATE') THEN  
		IF (NEWINVOICEDATE > SYSDATE())THEN
			SET ERROR_MSG = (SELECT EMC_DATA FROM ERROR_MESSAGE_CONFIGURATION WHERE EMC_ID = 474);
			SIGNAL SQLSTATE '45000'
			SET MESSAGE_TEXT= ERROR_MSG;
		END IF;    
		IF(NEWINVOICEDATE NOT BETWEEN UNITSTARTDATE AND MAXDATE)THEN
			SET ERROR_MSG = (SELECT EMC_DATA FROM ERROR_MESSAGE_CONFIGURATION WHERE EMC_ID = 475);
			SIGNAL SQLSTATE '45000'
			SET MESSAGE_TEXT= ERROR_MSG;
		END IF; 
		IF(NEWDEPOSIT IS NULL AND NEWAMOUNT IS NULL)THEN
			SET ERROR_MSG = (SELECT EMC_DATA FROM ERROR_MESSAGE_CONFIGURATION WHERE EMC_ID = 532);
			SIGNAL SQLSTATE '45000'
			SET MESSAGE_TEXT= ERROR_MSG;
		END IF;
		IF(NEWDEPOSIT IS NOT NULL AND NEWAMOUNT IS NOT NULL)THEN
			SET ERROR_MSG = (SELECT EMC_DATA FROM ERROR_MESSAGE_CONFIGURATION WHERE EMC_ID = 533);
			SIGNAL SQLSTATE '45000'
			SET MESSAGE_TEXT= ERROR_MSG;
		END IF;
	END IF;
END;
