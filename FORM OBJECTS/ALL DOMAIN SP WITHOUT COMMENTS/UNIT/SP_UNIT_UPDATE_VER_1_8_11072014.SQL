DROP PROCEDURE IF EXISTS SP_UNIT_UPDATE;
CREATE PROCEDURE SP_UNIT_UPDATE(
IN UNITID INTEGER,
IN UNITNO SMALLINT(4),
IN STARTDATE DATE,
IN ENDDATE DATE,
IN PAYMENTAMOUNT SMALLINT(4),
IN DEPOSIT INTEGER(5),
IN OBSOLETE CHAR(1),
IN NONEI CHAR(1),
IN COMMENTS TEXT,
IN ACCOUNT_NUMBER  VARCHAR(15),
IN ACCOUNT_NAME VARCHAR(25),
IN BANK_CODE VARCHAR(5),
IN BRANCH_CODE VARCHAR(5),
IN BANK_ADDRESS VARCHAR(250),
IN USERSTAMP VARCHAR(50),
OUT UNITUPDATE_FLAG INTEGER)
BEGIN
	DECLARE TICKLERFLAG INTEGER;
    DECLARE USERSTAMP_ID INTEGER(2);
    DECLARE EDATE DATE;
    DECLARE OLD_STARTDATE DATE;
    DECLARE OLD_ENDDATE DATE;
    DECLARE OLD_OBSOLETE CHAR(1);
    DECLARE OLDUNITNO TEXT;
    DECLARE NEWUNITNO TEXT;
    DECLARE OLDSTARTDATE TEXT;
    DECLARE OLDENDDATE TEXT;
    DECLARE OLDPAYMENTAMOUNT TEXT;
    DECLARE OLDDEPOSIT TEXT;
    DECLARE OLDOBSOLETE TEXT;
    DECLARE OLDNONEI TEXT;
    DECLARE OLDCOMMENTS TEXT;
    DECLARE UDID TEXT;
    DECLARE NEWSTARTDATE TEXT;
    DECLARE NEWENDDATE TEXT;
    DECLARE NEWPAYMENTAMOUNT TEXT;
    DECLARE NEWDEPOSIT TEXT;
    DECLARE NEWOBSOLETE TEXT;
    DECLARE NEWNONEI TEXT;
    DECLARE NEWCOMMENTS TEXT;
    DECLARE OLD_UNITDETAILTABLEDETAILS TEXT;
    DECLARE NEW_UNITDETAILTABLEDETAILS TEXT;
    DECLARE UNITDETAIL_HEADNAME TEXT;
    DECLARE UNITDETAIL_LENGTH INTEGER;
    DECLARE OLDUNITDETAILPOSITION INTEGER;
    DECLARE OLD_UNITDETAILS TEXT;
    DECLARE NEWUNITDETAILPOSITION INTEGER;
    DECLARE NEW_UNITDETAILS TEXT;
    DECLARE UNITDETAILHEADPOSITION INTEGER;
    DECLARE UNITDETAILHEADNAME TEXT;
    DECLARE NEWUNITDETAILRECORDS TEXT ;
    DECLARE OLDUNITDETAILRECORDS TEXT ;
    DECLARE UNITDETAILHEADERNAMES TEXT;
    DECLARE UNITDETAIL_ID VARCHAR(30);
    DECLARE OLD_UNITDETAIL TEXT;
    DECLARE NEW_UNITDETAIL TEXT;
    DECLARE UDHEADERNAME TEXT;
    DECLARE UD_LOCATION INTEGER;
    DECLARE OLDACCNO TEXT;
    DECLARE OLDACCNAME TEXT;
    DECLARE OLDBANKCODE TEXT;
    DECLARE OLDBRANCHCODE TEXT;
    DECLARE OLDADDRESS TEXT;
    DECLARE UACDID TEXT;
    DECLARE NEWACCNO TEXT;
    DECLARE NEWACCNAME TEXT;
    DECLARE NEWBANKCODE TEXT;
    DECLARE NEWBRANCHCODE TEXT;
    DECLARE NEWADDRESS TEXT;
    DECLARE OLD_UNITACCOUNTDETAILTABLEDETAILS TEXT;
    DECLARE NEW_UNITACCOUNTDETAILTABLEDETAILS TEXT;
    DECLARE UNITACCOUNTDETAIL_HEADNAME TEXT;
    DECLARE UNITACCOUNTDETAIL_LENGTH INTEGER;
    DECLARE OLDUNITACCOUNTDETAILPOSITION INTEGER;
    DECLARE OLD_UNITACCOUNTDETAILS TEXT;
    DECLARE NEWUNITACCOUNTDETAILPOSITION INTEGER;
    DECLARE NEW_UNITACCOUNTDETAILS TEXT;
    DECLARE UNITACCOUNTDETAILHEADPOSITION INTEGER;
    DECLARE UNITACCOUNTDETAILHEADNAME TEXT;
    DECLARE NEWUNITACCOUNTDETAILRECORDS TEXT ;
    DECLARE OLDUNITACCOUNTDETAILRECORDS TEXT ;
    DECLARE UNITACCOUNTDETAILHEADERNAMES TEXT;
    DECLARE UNITACCOUNTDETAIL_ID VARCHAR(30);
    DECLARE OLD_UNITACCOUNTDETAIL TEXT;
    DECLARE NEW_UNITACCOUNTDETAIL TEXT;
    DECLARE UAHEADERNAME TEXT;
    DECLARE UA_LOCATION INTEGER;
	DECLARE UD_FLAG INTEGER;
	DECLARE TEMP_UNIT_CHECK_TRANSACTION TEXT;
	DECLARE MINIMUMDATE DATE;
	DECLARE MAXIMUMDATE DATE;
	DECLARE TRANSCOUNT INTEGER;
	DECLARE USDATE DATE;
	DECLARE UEDATE DATE;
	DECLARE UOBSOLETE CHAR(1);
	DECLARE UNONEI CHAR(1);
	DECLARE UCOMMENTS TEXT;
	DECLARE UDEPOSIT INTEGER(5);
	DECLARE UPAYMENT SMALLINT(4);
	DECLARE FINAL_SDATE DATE;
	DECLARE UNITTABLEFLAG INTEGER;
	DECLARE OLD_UNIT_NUMBER SMALLINT(4);
    DECLARE OLDULDID INTEGER;
    DECLARE OLDTIMESTAMP TIMESTAMP;
    DECLARE EXIT HANDLER FOR SQLEXCEPTION
		BEGIN
		SET UNITUPDATE_FLAG = 0;
		ROLLBACK;
		IF(TEMP_UNIT_CHECK_TRANSACTION IS NOT NULL) THEN
			SET @DROPQUERY = (SELECT CONCAT('DROP TABLE IF EXISTS ',TEMP_UNIT_CHECK_TRANSACTION,''));
			PREPARE DROPQUERYSTMT FROM @DROPQUERY;
			EXECUTE DROPQUERYSTMT;
		END IF;
    END;
    IF DEPOSIT='' THEN
        SET DEPOSIT=NULL;
    END IF;
    IF OBSOLETE='' THEN
        SET OBSOLETE=NULL;
    END IF;
    IF NONEI='' THEN
        SET NONEI=NULL;
    END IF;
    IF COMMENTS='' THEN
        SET COMMENTS=NULL;
    END IF;
    IF ACCOUNT_NUMBER='' THEN
        SET ACCOUNT_NUMBER=NULL;
    END IF;
    IF ACCOUNT_NAME='' THEN
        SET ACCOUNT_NAME=NULL;
    END IF;
    IF BANK_CODE='' THEN
        SET BANK_CODE=NULL;
    END IF;
    IF BRANCH_CODE='' THEN
        SET BRANCH_CODE=NULL;
    END IF;
    IF BANK_ADDRESS='' THEN
        SET BANK_ADDRESS=NULL;
    END IF;
	START TRANSACTION;
	SET UNITUPDATE_FLAG = 0;
	SET UD_FLAG=0;
	SET UNITTABLEFLAG=0;
    CALL SP_CHANGE_USERSTAMP_AS_ULDID(USERSTAMP,@ULDID);
    SET USERSTAMP_ID = (SELECT @ULDID);
	SET OLD_OBSOLETE = (SELECT UD_OBSOLETE FROM UNIT_DETAILS WHERE UNIT_ID = UNITID);
    SET OLDUNITNO = (SELECT UNIT_NO FROM UNIT WHERE UNIT_ID = UNITID);
    SET NEWUNITNO = UNITNO;
	SET OLD_UNIT_NUMBER = (SELECT UNIT_NO FROM UNIT WHERE UNIT_ID = UNITID);
    SET OLDULDID=(SELECT ULD_ID FROM UNIT_DETAILS WHERE UNIT_ID=UNITID);
    SET OLDTIMESTAMP=(SELECT UD_TIMESTAMP FROM UNIT_DETAILS WHERE UNIT_ID=UNITID);
	IF(STARTDATE IS NOT NULL AND ENDDATE IS NOT NULL AND PAYMENTAMOUNT IS NOT NULL AND USERSTAMP IS NOT NULL) THEN
		CALL SP_UNIT_CHECK_TRANSACTION(UNITID,USERSTAMP,@INV_MIN_DATE,@INV_MAX_DATE,@UNIT_CHECK_TRANSACTION);
		SET TEMP_UNIT_CHECK_TRANSACTION = (SELECT @UNIT_CHECK_TRANSACTION);
		SET MINIMUMDATE = (SELECT @INV_MIN_DATE);
		SET MAXIMUMDATE = (SELECT @INV_MAX_DATE);
		SET @ACTIVECOUNT = (SELECT CONCAT('SELECT COUNT(ID) INTO @UNITIDCOUNT FROM ',TEMP_UNIT_CHECK_TRANSACTION,''));
		PREPARE ACTIVECOUNTSTMT FROM @ACTIVECOUNT;
		EXECUTE ACTIVECOUNTSTMT;
		SET TRANSCOUNT = @UNITIDCOUNT;
		IF TRANSCOUNT=0 THEN
			IF NOT EXISTS(SELECT UNIT_NO FROM UNIT WHERE UNIT_NO = UNITNO)  THEN
				IF (OLDULDID!=USERSTAMP_ID) THEN  
					INSERT INTO TICKLER_HISTORY(TP_ID,TTIP_ID,TH_OLD_VALUE,TH_NEW_VALUE,ULD_ID)VALUES
					((SELECT TP_ID FROM TICKLER_PROFILE WHERE TP_TYPE='UPDATION'),
					(SELECT TTIP_ID FROM TICKLER_TABID_PROFILE WHERE TTIP_DATA='UNIT'),
					(SELECT CONCAT('UNIT_ID=',UNITID,',','UNIT_NO=',OLDUNITNO,',','ULD_ID=',OLDULDID,',','UD_TIMESTAMP=',OLDTIMESTAMP)),
					(SELECT CONCAT('UNIT_NO=',NEWUNITNO)),USERSTAMP_ID);
					UPDATE UNIT SET  UNIT_NO = UNITNO WHERE UNIT_ID = UNITID;
					SET UNITUPDATE_FLAG = 1;
					SET UNITTABLEFLAG = 1;
				ELSE
					INSERT INTO TICKLER_HISTORY(TP_ID,TTIP_ID,TH_OLD_VALUE,TH_NEW_VALUE,ULD_ID)VALUES
					((SELECT TP_ID FROM TICKLER_PROFILE WHERE TP_TYPE='UPDATION'),
					(SELECT TTIP_ID FROM TICKLER_TABID_PROFILE WHERE TTIP_DATA='UNIT'),
					(SELECT CONCAT('UNIT_ID=',UNITID,',','UNIT_NO=',OLDUNITNO,',','UD_TIMESTAMP=',OLDTIMESTAMP)),
					(SELECT CONCAT('UNIT_NO=',NEWUNITNO)),USERSTAMP_ID);
					UPDATE UNIT SET  UNIT_NO = UNITNO WHERE UNIT_ID = UNITID;					
					SET UNITUPDATE_FLAG = 1;
					SET UNITTABLEFLAG = 1;
				END IF;
			END IF;
		END IF;
		SET UNITDETAIL_ID = '';
		SET UDID = (SELECT UD_ID FROM UNIT_DETAILS WHERE UNIT_ID = UNITID);
		SET OLDSTARTDATE = (SELECT UD_START_DATE FROM UNIT_DETAILS WHERE UD_ID = UDID);
		SET OLDENDDATE = (SELECT UD_END_DATE FROM UNIT_DETAILS WHERE UD_ID = UDID);
		SET OLDPAYMENTAMOUNT = (SELECT UD_PAYMENT FROM UNIT_DETAILS WHERE UD_ID = UDID);
		SET OLDDEPOSIT = (SELECT UD_DEPOSIT FROM UNIT_DETAILS WHERE UD_ID = UDID);
		IF OLDDEPOSIT IS NULL THEN
			SET OLDDEPOSIT='NULL';
		END IF;
		SET OLDOBSOLETE = (SELECT UD_OBSOLETE FROM UNIT_DETAILS WHERE UD_ID = UDID);
		IF OLDOBSOLETE IS NULL THEN
			SET OLDOBSOLETE='NULL';
		END IF;
		SET OLDNONEI = (SELECT UD_NON_EI FROM UNIT_DETAILS WHERE UD_ID = UDID);
		IF OLDNONEI IS NULL THEN
			SET OLDNONEI='NULL';
		END IF;
		SET OLDCOMMENTS = (SELECT UD_COMMENTS FROM UNIT_DETAILS WHERE UD_ID = UDID);
		IF OLDCOMMENTS IS NULL THEN
			SET OLDCOMMENTS='NULL';
		END IF;
		SET NEWSTARTDATE = STARTDATE;
		SET NEWENDDATE = ENDDATE;
		SET NEWPAYMENTAMOUNT = PAYMENTAMOUNT;
		SET NEWDEPOSIT = DEPOSIT;
		IF NEWDEPOSIT IS NULL THEN
			SET NEWDEPOSIT='NULL';
		END IF;
		SET NEWOBSOLETE = OBSOLETE;
		IF NEWOBSOLETE IS NULL THEN
			SET NEWOBSOLETE='NULL';
		END IF;
		IF OLDOBSOLETE IS NOT NULL AND ENDDATE<CURDATE()THEN
		SET NEWOBSOLETE=OLDOBSOLETE;
		END IF;
		SET NEWNONEI = NONEI;
		IF NEWNONEI IS NULL THEN
			SET NEWNONEI='NULL';
		END IF;
		SET NEWCOMMENTS = COMMENTS;
		IF NEWCOMMENTS IS NULL THEN
			SET NEWCOMMENTS='NULL';
		END IF;
		SET UNITDETAILHEADERNAMES = 'UD_ID,UNIT_ID,UD_START_DATE,UD_END_DATE,UD_PAYMENT,UD_DEPOSIT,UD_OBSOLETE,UD_NON_EI,UD_COMMENTS';
		SET OLD_UNITDETAILTABLEDETAILS = (SELECT CONCAT(UDID,'^','^',UNITID,'^','^',OLDSTARTDATE,'^','^',OLDENDDATE,'^','^',OLDPAYMENTAMOUNT,'^','^',OLDDEPOSIT,'^','^',OLDOBSOLETE,'^','^',OLDNONEI,'^','^',OLDCOMMENTS));
		SET NEW_UNITDETAILTABLEDETAILS = (SELECT CONCAT(UDID,'^','^',UNITID,'^','^',NEWSTARTDATE,'^','^',NEWENDDATE,'^','^',NEWPAYMENTAMOUNT,'^','^',NEWDEPOSIT,'^','^',
		NEWOBSOLETE,'^','^',NEWNONEI,'^','^',NEWCOMMENTS));
	    IF(UNITTABLEFLAG = 1 OR OLD_UNIT_NUMBER = UNITNO) THEN
			IF(OLD_UNITDETAILTABLEDETAILS != NEW_UNITDETAILTABLEDETAILS)THEN
				SET OLDUNITDETAILRECORDS = OLD_UNITDETAILTABLEDETAILS;
				SET NEWUNITDETAILRECORDS = NEW_UNITDETAILTABLEDETAILS;
				SET UNITDETAILHEADNAME = UNITDETAILHEADERNAMES;
				SET OLD_UNITDETAILS = (SELECT CONCAT('UD_ID=',UDID,',','UNIT_ID=',UNITID));
				SET NEW_UNITDETAILS = '';
				SET UNITDETAIL_LENGTH = 1;
				loop_label : LOOP
					SET OLDUNITDETAILPOSITION = (SELECT LOCATE('^^',OLDUNITDETAILRECORDS,UNITDETAIL_LENGTH));
					IF (OLDUNITDETAILPOSITION=0) THEN
						SET OLD_UNITDETAIL = OLDUNITDETAILRECORDS;
					ELSE
						SET OLD_UNITDETAIL =(SELECT SUBSTRING(OLDUNITDETAILRECORDS,UNITDETAIL_LENGTH,OLDUNITDETAILPOSITION-1));
						SET OLDUNITDETAILRECORDS=(SELECT SUBSTRING(OLDUNITDETAILRECORDS,OLDUNITDETAILPOSITION+2));
					END IF;
					SET NEWUNITDETAILPOSITION = (SELECT LOCATE('^^',NEWUNITDETAILRECORDS,UNITDETAIL_LENGTH));
					IF (NEWUNITDETAILPOSITION=0) THEN
						SET NEW_UNITDETAIL = NEWUNITDETAILRECORDS;
					ELSE
						SET NEW_UNITDETAIL=(SELECT SUBSTRING(NEWUNITDETAILRECORDS,UNITDETAIL_LENGTH,NEWUNITDETAILPOSITION-1));
						SET NEWUNITDETAILRECORDS=(SELECT SUBSTRING(NEWUNITDETAILRECORDS,NEWUNITDETAILPOSITION+2));
					END IF;
					SET UNITDETAILHEADPOSITION = (SELECT LOCATE(',',UNITDETAILHEADNAME,UNITDETAIL_LENGTH));
					IF (UNITDETAILHEADPOSITION=0) THEN
						SET UDHEADERNAME = UNITDETAILHEADNAME;
					ELSE
						SET UDHEADERNAME=(SELECT SUBSTRING(UNITDETAILHEADNAME,UNITDETAIL_LENGTH,UNITDETAILHEADPOSITION-1));
						SET UNITDETAILHEADNAME=(SELECT SUBSTRING(UNITDETAILHEADNAME,UNITDETAILHEADPOSITION+1));
					END IF;
					IF(OLD_UNITDETAIL != NEW_UNITDETAIL)THEN
						SET OLD_UNITDETAIL=(SELECT CONCAT(UDHEADERNAME, '=', OLD_UNITDETAIL));
						SET NEW_UNITDETAIL=(SELECT CONCAT(UDHEADERNAME, '=' ,NEW_UNITDETAIL));
						SET NEW_UNITDETAILS=(SELECT CONCAT(NEW_UNITDETAILS,',',NEW_UNITDETAIL));
						SET OLD_UNITDETAILS=(SELECT CONCAT(OLD_UNITDETAILS,',',OLD_UNITDETAIL));
					END IF;  
					IF (UNITDETAILHEADPOSITION<=0) THEN
						LEAVE  loop_label;
					END IF;
				END LOOP;
				SET UD_LOCATION=(SELECT LOCATE(',', NEW_UNITDETAILS,1));
				SET NEW_UNITDETAILS=(SELECT SUBSTRING(NEW_UNITDETAILS,UD_LOCATION+1));
				SET EDATE = (SELECT ADDDATE(CURDATE(), INTERVAL 2 YEAR));
				SET OLD_STARTDATE = (SELECT UD_START_DATE FROM UNIT_DETAILS WHERE UNIT_ID = UNITID);
				SET OLD_ENDDATE = (SELECT UD_END_DATE FROM UNIT_DETAILS WHERE UNIT_ID = UNITID);
				IF OLD_OBSOLETE IS NOT NULL THEN
					IF(ENDDATE > CURDATE()) THEN
						SET OBSOLETE = OBSOLETE;
					ELSE
						SET OBSOLETE = OLD_OBSOLETE;
					END IF;
					SET FINAL_SDATE = (SELECT SUBDATE(OLD_STARTDATE,INTERVAL 1 MONTH));
					IF(((STARTDATE >= FINAL_SDATE) AND (STARTDATE <= MINIMUMDATE)) AND ((ENDDATE >= MAXIMUMDATE) AND (ENDDATE <= EDATE))) THEN
						IF(STARTDATE <= ENDDATE)THEN
							IF(OLDULDID!=USERSTAMP_ID)THEN
								SET OLD_UNITDETAILS = (SELECT CONCAT(OLD_UNITDETAILS,',ULD_ID=',OLDULDID,',UD_TIMESTAMP=',OLDTIMESTAMP));
							END IF;
							IF(OLDULDID=USERSTAMP_ID)THEN
								SET OLD_UNITDETAILS = (SELECT CONCAT(OLD_UNITDETAILS,',UD_TIMESTAMP=',OLDTIMESTAMP));
							END IF;
							INSERT INTO TICKLER_HISTORY(TP_ID,TTIP_ID,TH_OLD_VALUE,TH_NEW_VALUE,ULD_ID)VALUES
							((SELECT TP_ID FROM TICKLER_PROFILE WHERE TP_TYPE='UPDATION'),
							(SELECT TTIP_ID FROM TICKLER_TABID_PROFILE WHERE TTIP_DATA='UNIT_DETAILS'),
							OLD_UNITDETAILS,NEW_UNITDETAILS,USERSTAMP_ID);
							UPDATE UNIT_DETAILS SET UD_START_DATE = STARTDATE , UD_END_DATE = ENDDATE , UD_PAYMENT = PAYMENTAMOUNT ,
							UD_DEPOSIT = DEPOSIT , UD_OBSOLETE = OBSOLETE , UD_NON_EI = NONEI , UD_COMMENTS = COMMENTS 
							WHERE UNIT_ID= UNITID;
							SET UNITUPDATE_FLAG = 1;
							SET UD_FLAG = 1;
						END IF;
					END IF;
				END IF;
				IF(OLD_OBSOLETE IS NULL)THEN
					SET FINAL_SDATE = (SELECT SUBDATE(OLD_STARTDATE,INTERVAL 1 MONTH));
					IF(((STARTDATE >= FINAL_SDATE) AND (STARTDATE <= MINIMUMDATE)) AND ((ENDDATE >= MAXIMUMDATE) AND (ENDDATE <= EDATE))) THEN
						IF(STARTDATE <= ENDDATE)THEN
							IF(OLDULDID!=USERSTAMP_ID)THEN
								SET OLD_UNITDETAILS = (SELECT CONCAT(OLD_UNITDETAILS,',ULD_ID=',OLDULDID,',UD_TIMESTAMP=',OLDTIMESTAMP));
							END IF;
							IF(OLDULDID=USERSTAMP_ID)THEN
								SET OLD_UNITDETAILS = (SELECT CONCAT(OLD_UNITDETAILS,',UD_TIMESTAMP=',OLDTIMESTAMP));
							END IF;
							INSERT INTO TICKLER_HISTORY(TP_ID,TTIP_ID,TH_OLD_VALUE,TH_NEW_VALUE,ULD_ID)VALUES
							((SELECT TP_ID FROM TICKLER_PROFILE WHERE TP_TYPE='UPDATION'),
							(SELECT TTIP_ID FROM TICKLER_TABID_PROFILE WHERE TTIP_DATA='UNIT_DETAILS'),
							OLD_UNITDETAILS,NEW_UNITDETAILS,USERSTAMP_ID);
							UPDATE UNIT_DETAILS SET UD_START_DATE = STARTDATE , UD_END_DATE = ENDDATE , UD_PAYMENT = PAYMENTAMOUNT ,
							UD_DEPOSIT = DEPOSIT,UD_NON_EI = NONEI,UD_COMMENTS = COMMENTS WHERE UNIT_ID= UNITID;
							SET UNITUPDATE_FLAG = 1;
							SET UD_FLAG = 1;
						END IF;
					END IF;
				END IF;
			END IF;
		END IF;
		SET USDATE = (SELECT UD_START_DATE FROM UNIT_DETAILS WHERE UNIT_ID = UNITID);
		SET UEDATE = (SELECT UD_END_DATE FROM UNIT_DETAILS WHERE UNIT_ID = UNITID);
		SET UDEPOSIT = (SELECT UD_DEPOSIT FROM UNIT_DETAILS WHERE UNIT_ID = UNITID);
		SET UPAYMENT = (SELECT UD_PAYMENT FROM UNIT_DETAILS WHERE UNIT_ID = UNITID);
		SET UOBSOLETE = (SELECT UD_OBSOLETE FROM UNIT_DETAILS WHERE UNIT_ID = UNITID);
		SET UNONEI = (SELECT UD_NON_EI FROM UNIT_DETAILS WHERE UNIT_ID = UNITID);
		SET UCOMMENTS = (SELECT UD_COMMENTS FROM UNIT_DETAILS WHERE UNIT_ID = UNITID);
		SET UNITACCOUNTDETAIL_ID = '';
		SET UACDID = (SELECT UACD_ID FROM UNIT_ACCOUNT_DETAILS WHERE UNIT_ID = UNITID);
		SET OLDACCNO = (SELECT UACD_ACC_NO FROM UNIT_ACCOUNT_DETAILS WHERE UACD_ID = UACDID);
		IF OLDACCNO IS NULL THEN
			SET OLDACCNO='NULL';
		END IF;
		SET OLDACCNAME = (SELECT UACD_ACC_NAME FROM UNIT_ACCOUNT_DETAILS WHERE UACD_ID = UACDID);
		IF OLDACCNAME IS NULL THEN
			SET OLDACCNAME='NULL';
		END IF;
		SET OLDBANKCODE = (SELECT UACD_BANK_CODE FROM UNIT_ACCOUNT_DETAILS WHERE UACD_ID = UACDID);
		IF OLDBANKCODE IS NULL THEN
			SET OLDBANKCODE='NULL';
		END IF;
		SET OLDBRANCHCODE = (SELECT UACD_BRANCH_CODE FROM UNIT_ACCOUNT_DETAILS WHERE UACD_ID = UACDID);
		IF OLDBRANCHCODE IS NULL THEN
			SET OLDBRANCHCODE='NULL';
		END IF;
		SET OLDADDRESS = (SELECT UACD_BANK_ADDRESS FROM UNIT_ACCOUNT_DETAILS WHERE UACD_ID = UACDID);
		IF OLDADDRESS IS NULL THEN
			SET OLDADDRESS='NULL';
		END IF;
		SET NEWACCNO = ACCOUNT_NUMBER;
		IF NEWACCNO IS NULL THEN
			SET NEWACCNO='NULL';
		END IF;
		SET NEWACCNAME = ACCOUNT_NAME;
		IF NEWACCNAME IS NULL THEN
			SET NEWACCNAME='NULL';
		END IF;
		SET NEWBANKCODE = BANK_CODE;
		IF NEWBANKCODE IS NULL THEN
			SET NEWBANKCODE='NULL';
		END IF;
		SET NEWBRANCHCODE = BRANCH_CODE;
		IF NEWBRANCHCODE IS NULL THEN
			SET NEWBRANCHCODE='NULL';
		END IF;
		SET NEWADDRESS = BANK_ADDRESS;
		IF NEWADDRESS IS NULL THEN
			SET NEWADDRESS='NULL';
		END IF;
		SET UNITACCOUNTDETAILHEADERNAMES = 'UACD_ID,UNIT_ID,UACD_ACC_NO,UACD_ACC_NAME,UACD_BANK_CODE,UACD_BRANCH_CODE,UACD_BANK_ADDRESS';
		SET OLD_UNITACCOUNTDETAILTABLEDETAILS = (SELECT CONCAT(UACDID,'^','^',UNITID,'^','^',OLDACCNO,'^','^',OLDACCNAME,'^','^',OLDBANKCODE,'^','^',OLDBRANCHCODE,'^','^',OLDADDRESS));
		SET NEW_UNITACCOUNTDETAILTABLEDETAILS = (SELECT CONCAT(UACDID,'^','^',UNITID,'^','^',NEWACCNO,'^','^',NEWACCNAME,'^','^',NEWBANKCODE,'^','^',NEWBRANCHCODE,'^','^',NEWADDRESS));
		IF (UNITTABLEFLAG = 1 OR OLD_UNIT_NUMBER = UNITNO) OR (UD_FLAG = 1) OR ((USDATE = STARTDATE) AND (UEDATE = ENDDATE) AND (UPAYMENT = PAYMENTAMOUNT) AND (UDEPOSIT = DEPOSIT)
		AND (UCOMMENTS = COMMENTS) AND ((UOBSOLETE IS NULL AND OBSOLETE IS NULL) OR (UOBSOLETE IS NOT NULL AND OBSOLETE IS NOT NULL))
		AND ((UNONEI IS NULL AND NONEI IS NULL) OR (UNONEI IS NOT NULL AND NONEI IS NOT NULL))) THEN
			IF(OLD_UNITACCOUNTDETAILTABLEDETAILS != NEW_UNITACCOUNTDETAILTABLEDETAILS)THEN
				SET OLDUNITACCOUNTDETAILRECORDS = OLD_UNITACCOUNTDETAILTABLEDETAILS;
				SET NEWUNITACCOUNTDETAILRECORDS = NEW_UNITACCOUNTDETAILTABLEDETAILS;
				SET UNITACCOUNTDETAILHEADNAME = UNITACCOUNTDETAILHEADERNAMES;
				SET OLD_UNITACCOUNTDETAILS = (SELECT CONCAT('UACD_ID=',UACDID,',','UNIT_ID=',UNITID));
				SET NEW_UNITACCOUNTDETAILS = '';
				SET UNITACCOUNTDETAIL_LENGTH = 1;
				loop_label : LOOP
					SET OLDUNITACCOUNTDETAILPOSITION = (SELECT LOCATE('^^',OLDUNITACCOUNTDETAILRECORDS,UNITACCOUNTDETAIL_LENGTH));
					IF (OLDUNITACCOUNTDETAILPOSITION=0) THEN
						SET OLD_UNITACCOUNTDETAIL = OLDUNITACCOUNTDETAILRECORDS;
					ELSE
						SET OLD_UNITACCOUNTDETAIL =(SELECT SUBSTRING(OLDUNITACCOUNTDETAILRECORDS,UNITACCOUNTDETAIL_LENGTH,OLDUNITACCOUNTDETAILPOSITION-1));
						SET OLDUNITACCOUNTDETAILRECORDS=(SELECT SUBSTRING(OLDUNITACCOUNTDETAILRECORDS,OLDUNITACCOUNTDETAILPOSITION+2));
					END IF;
					SET NEWUNITACCOUNTDETAILPOSITION = (SELECT LOCATE('^^',NEWUNITACCOUNTDETAILRECORDS,UNITACCOUNTDETAIL_LENGTH));
					IF (NEWUNITACCOUNTDETAILPOSITION=0) THEN
						SET NEW_UNITACCOUNTDETAIL = NEWUNITACCOUNTDETAILRECORDS;
					ELSE
						SET NEW_UNITACCOUNTDETAIL=(SELECT SUBSTRING(NEWUNITACCOUNTDETAILRECORDS,UNITACCOUNTDETAIL_LENGTH,NEWUNITACCOUNTDETAILPOSITION-1));
						SET NEWUNITACCOUNTDETAILRECORDS=(SELECT SUBSTRING(NEWUNITACCOUNTDETAILRECORDS,NEWUNITACCOUNTDETAILPOSITION+2));
					END IF;
					SET UNITACCOUNTDETAILHEADPOSITION = (SELECT LOCATE(',',UNITACCOUNTDETAILHEADNAME,UNITACCOUNTDETAIL_LENGTH));
					IF (UNITACCOUNTDETAILHEADPOSITION=0) THEN
						SET UDHEADERNAME = UNITACCOUNTDETAILHEADNAME;
					ELSE
						SET UDHEADERNAME=(SELECT SUBSTRING(UNITACCOUNTDETAILHEADNAME,UNITACCOUNTDETAIL_LENGTH,UNITACCOUNTDETAILHEADPOSITION-1));
						SET UNITACCOUNTDETAILHEADNAME=(SELECT SUBSTRING(UNITACCOUNTDETAILHEADNAME,UNITACCOUNTDETAILHEADPOSITION+1));
					END IF;
					IF(OLD_UNITACCOUNTDETAIL != NEW_UNITACCOUNTDETAIL)THEN
						SET OLD_UNITACCOUNTDETAIL=(SELECT CONCAT(UDHEADERNAME, '=', OLD_UNITACCOUNTDETAIL));
						SET NEW_UNITACCOUNTDETAIL=(SELECT CONCAT(UDHEADERNAME, '=' ,NEW_UNITACCOUNTDETAIL));
						SET NEW_UNITACCOUNTDETAILS=(SELECT CONCAT(NEW_UNITACCOUNTDETAILS,',',NEW_UNITACCOUNTDETAIL));
						SET OLD_UNITACCOUNTDETAILS=(SELECT CONCAT(OLD_UNITACCOUNTDETAILS,',',OLD_UNITACCOUNTDETAIL));
					END IF;  
					IF (UNITACCOUNTDETAILHEADPOSITION<=0) THEN
						LEAVE  loop_label;
					END IF;
				END LOOP;
				SET UD_LOCATION=(SELECT LOCATE(',', NEW_UNITACCOUNTDETAILS,1));
				SET NEW_UNITACCOUNTDETAILS=(SELECT SUBSTRING(NEW_UNITACCOUNTDETAILS,UD_LOCATION+1));
				IF EXISTS(SELECT UNIT_ID FROM UNIT_ACCOUNT_DETAILS WHERE UNIT_ID = UNITID) THEN
					IF(ACCOUNT_NUMBER IS NOT NULL OR ACCOUNT_NAME IS NOT NULL OR BANK_CODE IS NOT NULL OR BRANCH_CODE IS NOT NULL OR BANK_ADDRESS IS NOT NULL)THEN
						IF(OLDULDID!=USERSTAMP_ID)THEN
							SET OLD_UNITACCOUNTDETAILS = (SELECT CONCAT(OLD_UNITACCOUNTDETAILS,',ULD_ID=',OLDULDID,',UD_TIMESTAMP=',OLDTIMESTAMP));
						END IF;
						IF(OLDULDID=USERSTAMP_ID)THEN
							SET OLD_UNITACCOUNTDETAILS = (SELECT CONCAT(OLD_UNITACCOUNTDETAILS,',UD_TIMESTAMP=',OLDTIMESTAMP));
						END IF;
						INSERT INTO TICKLER_HISTORY(TP_ID,TTIP_ID,TH_OLD_VALUE,TH_NEW_VALUE,ULD_ID)VALUES
						((SELECT TP_ID FROM TICKLER_PROFILE WHERE TP_TYPE='UPDATION'),
						(SELECT TTIP_ID FROM TICKLER_TABID_PROFILE WHERE TTIP_DATA='UNIT_ACCOUNT_DETAILS'),
						OLD_UNITACCOUNTDETAILS,NEW_UNITACCOUNTDETAILS,USERSTAMP_ID);
						UPDATE UNIT_ACCOUNT_DETAILS SET UACD_ACC_NO = ACCOUNT_NUMBER , UACD_ACC_NAME = ACCOUNT_NAME,
						UACD_BANK_CODE = BANK_CODE , UACD_BRANCH_CODE = BRANCH_CODE , UACD_BANK_ADDRESS = BANK_ADDRESS WHERE UNIT_ID = UNITID;
						SET UNITUPDATE_FLAG = 1;
				END IF;
				END IF;
			END IF;
		END IF;
		IF (UNITTABLEFLAG = 1 OR OLD_UNIT_NUMBER = UNITNO) OR (UD_FLAG = 1) OR ((USDATE = STARTDATE) AND (UEDATE = ENDDATE) AND (UPAYMENT = PAYMENTAMOUNT) AND (UDEPOSIT = DEPOSIT)
		AND (UCOMMENTS = COMMENTS) AND ((UOBSOLETE IS NULL AND OBSOLETE IS NULL) OR (UOBSOLETE IS NOT NULL AND OBSOLETE IS NOT NULL))
		AND ((UNONEI IS NULL AND NONEI IS NULL) OR (UNONEI IS NOT NULL AND NONEI IS NOT NULL))) THEN
			IF NOT EXISTS(SELECT UNIT_ID FROM UNIT_ACCOUNT_DETAILS WHERE UNIT_ID = UNITID) THEN
				IF(ACCOUNT_NUMBER IS NOT NULL OR ACCOUNT_NAME IS NOT NULL OR BANK_CODE IS NOT NULL OR BRANCH_CODE IS NOT NULL OR BANK_ADDRESS IS NOT NULL)THEN
					INSERT INTO UNIT_ACCOUNT_DETAILS (UNIT_ID , UACD_ACC_NO , UACD_ACC_NAME , UACD_BANK_CODE ,UACD_BRANCH_CODE , UACD_BANK_ADDRESS) VALUES (UNITID , ACCOUNT_NUMBER , ACCOUNT_NAME , BANK_CODE ,BRANCH_CODE , BANK_ADDRESS);
					SET UNITUPDATE_FLAG = 1;
				END IF;
			END IF;
		END IF;
		IF (UNITTABLEFLAG = 1 OR OLD_UNIT_NUMBER = UNITNO) OR (UD_FLAG = 1) OR ((USDATE = STARTDATE) AND (UEDATE = ENDDATE) AND (UPAYMENT = PAYMENTAMOUNT) AND (UDEPOSIT = DEPOSIT)
		AND (UCOMMENTS = COMMENTS) AND ((UOBSOLETE IS NULL AND OBSOLETE IS NULL) OR (UOBSOLETE IS NOT NULL AND OBSOLETE IS NOT NULL))
		AND ((UNONEI IS NULL AND NONEI IS NULL) OR (UNONEI IS NOT NULL AND NONEI IS NOT NULL))) THEN
			IF( ACCOUNT_NUMBER IS NULL AND ACCOUNT_NAME IS NULL AND BANK_CODE IS NULL AND BRANCH_CODE IS NULL AND BANK_ADDRESS IS NULL ) THEN
				IF EXISTS(SELECT * FROM UNIT_ACCOUNT_DETAILS WHERE UNIT_ID=UNITID)THEN
					SET UACDID = (SELECT UACD_ID FROM UNIT_ACCOUNT_DETAILS WHERE UNIT_ID = UNITID);
					CALL SP_SINGLE_TABLE_ROW_DELETION(7,UACDID,USERSTAMP,@FLAG);
					SET UNITUPDATE_FLAG = 1;
				END IF;
			END IF;
		END IF;
	END IF;
	IF(TEMP_UNIT_CHECK_TRANSACTION IS NOT NULL) THEN
		SET @DROPQUERY = (SELECT CONCAT('DROP TABLE IF EXISTS ',TEMP_UNIT_CHECK_TRANSACTION,''));
		PREPARE DROPQUERYSTMT FROM @DROPQUERY;
		EXECUTE DROPQUERYSTMT;
	END IF;
	CALL SP_UNIT_DETAILS_ULD_TS_MAXTIMES(UNITID,USERSTAMP_ID);
COMMIT;
END;