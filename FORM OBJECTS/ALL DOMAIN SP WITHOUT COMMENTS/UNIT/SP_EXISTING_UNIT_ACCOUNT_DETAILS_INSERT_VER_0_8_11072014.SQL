DROP PROCEDURE IF EXISTS SP_EXISTING_UNIT_ACCOUNT_DETAILS_INSERT;
CREATE PROCEDURE SP_EXISTING_UNIT_ACCOUNT_DETAILS_INSERT(
IN UNIT_NUMBER SMALLINT(4),
IN ACCOUNT_NUMBER VARCHAR(15),
IN ACCOUNT_NAME VARCHAR(25),
IN BANK_CODE VARCHAR(5),
IN BRANCH_CODE VARCHAR(5),
IN BANK_ADDRESS VARCHAR(250),
IN USERSTAMP VARCHAR(50),
OUT FLAG INTEGER)
BEGIN
	DECLARE OLD_ACCOUNT_NUMBER VARCHAR(15);
	DECLARE OLD_ACCOUNT_NAME VARCHAR(25);
	DECLARE OLD_BANK_CODE VARCHAR(5);
	DECLARE OLD_BRANCH_CODE VARCHAR(5);
	DECLARE OLD_BANK_ADDRESS VARCHAR(250);
	DECLARE USERSTAMP_ID INTEGER(2);
	DECLARE UNITID INTEGER;
	DECLARE EXIT HANDLER FOR SQLEXCEPTION
	BEGIN 
		ROLLBACK; 
	END;
	IF ACCOUNT_NUMBER='' THEN
		SET ACCOUNT_NUMBER=NULL;
	END IF;
	IF ACCOUNT_NAME='' THEN
		SET ACCOUNT_NAME=NULL;
	END IF;
	IF BANK_CODE ='' THEN
		SET BANK_CODE =NULL;
	END IF;
	IF BRANCH_CODE ='' THEN
		SET BRANCH_CODE =NULL;
	END IF;
	IF BANK_ADDRESS ='' THEN
		SET BANK_ADDRESS =NULL;
	END IF;
	START TRANSACTION;
	SET FLAG = 0;
	CALL SP_CHANGE_USERSTAMP_AS_ULDID(USERSTAMP,@ULDID);
	SET USERSTAMP_ID = (SELECT @ULDID);
	SET UNITID = (SELECT UNIT_ID FROM UNIT WHERE UNIT_NO = UNIT_NUMBER);
	SET OLD_ACCOUNT_NUMBER = (SELECT UACD_ACC_NO FROM UNIT_ACCOUNT_DETAILS WHERE UNIT_ID = UNITID);
	SET OLD_ACCOUNT_NAME = (SELECT UACD_ACC_NAME FROM UNIT_ACCOUNT_DETAILS WHERE UNIT_ID =UNITID);
	SET OLD_BANK_CODE = (SELECT UACD_BANK_CODE FROM UNIT_ACCOUNT_DETAILS WHERE UNIT_ID =UNITID);
	SET OLD_BRANCH_CODE = (SELECT UACD_BRANCH_CODE FROM UNIT_ACCOUNT_DETAILS WHERE UNIT_ID =UNITID);
	SET OLD_BANK_ADDRESS = (SELECT UACD_BANK_ADDRESS FROM UNIT_ACCOUNT_DETAILS WHERE UNIT_ID =UNITID);
	SET ACCOUNT_NUMBER =(SELECT(IF (OLD_ACCOUNT_NUMBER IS NOT NULL,OLD_ACCOUNT_NUMBER,ACCOUNT_NUMBER)));
    SET ACCOUNT_NAME =(SELECT (IF (OLD_ACCOUNT_NAME IS NOT NULL,OLD_ACCOUNT_NAME,ACCOUNT_NAME)));
    SET BANK_CODE =(SELECT (IF (OLD_BANK_CODE IS NOT NULL,OLD_BANK_CODE,BANK_CODE)));
	SET BRANCH_CODE =(SELECT (IF (OLD_BRANCH_CODE IS NOT NULL,OLD_BRANCH_CODE,BRANCH_CODE)));
    SET BANK_ADDRESS =(SELECT (IF (OLD_BANK_ADDRESS IS NOT NULL,OLD_BANK_ADDRESS,BANK_ADDRESS)));
	IF  EXISTS (SELECT UNIT_ID FROM UNIT_ACCOUNT_DETAILS WHERE UNIT_ID =UNITID) THEN
		UPDATE UNIT_ACCOUNT_DETAILS SET UACD_ACC_NO = ACCOUNT_NUMBER ,UACD_ACC_NAME = ACCOUNT_NAME ,UACD_BANK_CODE = BANK_CODE ,UACD_BRANCH_CODE = BRANCH_CODE,UACD_BANK_ADDRESS = BANK_ADDRESS WHERE UNIT_ID=UNITID;
		SET FLAG = 1;
	END IF;
	IF NOT EXISTS (SELECT UNIT_ID FROM UNIT_ACCOUNT_DETAILS WHERE UNIT_ID =UNITID) THEN
		INSERT INTO UNIT_ACCOUNT_DETAILS(UNIT_ID,UACD_ACC_NO,UACD_ACC_NAME,UACD_BANK_CODE,UACD_BRANCH_CODE,UACD_BANK_ADDRESS) VALUES
		(UNITID,ACCOUNT_NUMBER,ACCOUNT_NAME,BANK_CODE,BRANCH_CODE,BANK_ADDRESS);
		SET FLAG = 1;
	END IF;
	CALL SP_UNIT_DETAILS_ULD_TS_MAXTIMES(UNITID,USERSTAMP_ID);
COMMIT;
END;