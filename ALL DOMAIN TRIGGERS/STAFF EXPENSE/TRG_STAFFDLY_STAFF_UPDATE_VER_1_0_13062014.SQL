-- version 1.0 --sdate:13/06/2014 --edate:13/06/2014 --issue:738 --commentno:#24 --desc:IMPLEMENTING TRIGGER CHANGES FOR NOT UPDATING ULD_ID AND TIMESTAMP IN TICKLER_HISTORY DONE BY:SASIKALA
-- version 0.9 --sdate:12/06/2014 --edate:12/06/2014 --issue:738 --commentno:#18 --desc:IMPLEMENTING TRIGGER CHANGES FOR NOT UPDATING PRIMARY KEY IN TICKLER_HISTORY DONE BY:SASIKALA
-- version 0.8 --sdate:05/06/2014 --edate:05/06/2014 --issue:529 --commentno:#196 --desc:ADD ULD_ID AND TIMESTAMP TO UPDATE OLD VALUE DONE BY:BHAVANI.R
-- version:0.7 --sdate:07/04/2014 --edate:07/04/2014 --issue:797 --commentno:28 --comment: table name and header changed --done by:Rajaraghu
-- VERSION 0.6 TRACKER NO: 529, COMMENT:#105 ,START DATE: 10-02-2014, END DATE: 10-02-2014, DESC: added comma after one header value is completed, DONE BY: MANIKANDAN S
-- version:0.5 -- sdate:07/02/2014 -- edate:07/02/2014 -- issue:738 -- desc:ADDED ONE CONDITION FOR NOT CREATING NULL ROW IN TICKLER_HISTORY -- doneby:RL
--  version -- > 0.4 -- >issue tracker no :636 comment no:#47 startdate:08/11/2013 enddate:08/11/2013 description -- > changed trigger name by rl
-- version 0.3 -- >start date:08/10/2013 end date:10/10/2013-- >issueno:636 -- >desc:changed variable name O as old_value and N as new_value and added comments
-- >doneby:dhivya
-- > version 0.2 -- >date:02/08/2013 -- >issueno:529 -- >commentno:23 -- >desc:changed ECN_SNO to ECN_ID&added one condition for null fields
-- >doneby:dhivya

-- after update on EXPENSE_STAFF table this trigger will be executed
DROP TRIGGER IF EXISTS TRG_STAFFDLY_STAFF_UPDATE;
CREATE TRIGGER TRG_STAFFDLY_STAFF_UPDATE  
AFTER UPDATE ON EXPENSE_STAFF
FOR EACH ROW
BEGIN 
-- declaration for old_value and new_value to store it in TICKLER_HISTORY table
DECLARE OLD_VALUE TEXT DEFAULT '';
DECLARE NEW_VALUE TEXT DEFAULT '';
IF ((OLD.ES_INVOICE_DATE!= NEW.ES_INVOICE_DATE) OR (OLD.ECN_ID!= NEW.ECN_ID) OR (OLD.ES_INVOICE_AMOUNT!= NEW.ES_INVOICE_AMOUNT) OR (OLD.ES_INVOICE_ITEMS!= NEW.ES_INVOICE_ITEMS) OR 
(OLD.ES_COMMENTS IS NULL AND NEW.ES_COMMENTS IS NOT NULL) OR (OLD.ES_COMMENTS IS NOT NULL AND NEW.ES_COMMENTS IS NULL) OR (OLD.ES_COMMENTS!= NEW.ES_COMMENTS) OR (OLD.ES_INVOICE_FROM!= NEW.ES_INVOICE_FROM)) THEN  
  SET OLD_VALUE = CONCAT(OLD_VALUE,'ES_ID=', OLD.ES_ID,','); 
END IF;
-- get the OLD VALUE & NEW_VALUE for ES_INVOICE_DATE to store it in TICKLER_HISTORY table
IF (OLD.ES_INVOICE_DATE!= NEW.ES_INVOICE_DATE) THEN  
  SET OLD_VALUE = CONCAT(OLD_VALUE,'ES_INVOICE_DATE=', OLD.ES_INVOICE_DATE,','); 
  SET NEW_VALUE = CONCAT(NEW_VALUE,'ES_INVOICE_DATE=', NEW.ES_INVOICE_DATE,','); 
END IF;

-- get the OLD VALUE & NEW_VALUE for ECN_ID to store it in TICKLER_HISTORY table
IF (OLD.ECN_ID!= NEW.ECN_ID) THEN  
  SET OLD_VALUE = CONCAT(OLD_VALUE,'ECN_ID=', OLD.ECN_ID,','); 
  SET NEW_VALUE = CONCAT(NEW_VALUE,'ECN_ID=', NEW.ECN_ID,','); 
END IF;

-- get the OLD VALUE & NEW_VALUE for ES_INVOICE_AMOUNT to store it in TICKLER_HISTORY table
IF (OLD.ES_INVOICE_AMOUNT!= NEW.ES_INVOICE_AMOUNT) THEN  
  SET OLD_VALUE = CONCAT(OLD_VALUE,'ES_INVOICE_AMOUNT=', OLD.ES_INVOICE_AMOUNT,',');
  SET NEW_VALUE = CONCAT(NEW_VALUE,'ES_INVOICE_AMOUNT=', NEW.ES_INVOICE_AMOUNT,','); 
END IF;

-- get the OLD VALUE & NEW_VALUE for ES_INVOICE_ITEMS to store it in TICKLER_HISTORY table
IF (OLD.ES_INVOICE_ITEMS!= NEW.ES_INVOICE_ITEMS) THEN  
  SET OLD_VALUE = CONCAT(OLD_VALUE,'ES_INVOICE_ITEMS=', OLD.ES_INVOICE_ITEMS,',');
  SET NEW_VALUE = CONCAT(NEW_VALUE,'ES_INVOICE_ITEMS=', NEW.ES_INVOICE_ITEMS,','); 
END IF;

-- get the OLD VALUE & NEW_VALUE for ES_COMMENTS to store it in TICKLER_HISTORY table
IF (OLD.ES_COMMENTS IS NULL AND NEW.ES_COMMENTS IS NOT NULL) THEN
SET OLD_VALUE=CONCAT(OLD_VALUE,'ES_COMMENTS=','<NULL>,');
SET NEW_VALUE=CONCAT(NEW_VALUE,'ES_COMMENTS=',NEW.ES_COMMENTS,',');
ELSEIF(OLD.ES_COMMENTS IS NOT NULL AND NEW.ES_COMMENTS IS NULL) THEN
SET OLD_VALUE=CONCAT(OLD_VALUE,'ES_COMMENTS=',OLD.ES_COMMENTS,',');
SET NEW_VALUE=CONCAT(NEW_VALUE,'ES_COMMENTS=','<NULL>,');
ELSEIF (OLD.ES_COMMENTS!= NEW.ES_COMMENTS) THEN SET 
OLD_VALUE = CONCAT(OLD_VALUE,'ES_COMMENTS=', OLD.ES_COMMENTS,','); 
SET NEW_VALUE = CONCAT(NEW_VALUE,'ES_COMMENTS=', NEW.ES_COMMENTS,','); 
END IF;
-- get the OLD VALUE & NEW_VALUE for ES_INVOICE_FROM to store it in TICKLER_HISTORY table
IF (OLD.ES_INVOICE_FROM!= NEW.ES_INVOICE_FROM) THEN  
  SET OLD_VALUE = CONCAT(OLD_VALUE,'ES_INVOICE_FROM=', OLD.ES_INVOICE_FROM,','); 
  SET NEW_VALUE = CONCAT(NEW_VALUE,'ES_INVOICE_FROM=', NEW.ES_INVOICE_FROM,','); 
END IF;
IF ((OLD.ES_INVOICE_DATE!= NEW.ES_INVOICE_DATE) OR (OLD.ECN_ID!= NEW.ECN_ID) OR (OLD.ES_INVOICE_AMOUNT!= NEW.ES_INVOICE_AMOUNT) OR (OLD.ES_INVOICE_ITEMS!= NEW.ES_INVOICE_ITEMS) OR 
(OLD.ES_COMMENTS IS NULL AND NEW.ES_COMMENTS IS NOT NULL) OR (OLD.ES_COMMENTS IS NOT NULL AND NEW.ES_COMMENTS IS NULL) OR (OLD.ES_COMMENTS!= NEW.ES_COMMENTS) OR (OLD.ES_INVOICE_FROM!= NEW.ES_INVOICE_FROM)) THEN  
 IF (OLD.ULD_ID!= NEW.ULD_ID) THEN SET 
OLD_VALUE = CONCAT(OLD_VALUE,'ULD_ID=', OLD.ULD_ID,','); 
END IF;
IF (OLD.ES_TIMESTAMP!= NEW.ES_TIMESTAMP) THEN SET 
OLD_VALUE = CONCAT(OLD_VALUE,'ES_TIMESTAMP=', OLD.ES_TIMESTAMP,','); 
END IF;
END IF;

-- inserting old_values and new_values in the TICKLER_HISTORY table with their corresponding POSTTAP_ID in TICKLER_TABID_PROFILE
IF (OLD_VALUE!='' AND NEW_VALUE!='') THEN
IF(OLD_VALUE != NEW_VALUE)THEN

-- REMOVING COMMA(,) AT THE END OF OLD_VALUE & NEW_VALUE
     SET OLD_VALUE = SUBSTRING(OLD_VALUE,1,CHAR_LENGTH(OLD_VALUE)-1);
     SET NEW_VALUE = SUBSTRING(NEW_VALUE,1,CHAR_LENGTH(NEW_VALUE)-1);

INSERT INTO TICKLER_HISTORY
(ULD_ID,TP_ID,TTIP_ID,TH_OLD_VALUE,TH_NEW_VALUE)VALUES
((SELECT ULD_ID FROM EXPENSE_STAFF WHERE ES_ID=NEW.ES_ID),
(SELECT TP_ID FROM TICKLER_PROFILE WHERE TP_TYPE='UPDATION'),
(SELECT TTIP_ID FROM TICKLER_TABID_PROFILE WHERE TTIP_DATA='EXPENSE_STAFF'),OLD_VALUE,NEW_VALUE);
END IF;
END IF;
END;
