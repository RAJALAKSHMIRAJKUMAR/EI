-- VERSION 1.1 TRACKER NO: 738, COMMENT:24 ,START DATE: 13-06-2014, END DATE: 13-06-2014,IMPLEMENTING TRIGGER CHANGES FOR NOT UPDATING ULD_ID AND TIMESTAMP IN TICKLER_HISTORY, DONE BY: SASIKALA
-- VERSION 1.0 TRACKER NO: 738, COMMENT:18 ,START DATE: 12-06-2014, END DATE: 12-06-2014,IMPLEMENTING TRIGGER CHANGES FOR NOT UPDATING PRIMARY KEY IN TICKLER_HISTORY, DONE BY: SASIKALA
-- VERSION 0.9 TRACKER NO: 529, COMMENT:196 ,START DATE: 05-06-2014, END DATE: 05-06-2014, ADDEDD OLD USERSTAMP,TIMESTAMP IN OLD TICKLER VALUE AND UPDATED NEW ULD ID IN NEW VALUE, DONE BY: SAFI.M
-- version 0.8 -- sdate:07/04/2014 -- edate:07/04/2014 -- issue:797 -- commentno:#28 -- desc:REPLACED TABLENAME AND HEADERNAME DONE BY:SASIKALA.D
-- version:0.7 -- sdate:26/02/2014 -- edate:26/02/2014 -- issue:529 -- commentno:132 -- done by:RL
-- version:0.6 -- sdate:10/02/2014 -- edate:10/02/2014 -- issue:529 -- desc:add comma after 1 header value is completed -- doneby:RL
-- version 0.5 -- sdate:08/02/2014 -- edate:08/02/2014 -- issue:738 -- commentno:#1 -- desc:ADDED ONE CONDITION FOR NOT CREATING NULL ROW IN TICKLER_HISTORY DONE BY:DHIVYA
-- version 0.4 -- sd:08/11/2013 -- ed:08/11/2013 -- issue:636 -- commentno:47 -- desc:trigger name changed by rl
-- version 0.3 -- >start date:08/10/2013 end date:10/10/2013-- >issueno:636 -- >desc:changed variable name O as old_value and N as new_value and added comments
-- >doneby:dhivya
-- > version 0.2 -- >date:02/08/2013 -- >issueno:529 -- >commentno:23 -- >desc:changed added one condition for null fields
-- >doneby:dhivya


-- after update on EXPENSE_CAR_LOAN table this trigger will be executed
DROP TRIGGER IF EXISTS TRG_PERSONAL_CAR_LOAN_UPDATE;
CREATE TRIGGER TRG_PERSONAL_CAR_LOAN_UPDATE  
AFTER UPDATE ON EXPENSE_CAR_LOAN
FOR EACH ROW
BEGIN 
-- declaration for old_value and new_value to store it in TICKLER_HISTORY table
DECLARE OLD_VALUE TEXT DEFAULT '';
DECLARE NEW_VALUE TEXT DEFAULT '';
IF ((OLD.ECL_PAID_DATE!= NEW.ECL_PAID_DATE) OR (OLD.ECL_FROM_PERIOD!= NEW.ECL_FROM_PERIOD) OR (OLD.ECL_TO_PERIOD!= NEW.ECL_TO_PERIOD) OR (OLD.ECL_AMOUNT!= NEW.ECL_AMOUNT) OR (OLD.ECL_COMMENTS IS NULL AND NEW.ECL_COMMENTS IS NOT NULL) OR (OLD.ECL_COMMENTS IS NOT NULL AND NEW.ECL_COMMENTS IS NULL) OR (OLD.ECL_COMMENTS!= NEW.ECL_COMMENTS)) THEN  
  SET OLD_VALUE = CONCAT(OLD_VALUE,'ECL_ID=', OLD.ECL_ID,','); 
END IF;
-- get the OLD VALUE & NEW_VALUE for ECL_PAID_DATE to store it in TICKLER_HISTORY table
IF (OLD.ECL_PAID_DATE!= NEW.ECL_PAID_DATE) THEN SET 
OLD_VALUE = CONCAT(OLD_VALUE,'ECL_PAID_DATE=', OLD.ECL_PAID_DATE,','); 
END IF;
IF (OLD.ECL_PAID_DATE!= NEW.ECL_PAID_DATE) THEN SET 
NEW_VALUE = CONCAT(NEW_VALUE,'ECL_PAID_DATE=', NEW.ECL_PAID_DATE,','); 
END IF;
-- get the OLD VALUE & NEW_VALUE for ECL_FROM_PERIOD to store it in TICKLER_HISTORY table
IF (OLD.ECL_FROM_PERIOD!= NEW.ECL_FROM_PERIOD) THEN SET 
OLD_VALUE = CONCAT(OLD_VALUE,'ECL_FROM_PERIOD=', OLD.ECL_FROM_PERIOD,','); 
END IF;
IF (OLD.ECL_FROM_PERIOD!= NEW.ECL_FROM_PERIOD) THEN SET 
NEW_VALUE = CONCAT(NEW_VALUE,'ECL_FROM_PERIOD=', NEW.ECL_FROM_PERIOD,','); 
END IF;
-- get the OLD VALUE & NEW_VALUE for ECL_TO_PERIOD to store it in TICKLER_HISTORY table
IF (OLD.ECL_TO_PERIOD!= NEW.ECL_TO_PERIOD) THEN SET 
OLD_VALUE = CONCAT(OLD_VALUE,'ECL_TO_PERIOD=', OLD.ECL_TO_PERIOD,','); 
END IF;
IF (OLD.ECL_TO_PERIOD!= NEW.ECL_TO_PERIOD) THEN SET 
NEW_VALUE = CONCAT(NEW_VALUE,'ECL_TO_PERIOD=', NEW.ECL_TO_PERIOD,','); 
END IF;
-- get the OLD VALUE & NEW_VALUE for ECL_AMOUNT to store it in TICKLER_HISTORY table
IF (OLD.ECL_AMOUNT!= NEW.ECL_AMOUNT) THEN SET 
OLD_VALUE = CONCAT(OLD_VALUE,'ECL_AMOUNT=', OLD.ECL_AMOUNT,','); 
END IF;
IF (OLD.ECL_AMOUNT!= NEW.ECL_AMOUNT) THEN SET 
NEW_VALUE = CONCAT(NEW_VALUE,'ECL_AMOUNT=', NEW.ECL_AMOUNT,','); 
END IF;
-- get the OLD VALUE & NEW_VALUE for ECL_COMMENTS to store it in TICKLER_HISTORY table
IF (OLD.ECL_COMMENTS IS NULL AND NEW.ECL_COMMENTS IS NOT NULL) THEN
SET OLD_VALUE=CONCAT(OLD_VALUE,'ECL_COMMENTS=','<NULL>,');
SET NEW_VALUE=CONCAT(NEW_VALUE,'ECL_COMMENTS=',NEW.ECL_COMMENTS,',');
ELSEIF(OLD.ECL_COMMENTS IS NOT NULL AND NEW.ECL_COMMENTS IS NULL) THEN
SET OLD_VALUE=CONCAT(OLD_VALUE,'ECL_COMMENTS=',OLD.ECL_COMMENTS,',');
SET NEW_VALUE=CONCAT(NEW_VALUE,'ECL_COMMENTS=','<NULL>,');
ELSEIF (OLD.ECL_COMMENTS!= NEW.ECL_COMMENTS) THEN SET 
OLD_VALUE = CONCAT(OLD_VALUE,'ECL_COMMENTS=', OLD.ECL_COMMENTS,',');  
SET NEW_VALUE = CONCAT(NEW_VALUE,'ECL_COMMENTS=', NEW.ECL_COMMENTS,','); 
END IF;
IF ((OLD.ECL_PAID_DATE!= NEW.ECL_PAID_DATE) OR (OLD.ECL_FROM_PERIOD!= NEW.ECL_FROM_PERIOD) OR (OLD.ECL_TO_PERIOD!= NEW.ECL_TO_PERIOD) OR (OLD.ECL_AMOUNT!= NEW.ECL_AMOUNT) OR (OLD.ECL_COMMENTS IS NULL AND NEW.ECL_COMMENTS IS NOT NULL) OR (OLD.ECL_COMMENTS IS NOT NULL AND NEW.ECL_COMMENTS IS NULL) OR (OLD.ECL_COMMENTS!= NEW.ECL_COMMENTS)) THEN
IF (OLD.ULD_ID!= NEW.ULD_ID) THEN SET 
OLD_VALUE = CONCAT(OLD_VALUE,'ULD_ID=', OLD.ULD_ID,','); 
END IF;
IF (OLD.ECL_TIMESTAMP!= NEW.ECL_TIMESTAMP) THEN SET 
OLD_VALUE = CONCAT(OLD_VALUE,'ECL_TIMESTAMP=', OLD.ECL_TIMESTAMP,','); 
END IF;
END IF;
-- inserting old_values and new_values in the TICKLER_HISTORY table with their corresponding TTIP_ID in TICKLER_TABID_PROFILE
IF (OLD_VALUE!='' AND NEW_VALUE!='') THEN
IF(OLD_VALUE!=NEW_VALUE)THEN
SET OLD_VALUE = SUBSTRING(OLD_VALUE,1,CHAR_LENGTH(OLD_VALUE)-1);
SET NEW_VALUE = SUBSTRING(NEW_VALUE,1,CHAR_LENGTH(NEW_VALUE)-1);
INSERT INTO TICKLER_HISTORY
(ULD_ID,TP_ID,TTIP_ID,TH_OLD_VALUE,TH_NEW_VALUE)VALUES
((SELECT ULD_ID FROM EXPENSE_CAR_LOAN WHERE ECL_ID=NEW.ECL_ID),
(SELECT TP_ID FROM TICKLER_PROFILE WHERE TP_TYPE='UPDATION'),
(SELECT TTIP_ID FROM TICKLER_TABID_PROFILE WHERE TTIP_DATA='EXPENSE_CAR_LOAN'),OLD_VALUE,NEW_VALUE);
END IF;
END IF;
END;
