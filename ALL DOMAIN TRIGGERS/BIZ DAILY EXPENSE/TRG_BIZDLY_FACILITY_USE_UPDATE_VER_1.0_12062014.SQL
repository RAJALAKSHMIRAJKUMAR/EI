-- VERSION :1.0 TRACKER: 738, START DATE: 12-06-2014, END DATE: 12-06-2014, DESC: implementing trigger changes for not updating primary key in tickler_history   DONE BY: BHAVANI.R
--version:0.9 --sdate:05/06/2014 --edate:05/06/2014 --issue:529 --comment no:196 --desc:ADDED ULD_ID & TIMESTAMP OLD VALUE & NEW VALUE --done by:RL
--version 0.8 --sd:07/04/2014 --ed:07/04/2014 --issue:797 --commentno:28--desc:REPLACED TABLENAME AND HEADERNAME by SASIKALA.D
--version:0.7 --sdate:26/02/2014 --edate:26/02/2014 --issue:529 --commentno:132 --done by:RL
--version:0.6 --sdate:10/02/2014 --edate:10/02/2014 --issue:529 --desc:add comma after 1 header value is completed --doneby:RL
--version:0.5 --sdate:08/02/2014 --edate:08/02/2014 --issue:738 --desc:ADDED ONE CONDITION FOR NOT CREATING NULL ROW IN TICKLER_HISTORY --doneby:RL
--version 0.4 --sd:07/11/2013 --ed:07/11/2013 --issue:636 --commentno:47 --desc:trigger name changed by rl
--> version 0.3 -->start date:07/10/2013 end date:10/10/2013-->issueno:636 -->desc:changed variable name O as old_value and N as new_value and added comments
-->doneby:dhivya
--> version 0.2 -->date:02/08/2013 -->issueno:529 -->commentno:23 -->desc:added one condition for null fields
-->doneby:dhivya

--after update on EXPENSE_FACILITY_USE table this trigger will be executed
DROP TRIGGER IF EXISTS TRG_BIZDLY_FACILITY_USE_UPDATE;
CREATE TRIGGER TRG_BIZDLY_FACILITY_USE_UPDATE  
AFTER UPDATE ON EXPENSE_FACILITY_USE
FOR EACH ROW
BEGIN 
-- declaration for old_value and new_value to store it in TICKLER_HISTORY table
DECLARE OLD_VALUE TEXT DEFAULT '';
DECLARE NEW_VALUE TEXT DEFAULT '';
IF (OLD.UNIT_ID!= NEW.UNIT_ID) OR (OLD.EFU_INVOICE_DATE!= NEW.EFU_INVOICE_DATE) OR (OLD.EFU_DEPOSIT IS NULL AND NEW.EFU_DEPOSIT IS NOT NULL) OR  (OLD.EFU_DEPOSIT IS NOT NULL AND NEW.EFU_DEPOSIT IS NULL) OR (OLD.EFU_DEPOSIT!= NEW.EFU_DEPOSIT) OR (OLD.EFU_AMOUNT IS NULL AND NEW.EFU_AMOUNT IS NOT NULL) OR (OLD.EFU_AMOUNT IS NOT NULL AND NEW.EFU_AMOUNT IS NULL) OR (OLD.EFU_AMOUNT!= NEW.EFU_AMOUNT) OR (OLD.EFU_COMMENTS IS NULL AND NEW.EFU_COMMENTS IS NOT NULL) OR (OLD.EFU_COMMENTS IS NOT NULL AND NEW.EFU_COMMENTS IS NULL) OR (OLD.EFU_COMMENTS != NEW.EFU_COMMENTS) THEN  
  SET OLD_VALUE = CONCAT(OLD_VALUE,'EFU_ID=', OLD.EFU_ID,','); 
END IF;
-- get the OLD VALUE & NEW_VALUE for UNIT_ID to store it in TICKLER_HISTORY table
IF (OLD.UNIT_ID!= NEW.UNIT_ID) THEN SET 
OLD_VALUE = CONCAT(OLD_VALUE,'UNIT_ID=', OLD.UNIT_ID,','); 
END IF;
IF (OLD.UNIT_ID!= NEW.UNIT_ID) THEN SET 
NEW_VALUE = CONCAT(NEW_VALUE,'UNIT_ID=', NEW.UNIT_ID,','); 
END IF;
-- get the OLD VALUE & NEW_VALUE for EFU_INVOICE_DATE to store it in TICKLER_HISTORY table
IF (OLD.EFU_INVOICE_DATE!= NEW.EFU_INVOICE_DATE) THEN SET 
OLD_VALUE = CONCAT(OLD_VALUE,'EFU_INVOICE_DATE=', OLD.EFU_INVOICE_DATE,','); 
END IF;
IF (OLD.EFU_INVOICE_DATE!= NEW.EFU_INVOICE_DATE) THEN SET 
NEW_VALUE = CONCAT(NEW_VALUE,'EFU_INVOICE_DATE=', NEW.EFU_INVOICE_DATE,','); 
END IF;
-- get the OLD VALUE & NEW_VALUE for EFU_DEPOSIT to store it in TICKLER_HISTORY table
IF (OLD.EFU_DEPOSIT IS NULL AND NEW.EFU_DEPOSIT IS NOT NULL) THEN
SET OLD_VALUE=CONCAT(OLD_VALUE,'EFU_DEPOSIT=','<NULL>,');
SET NEW_VALUE=CONCAT(NEW_VALUE,'EFU_DEPOSIT=',NEW.EFU_DEPOSIT,',');
ELSEIF(OLD.EFU_DEPOSIT IS NOT NULL AND NEW.EFU_DEPOSIT IS NULL) THEN
SET OLD_VALUE=CONCAT(OLD_VALUE,'EFU_DEPOSIT=',OLD.EFU_DEPOSIT,',');
SET NEW_VALUE=CONCAT(NEW_VALUE,'EFU_DEPOSIT=','<NULL>,');
ELSEIF(OLD.EFU_DEPOSIT!= NEW.EFU_DEPOSIT) THEN 
SET OLD_VALUE = CONCAT(OLD_VALUE,'EFU_DEPOSIT=', OLD.EFU_DEPOSIT,','); 
SET NEW_VALUE = CONCAT(NEW_VALUE,'EFU_DEPOSIT=', NEW.EFU_DEPOSIT,','); 
END IF;
-- get the OLD VALUE & NEW_VALUE for EFU_AMOUNT to store it in TICKLER_HISTORY table
IF (OLD.EFU_AMOUNT IS NULL AND NEW.EFU_AMOUNT IS NOT NULL) THEN
SET OLD_VALUE=CONCAT(OLD_VALUE,'EFU_AMOUNT=','<NULL>,');
SET NEW_VALUE=CONCAT(NEW_VALUE,'EFU_AMOUNT=',NEW.EFU_AMOUNT,',');
ELSEIF(OLD.EFU_AMOUNT IS NOT NULL AND NEW.EFU_AMOUNT IS NULL) THEN
SET OLD_VALUE=CONCAT(OLD_VALUE,'EFU_AMOUNT=',OLD.EFU_AMOUNT,',');
SET NEW_VALUE=CONCAT(NEW_VALUE,'EFU_AMOUNT=','<NULL>,');
ELSEIF (OLD.EFU_AMOUNT!= NEW.EFU_AMOUNT) THEN SET 
OLD_VALUE = CONCAT(OLD_VALUE,'EFU_AMOUNT=', OLD.EFU_AMOUNT,','); 
SET NEW_VALUE = CONCAT(NEW_VALUE,'EFU_AMOUNT=', NEW.EFU_AMOUNT,','); 
END IF;
-- get the OLD VALUE & NEW_VALUE for EFU_COMMENTS to store it in TICKLER_HISTORY table
IF (OLD.EFU_COMMENTS IS NULL AND NEW.EFU_COMMENTS IS NOT NULL) THEN
SET OLD_VALUE=CONCAT(OLD_VALUE,'EFU_COMMENTS=','<NULL>,');
SET NEW_VALUE=CONCAT(NEW_VALUE,'EFU_COMMENTS=',NEW.EFU_COMMENTS,',');
ELSEIF(OLD.EFU_COMMENTS IS NOT NULL AND NEW.EFU_COMMENTS IS NULL) THEN
SET OLD_VALUE=CONCAT(OLD_VALUE,'EFU_COMMENTS=',OLD.EFU_COMMENTS,',');
SET NEW_VALUE=CONCAT(NEW_VALUE,'EFU_COMMENTS=','<NULL>,');
ELSEIF (OLD.EFU_COMMENTS!= NEW.EFU_COMMENTS) THEN 
SET OLD_VALUE = CONCAT(OLD_VALUE,'EFU_COMMENTS=', OLD.EFU_COMMENTS,','); 
SET NEW_VALUE = CONCAT(NEW_VALUE,'EFU_COMMENTS=', NEW.EFU_COMMENTS,','); 
END IF;
IF (OLD.UNIT_ID!= NEW.UNIT_ID) OR (OLD.EFU_INVOICE_DATE!= NEW.EFU_INVOICE_DATE) OR (OLD.EFU_DEPOSIT IS NULL AND NEW.EFU_DEPOSIT IS NOT NULL) OR  (OLD.EFU_DEPOSIT IS NOT NULL AND NEW.EFU_DEPOSIT IS NULL) OR (OLD.EFU_DEPOSIT!= NEW.EFU_DEPOSIT) OR (OLD.EFU_AMOUNT IS NULL AND NEW.EFU_AMOUNT IS NOT NULL) OR (OLD.EFU_AMOUNT IS NOT NULL AND NEW.EFU_AMOUNT IS NULL) OR (OLD.EFU_AMOUNT!= NEW.EFU_AMOUNT) OR (OLD.EFU_COMMENTS IS NULL AND NEW.EFU_COMMENTS IS NOT NULL) OR (OLD.EFU_COMMENTS IS NOT NULL AND NEW.EFU_COMMENTS IS NULL) OR (OLD.EFU_COMMENTS != NEW.EFU_COMMENTS) THEN  
IF (OLD.ULD_ID!= NEW.ULD_ID) THEN SET 
OLD_VALUE = CONCAT(OLD_VALUE,'ULD_ID=', OLD.ULD_ID,','); 
END IF;
IF (OLD.EFU_TIMESTAMP!= NEW.EFU_TIMESTAMP) THEN SET 
OLD_VALUE = CONCAT(OLD_VALUE,'EFU_TIMESTAMP=', OLD.EFU_TIMESTAMP,','); 
END IF;
END IF;
-- inserting old_values and new_values in the TICKLER_HISTORY table with their corresponding TTIP_ID in TICKLER_TABID_PROFILE
IF (OLD_VALUE!='' AND NEW_VALUE!='') THEN
IF(OLD_VALUE != NEW_VALUE)THEN
SET OLD_VALUE = SUBSTRING(OLD_VALUE,1,CHAR_LENGTH(OLD_VALUE)-1);
SET NEW_VALUE = SUBSTRING(NEW_VALUE,1,CHAR_LENGTH(NEW_VALUE)-1);
INSERT INTO TICKLER_HISTORY
(ULD_ID,TP_ID,TTIP_ID,TH_OLD_VALUE,TH_NEW_VALUE)VALUES
((SELECT ULD_ID FROM EXPENSE_FACILITY_USE WHERE EFU_ID=NEW.EFU_ID),
(SELECT TP_ID FROM TICKLER_PROFILE WHERE TP_TYPE='UPDATION'),
(SELECT TTIP_ID FROM TICKLER_TABID_PROFILE WHERE TTIP_DATA='EXPENSE_FACILITY_USE'),OLD_VALUE,NEW_VALUE);
END IF;
END IF;
END;
