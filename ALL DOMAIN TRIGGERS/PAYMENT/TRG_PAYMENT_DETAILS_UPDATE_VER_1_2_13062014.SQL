--  VERSION :1.2, TRACKER: 738, START DATE: 13-06-2014, END DATE: 13-06-2014, DESC: IMPLEMENTING TRIGGER CHANGES FOR NOT UPDATING ULD_ID AND TIMESTAMP IN TICKLER_HISTORY DONE BY:SASIKALA
--  VERSION :1.1, TRACKER: 738, START DATE: 12-06-2014, END DATE: 12-06-2014, DESC: IMPLEMENTING TRIGGER CHANGES FOR NOT UPDATING PRIMARY KEY IN TICKLER_HISTORY DONE BY:SASIKALA
--  VERSION :1.0, TRACKER: 529, START DATE: 05-06-2014, END DATE: 05-06-2014, DESC: ADDED USERSTAMP AND TIMESTAMP OLD_VALUE IN TICKLER_HISTORY TABLE   DONE BY: DHIVYA.A
-- version:0.9 -- sdate:07/04/2014 -- edate:07/04/2014 -- issue:797 -- commentno:28 -- comment: changed header and table name -- done by:Raja
-- version:0.8 -- sdate:10/02/2014 -- edate:10/02/2014 -- issue:529 -- desc:add comma after 1 header value is completed -- doneby:RL
-- version:0.7 -- sdate:07/02/2014 -- edate:07/02/2014 -- issue:738 -- desc:ADDED ONE CONDITION FOR NOT CREATING NULL ROW IN TICKLER_HISTORY -- doneby:RL
--  version -- > 0.6 -- >issue tracker no :657 startdate:18/11/2013 enddate:18/11/2013 description -- > added one condition for tickler history table by rl
--  version -- > 0.5 -- >issue tracker no :636 comment no:#47 startdate:08/11/2013 enddate:08/11/2013 description -- > changed trigger name by rl
-- version 0.4 -- >start date:08/10/2013 end date:10/10/2013-- >issueno:636 -- >desc:changed variable name O as old_value and N as new_value and added comments
-- >doneby:dhivya
-- > version 0.3 -- >date:05/10/2013 -- >issueno:529 -- >commentno:45 -- >desc:updated rental configuration table name and its headers as payment as per table updation
-- >doneby:dhivya
-- > version 0.2 -- >date:02/08/2013 -- >issueno:529 -- >commentno:23 -- >desc:added one condition for null fields
-- >doneby:dhivya

-- after update on PAYMENT_DETAILS table this trigger will be executed
DROP TRIGGER IF EXISTS TRG_PAYMENT_DETAILS_UPDATE;
CREATE TRIGGER TRG_PAYMENT_DETAILS_UPDATE  
AFTER UPDATE ON PAYMENT_DETAILS
FOR EACH ROW
BEGIN 
-- declaration for old_value and new_value to store it in TICKLER_HISTORY table
DECLARE OLD_VALUE TEXT DEFAULT '';
DECLARE NEW_VALUE TEXT DEFAULT '';
IF ((OLD.UNIT_ID!= NEW.UNIT_ID) OR (OLD.CUSTOMER_ID!= NEW.CUSTOMER_ID) OR (OLD.PP_ID!= NEW.PP_ID) OR (OLD.CED_REC_VER!= NEW.CED_REC_VER) OR (OLD.PD_AMOUNT!= NEW.PD_AMOUNT) OR (OLD.PD_FOR_PERIOD!= NEW.PD_FOR_PERIOD) OR (OLD.PD_PAID_DATE!= NEW.PD_PAID_DATE) OR (OLD.PD_HIGHLIGHT_FLAG IS NULL AND NEW.PD_HIGHLIGHT_FLAG IS NOT NULL) OR (OLD.PD_HIGHLIGHT_FLAG IS NOT NULL AND NEW.PD_HIGHLIGHT_FLAG IS NULL) OR (OLD.PD_HIGHLIGHT_FLAG!= NEW.PD_HIGHLIGHT_FLAG) OR (OLD.PD_COMMENTS IS NULL AND NEW.PD_COMMENTS IS NOT NULL) OR (OLD.PD_COMMENTS IS NOT NULL AND NEW.PD_COMMENTS IS NULL) OR (OLD.PD_COMMENTS!= NEW.PD_COMMENTS)) THEN  
  SET OLD_VALUE = CONCAT(OLD_VALUE,'PD_ID=', OLD.PD_ID,','); 
END IF;
-- get the OLD VALUE & NEW_VALUE for UNIT_ID to store it in TICKLER_HISTORY table
IF (OLD.UNIT_ID!= NEW.UNIT_ID) THEN SET 
OLD_VALUE = CONCAT(OLD_VALUE,'UNIT_ID=', OLD.UNIT_ID,','); 
END IF;
IF (OLD.UNIT_ID!= NEW.UNIT_ID) THEN SET 
NEW_VALUE = CONCAT(NEW_VALUE,'UNIT_ID=', NEW.UNIT_ID,','); 
END IF;
-- get the OLD VALUE & NEW_VALUE for CUSTOMER_ID to store it in TICKLER_HISTORY table
IF (OLD.CUSTOMER_ID!= NEW.CUSTOMER_ID) THEN SET 
OLD_VALUE = CONCAT(OLD_VALUE,'CUSTOMER_ID=', OLD.CUSTOMER_ID,','); 
END IF;
IF (OLD.CUSTOMER_ID!= NEW.CUSTOMER_ID) THEN SET 
NEW_VALUE = CONCAT(NEW_VALUE,'CUSTOMER_ID=', NEW.CUSTOMER_ID,','); 
END IF;
-- get the OLD VALUE & NEW_VALUE for PP_ID to store it in TICKLER_HISTORY table
IF (OLD.PP_ID!= NEW.PP_ID) THEN SET 
OLD_VALUE = CONCAT(OLD_VALUE,'PP_ID=', OLD.PP_ID,','); 
END IF;
IF (OLD.PP_ID!= NEW.PP_ID) THEN SET 
NEW_VALUE = CONCAT(NEW_VALUE,'PP_ID=', NEW.PP_ID,','); 
END IF;
-- get the OLD VALUE & NEW_VALUE for CED_REC_VER to store it in TICKLER_HISTORY table
IF (OLD.CED_REC_VER!= NEW.CED_REC_VER) THEN SET 
OLD_VALUE = CONCAT(OLD_VALUE,'CED_REC_VER=', OLD.CED_REC_VER,','); 
END IF;
IF (OLD.CED_REC_VER!= NEW.CED_REC_VER) THEN SET 
NEW_VALUE = CONCAT(NEW_VALUE,'CED_REC_VER=', NEW.CED_REC_VER,','); 
END IF;
-- get the OLD VALUE & NEW_VALUE for PD_AMOUNT to store it in TICKLER_HISTORY table
IF (OLD.PD_AMOUNT!= NEW.PD_AMOUNT) THEN SET 
OLD_VALUE = CONCAT(OLD_VALUE,'PD_AMOUNT=', OLD.PD_AMOUNT,','); 
END IF;
IF (OLD.PD_AMOUNT!= NEW.PD_AMOUNT) THEN SET 
NEW_VALUE = CONCAT(NEW_VALUE,'PD_AMOUNT=', NEW.PD_AMOUNT,','); 
END IF;
-- get the OLD VALUE & NEW_VALUE for PD_FOR_PERIOD to store it in TICKLER_HISTORY table
IF (OLD.PD_FOR_PERIOD!= NEW.PD_FOR_PERIOD) THEN SET 
OLD_VALUE = CONCAT(OLD_VALUE,'PD_FOR_PERIOD=', OLD.PD_FOR_PERIOD,','); 
END IF;
IF (OLD.PD_FOR_PERIOD!= NEW.PD_FOR_PERIOD) THEN SET 
NEW_VALUE = CONCAT(NEW_VALUE,'PD_FOR_PERIOD=', NEW.PD_FOR_PERIOD,','); 
END IF;
-- get the OLD VALUE & NEW_VALUE for PD_PAID_DATE to store it in TICKLER_HISTORY table
IF (OLD.PD_PAID_DATE!= NEW.PD_PAID_DATE) THEN SET 
OLD_VALUE = CONCAT(OLD_VALUE,'PD_PAID_DATE=', OLD.PD_PAID_DATE,','); 
END IF;
IF (OLD.PD_PAID_DATE!= NEW.PD_PAID_DATE) THEN SET 
NEW_VALUE = CONCAT(NEW_VALUE,'PD_PAID_DATE=', NEW.PD_PAID_DATE,','); 
END IF;
-- get the OLD VALUE & NEW_VALUE for PD_HIGHLIGHT_FLAG to store it in TICKLER_HISTORY table
IF (OLD.PD_HIGHLIGHT_FLAG IS NULL AND NEW.PD_HIGHLIGHT_FLAG IS NOT NULL) THEN
SET OLD_VALUE=CONCAT(OLD_VALUE,'PD_HIGHLIGHT_FLAG=','<NULL>,');
SET NEW_VALUE=CONCAT(NEW_VALUE,'PD_HIGHLIGHT_FLAG=',NEW.PD_HIGHLIGHT_FLAG,',');
ELSEIF (OLD.PD_HIGHLIGHT_FLAG IS NOT NULL AND NEW.PD_HIGHLIGHT_FLAG IS NULL) THEN
SET OLD_VALUE=CONCAT(OLD_VALUE,'PD_HIGHLIGHT_FLAG=',OLD.PD_HIGHLIGHT_FLAG,',');
SET NEW_VALUE=CONCAT(NEW_VALUE,'PD_HIGHLIGHT_FLAG=','<NULL>,');
ELSEIF (OLD.PD_HIGHLIGHT_FLAG!= NEW.PD_HIGHLIGHT_FLAG) THEN 
SET OLD_VALUE = CONCAT(OLD_VALUE,'PD_HIGHLIGHT_FLAG=', OLD.PD_HIGHLIGHT_FLAG,','); 
SET NEW_VALUE = CONCAT(NEW_VALUE,'PD_HIGHLIGHT_FLAG=', NEW.PD_HIGHLIGHT_FLAG,','); 
END IF;
-- get the OLD VALUE & NEW_VALUE for PD_COMMENTS to store it in TICKLER_HISTORY table
IF (OLD.PD_COMMENTS IS NULL AND NEW.PD_COMMENTS IS NOT NULL) THEN
SET OLD_VALUE=CONCAT(OLD_VALUE,'PD_COMMENTS=','<NULL>,');
SET NEW_VALUE=CONCAT(NEW_VALUE,'PD_COMMENTS=',NEW.PD_COMMENTS,',');
ELSEIF (OLD.PD_COMMENTS IS NOT NULL AND NEW.PD_COMMENTS IS NULL) THEN
SET OLD_VALUE=CONCAT(OLD_VALUE,'PD_COMMENTS=',OLD.PD_COMMENTS,',');
SET NEW_VALUE=CONCAT(NEW_VALUE,'PD_COMMENTS=','<NULL>,');
ELSEIF (OLD.PD_COMMENTS!= NEW.PD_COMMENTS) THEN 
SET OLD_VALUE = CONCAT(OLD_VALUE,'PD_COMMENTS=', OLD.PD_COMMENTS,','); 
SET NEW_VALUE = CONCAT(NEW_VALUE,'PD_COMMENTS=', NEW.PD_COMMENTS,','); 
END IF;
IF ((OLD.UNIT_ID!= NEW.UNIT_ID) OR (OLD.CUSTOMER_ID!= NEW.CUSTOMER_ID) OR (OLD.PP_ID!= NEW.PP_ID) OR (OLD.CED_REC_VER!= NEW.CED_REC_VER) OR (OLD.PD_AMOUNT!= NEW.PD_AMOUNT) OR (OLD.PD_FOR_PERIOD!= NEW.PD_FOR_PERIOD) OR (OLD.PD_PAID_DATE!= NEW.PD_PAID_DATE) OR (OLD.PD_HIGHLIGHT_FLAG IS NULL AND NEW.PD_HIGHLIGHT_FLAG IS NOT NULL) OR (OLD.PD_HIGHLIGHT_FLAG IS NOT NULL AND NEW.PD_HIGHLIGHT_FLAG IS NULL) OR (OLD.PD_HIGHLIGHT_FLAG!= NEW.PD_HIGHLIGHT_FLAG) OR (OLD.PD_COMMENTS IS NULL AND NEW.PD_COMMENTS IS NOT NULL) OR (OLD.PD_COMMENTS IS NOT NULL AND NEW.PD_COMMENTS IS NULL) OR (OLD.PD_COMMENTS!= NEW.PD_COMMENTS)) THEN  
IF (OLD.ULD_ID!= NEW.ULD_ID) THEN SET 
OLD_VALUE = CONCAT(OLD_VALUE,'ULD_ID=', OLD.ULD_ID,','); 
END IF;
IF (OLD.PD_TIMESTAMP!= NEW.PD_TIMESTAMP) THEN SET 
OLD_VALUE = CONCAT(OLD_VALUE,'PD_TIMESTAMP=', OLD.PD_TIMESTAMP,','); 
END IF;
END IF;
-- inserting old_values and new_values in the TICKLER_HISTORY table with their corresponding POSTTAP_ID in TICKLER_TABID_PROFILE
IF (OLD_VALUE!='' AND NEW_VALUE!='') THEN
IF(OLD_VALUE != NEW_VALUE)THEN
SET OLD_VALUE = SUBSTRING(OLD_VALUE,1,CHAR_LENGTH(OLD_VALUE)-1);
SET NEW_VALUE = SUBSTRING(NEW_VALUE,1,CHAR_LENGTH(NEW_VALUE)-1);
INSERT INTO TICKLER_HISTORY
(ULD_ID,TP_ID,TTIP_ID,CUSTOMER_ID,TH_OLD_VALUE,TH_NEW_VALUE)VALUES
((SELECT ULD_ID FROM PAYMENT_DETAILS WHERE PD_ID=NEW.PD_ID),
(SELECT TP_ID FROM TICKLER_PROFILE WHERE TP_TYPE='UPDATION'),
(SELECT TTIP_ID FROM TICKLER_TABID_PROFILE WHERE TTIP_DATA='PAYMENT_DETAILS'),
(SELECT CUSTOMER_ID FROM PAYMENT_DETAILS WHERE CUSTOMER_ID=NEW.CUSTOMER_ID AND PD_ID=NEW.PD_ID),OLD_VALUE,NEW_VALUE);
END IF;
END IF;
END;
